"use client";
import {
  createPopper
} from "./chunk-ZPQ4Y73R.js";
import {
  Box_default,
  GlobalStyles_default,
  HTMLElementType,
  StyledEngineProvider,
  ThemeProvider_default,
  Timeout,
  boxClasses_default,
  capitalize,
  chainPropTypes,
  colors_default,
  composeClasses,
  createContainer,
  createCssVarsProvider,
  createGetCssVar,
  createGetCssVar2,
  createGrid,
  createStack,
  createStyled,
  defaultTheme_default,
  elementAcceptingRef_default,
  extendSxProp,
  extendTheme,
  generateUtilityClass,
  generateUtilityClass2,
  generateUtilityClasses,
  generateUtilityClasses2,
  getPath,
  getReactElementRef,
  identifier_default,
  integerPropType_default,
  isMuiElement,
  refType_default,
  shouldSkipGeneratingVar,
  traverseBreakpoints,
  useControlled,
  useEventCallback_default,
  useForkRef,
  useId,
  useIsFocusVisible,
  usePreviousProps_default,
  useThemeProps,
  useTheme_default,
  useTimeout
} from "./chunk-IWU3RQMA.js";
import "./chunk-2UH2JP76.js";
import "./chunk-D7ZASVPN.js";
import {
  _objectWithoutPropertiesLoose
} from "./chunk-BFL632LT.js";
import {
  clsx_default,
  require_prop_types,
  require_react_is
} from "./chunk-6BN4XBDA.js";
import {
  css,
  keyframes
} from "./chunk-NEKRQVM4.js";
import {
  _extends
} from "./chunk-EQCCHGRT.js";
import {
  require_jsx_runtime
} from "./chunk-5AS4NL4J.js";
import {
  require_react_dom
} from "./chunk-OX56QJAV.js";
import {
  require_react
} from "./chunk-RUPNRBO7.js";
import {
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/@mui/joy/InitColorSchemeScript/InitColorSchemeScript.js
var React = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var defaultConfig = {
  attribute: "data-joy-color-scheme",
  colorSchemeStorageKey: "joy-color-scheme",
  defaultLightColorScheme: "light",
  defaultDarkColorScheme: "dark",
  modeStorageKey: "joy-mode"
};

// node_modules/@mui/joy/styles/CssVarsProvider.js
var {
  CssVarsProvider,
  useColorScheme,
  getInitColorSchemeScript: getInitColorSchemeScriptSystem
} = createCssVarsProvider({
  themeId: identifier_default,
  theme: defaultTheme_default,
  attribute: defaultConfig.attribute,
  modeStorageKey: defaultConfig.modeStorageKey,
  colorSchemeStorageKey: defaultConfig.colorSchemeStorageKey,
  defaultColorScheme: {
    light: defaultConfig.defaultLightColorScheme,
    dark: defaultConfig.defaultDarkColorScheme
  }
});
var getInitColorSchemeScript = getInitColorSchemeScriptSystem;

// node_modules/@mui/joy/styles/styled.js
var styled = createStyled({
  defaultTheme: defaultTheme_default,
  themeId: identifier_default
});
var styled_default = styled;

// node_modules/@mui/joy/styles/ThemeProvider.js
var React2 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var useTheme = () => {
  const theme = useTheme_default(defaultTheme_default);
  if (true) {
    React2.useDebugValue(theme);
  }
  return theme[identifier_default] || theme;
};
function ThemeProvider({
  children,
  theme: themeInput
}) {
  let theme = defaultTheme_default;
  if (themeInput) {
    theme = extendTheme(identifier_default in themeInput ? themeInput[identifier_default] : themeInput);
  }
  return (0, import_jsx_runtime2.jsx)(ThemeProvider_default, {
    theme,
    themeId: themeInput && identifier_default in themeInput ? identifier_default : void 0,
    children
  });
}

// node_modules/@mui/joy/styles/useThemeProps.js
function useThemeProps2({
  props,
  name
}) {
  return useThemeProps({
    props,
    name,
    defaultTheme: _extends({}, defaultTheme_default, {
      components: {}
    }),
    themeId: identifier_default
  });
}

// node_modules/@mui/joy/GlobalStyles/GlobalStyles.js
var React3 = __toESM(require_react());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
function GlobalStyles(props) {
  return (0, import_jsx_runtime3.jsx)(GlobalStyles_default, _extends({}, props, {
    defaultTheme: defaultTheme_default,
    themeId: identifier_default
  }));
}
var GlobalStyles_default2 = GlobalStyles;

// node_modules/@mui/joy/Accordion/Accordion.js
var React99 = __toESM(require_react());
var import_prop_types35 = __toESM(require_prop_types());

// node_modules/@mui/base/node_modules/@mui/utils/esm/isHostComponent/isHostComponent.js
function isHostComponent(element) {
  return typeof element === "string";
}
var isHostComponent_default = isHostComponent;

// node_modules/@mui/base/node_modules/@mui/utils/esm/appendOwnerState/appendOwnerState.js
function appendOwnerState(elementType, otherProps, ownerState) {
  if (elementType === void 0 || isHostComponent_default(elementType)) {
    return otherProps;
  }
  return _extends({}, otherProps, {
    ownerState: _extends({}, otherProps.ownerState, ownerState)
  });
}
var appendOwnerState_default = appendOwnerState;

// node_modules/@mui/base/utils/areArraysEqual.js
function areArraysEqual(array1, array2, itemComparer = (a, b) => a === b) {
  return array1.length === array2.length && array1.every((value, index2) => itemComparer(value, array2[index2]));
}

// node_modules/@mui/base/utils/ClassNameConfigurator.js
var React4 = __toESM(require_react());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var defaultContextValue = {
  disableDefaultClasses: false
};
var ClassNameConfiguratorContext = React4.createContext(defaultContextValue);
if (true) {
  ClassNameConfiguratorContext.displayName = "ClassNameConfiguratorContext";
}
function useClassNamesOverride(generateUtilityClass5) {
  const {
    disableDefaultClasses
  } = React4.useContext(ClassNameConfiguratorContext);
  return (slot) => {
    if (disableDefaultClasses) {
      return "";
    }
    return generateUtilityClass5(slot);
  };
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/extractEventHandlers/extractEventHandlers.js
function extractEventHandlers(object, excludeKeys = []) {
  if (object === void 0) {
    return {};
  }
  const result = {};
  Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
    result[prop] = object[prop];
  });
  return result;
}
var extractEventHandlers_default = extractEventHandlers;

// node_modules/@mui/base/node_modules/@mui/utils/esm/resolveComponentProps/resolveComponentProps.js
function resolveComponentProps(componentProps, ownerState, slotState) {
  if (typeof componentProps === "function") {
    return componentProps(ownerState, slotState);
  }
  return componentProps;
}
var resolveComponentProps_default = resolveComponentProps;

// node_modules/@mui/base/utils/useRootElementName.js
var React5 = __toESM(require_react());
function useRootElementName(parameters) {
  const {
    rootElementName: rootElementNameProp = "",
    componentName
  } = parameters;
  const [rootElementName, setRootElementName] = React5.useState(rootElementNameProp.toUpperCase());
  if (true) {
    React5.useEffect(() => {
      if (rootElementNameProp && rootElementName !== rootElementNameProp.toUpperCase()) {
        console.error(`useRootElementName: the \`rootElementName\` prop of ${componentName ? `the ${componentName} component` : "a component"} expected the '${rootElementNameProp}' element, but a '${rootElementName.toLowerCase()}' was rendered instead`, "This may cause hydration issues in an SSR context, for example in a Next.js app");
      }
    }, [rootElementNameProp, rootElementName, componentName]);
  }
  const updateRootElementName = React5.useCallback((instance) => {
    var _instance$tagName;
    setRootElementName((_instance$tagName = instance == null ? void 0 : instance.tagName) != null ? _instance$tagName : "");
  }, []);
  return [rootElementName, updateRootElementName];
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/useForkRef/useForkRef.js
var React6 = __toESM(require_react());

// node_modules/@mui/base/node_modules/@mui/utils/esm/setRef/setRef.js
function setRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/useForkRef/useForkRef.js
function useForkRef2(...refs) {
  return React6.useMemo(() => {
    if (refs.every((ref) => ref == null)) {
      return null;
    }
    return (instance) => {
      refs.forEach((ref) => {
        setRef(ref, instance);
      });
    };
  }, refs);
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/omitEventHandlers/omitEventHandlers.js
function omitEventHandlers(object) {
  if (object === void 0) {
    return {};
  }
  const result = {};
  Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
    result[prop] = object[prop];
  });
  return result;
}
var omitEventHandlers_default = omitEventHandlers;

// node_modules/@mui/base/node_modules/@mui/utils/esm/mergeSlotProps/mergeSlotProps.js
function mergeSlotProps(parameters) {
  const {
    getSlotProps,
    additionalProps,
    externalSlotProps,
    externalForwardedProps,
    className
  } = parameters;
  if (!getSlotProps) {
    const joinedClasses2 = clsx_default(additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
    const mergedStyle2 = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
    const props2 = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);
    if (joinedClasses2.length > 0) {
      props2.className = joinedClasses2;
    }
    if (Object.keys(mergedStyle2).length > 0) {
      props2.style = mergedStyle2;
    }
    return {
      props: props2,
      internalRef: void 0
    };
  }
  const eventHandlers = extractEventHandlers_default(_extends({}, externalForwardedProps, externalSlotProps));
  const componentsPropsWithoutEventHandlers = omitEventHandlers_default(externalSlotProps);
  const otherPropsWithoutEventHandlers = omitEventHandlers_default(externalForwardedProps);
  const internalSlotProps = getSlotProps(eventHandlers);
  const joinedClasses = clsx_default(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
  const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
  const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
  if (joinedClasses.length > 0) {
    props.className = joinedClasses;
  }
  if (Object.keys(mergedStyle).length > 0) {
    props.style = mergedStyle;
  }
  return {
    props,
    internalRef: internalSlotProps.ref
  };
}
var mergeSlotProps_default = mergeSlotProps;

// node_modules/@mui/base/node_modules/@mui/utils/esm/useSlotProps/useSlotProps.js
var _excluded = ["elementType", "externalSlotProps", "ownerState", "skipResolvingSlotProps"];
function useSlotProps(parameters) {
  var _parameters$additiona;
  const {
    elementType,
    externalSlotProps,
    ownerState,
    skipResolvingSlotProps = false
  } = parameters, rest = _objectWithoutPropertiesLoose(parameters, _excluded);
  const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps_default(externalSlotProps, ownerState);
  const {
    props: mergedProps,
    internalRef
  } = mergeSlotProps_default(_extends({}, rest, {
    externalSlotProps: resolvedComponentsProps
  }));
  const ref = useForkRef2(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
  const props = appendOwnerState_default(elementType, _extends({}, mergedProps, {
    ref
  }), ownerState);
  return props;
}
var useSlotProps_default = useSlotProps;

// node_modules/@mui/base/utils/prepareForSlot.js
var React7 = __toESM(require_react());

// node_modules/@mui/base/Badge/Badge.js
var React20 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());

// node_modules/@mui/base/node_modules/@mui/utils/esm/chainPropTypes/chainPropTypes.js
function chainPropTypes2(propType1, propType2) {
  if (false) {
    return () => null;
  }
  return function validate(...args) {
    return propType1(...args) || propType2(...args);
  };
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/deepmerge/deepmerge.js
var React8 = __toESM(require_react());

// node_modules/@mui/base/node_modules/@mui/utils/esm/elementAcceptingRef/elementAcceptingRef.js
var import_prop_types = __toESM(require_prop_types());
function isClassComponent(elementType) {
  const {
    prototype = {}
  } = elementType;
  return Boolean(prototype.isReactComponent);
}
function acceptingRef(props, propName, componentName, location, propFullName) {
  const element = props[propName];
  const safePropName = propFullName || propName;
  if (element == null || // When server-side rendering React doesn't warn either.
  // This is not an accurate check for SSR.
  // This is only in place for Emotion compat.
  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
  typeof window === "undefined") {
    return null;
  }
  let warningHint;
  const elementType = element.type;
  if (typeof elementType === "function" && !isClassComponent(elementType)) {
    warningHint = "Did you accidentally use a plain function component for an element instead?";
  }
  if (warningHint !== void 0) {
    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
  }
  return null;
}
var elementAcceptingRef = chainPropTypes2(import_prop_types.default.element, acceptingRef);
elementAcceptingRef.isRequired = chainPropTypes2(import_prop_types.default.element.isRequired, acceptingRef);
var elementAcceptingRef_default2 = elementAcceptingRef;

// node_modules/@mui/base/node_modules/@mui/utils/esm/elementTypeAcceptingRef/elementTypeAcceptingRef.js
var import_prop_types2 = __toESM(require_prop_types());
function isClassComponent2(elementType) {
  const {
    prototype = {}
  } = elementType;
  return Boolean(prototype.isReactComponent);
}
function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
  const propValue = props[propName];
  const safePropName = propFullName || propName;
  if (propValue == null || // When server-side rendering React doesn't warn either.
  // This is not an accurate check for SSR.
  // This is only in place for emotion compat.
  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
  typeof window === "undefined") {
    return null;
  }
  let warningHint;
  if (typeof propValue === "function" && !isClassComponent2(propValue)) {
    warningHint = "Did you accidentally provide a plain function component instead?";
  }
  if (warningHint !== void 0) {
    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
  }
  return null;
}
var elementTypeAcceptingRef_default = chainPropTypes2(import_prop_types2.default.elementType, elementTypeAcceptingRef);

// node_modules/@mui/base/node_modules/@mui/utils/esm/exactProp/exactProp.js
var specialProperty = "exact-prop: ​";
function exactProp(propTypes) {
  if (false) {
    return propTypes;
  }
  return _extends({}, propTypes, {
    [specialProperty]: (props) => {
      const unsupportedProps = Object.keys(props).filter((prop) => !propTypes.hasOwnProperty(prop));
      if (unsupportedProps.length > 0) {
        return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
      }
      return null;
    }
  });
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/getDisplayName/getDisplayName.js
var import_react_is = __toESM(require_react_is());

// node_modules/@mui/base/node_modules/@mui/utils/esm/HTMLElementType/HTMLElementType.js
function HTMLElementType2(props, propName, componentName, location, propFullName) {
  if (false) {
    return null;
  }
  const propValue = props[propName];
  const safePropName = propFullName || propName;
  if (propValue == null) {
    return null;
  }
  if (propValue && propValue.nodeType !== 1) {
    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
  }
  return null;
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/ponyfillGlobal/ponyfillGlobal.js
var ponyfillGlobal_default = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();

// node_modules/@mui/base/node_modules/@mui/utils/esm/refType/refType.js
var import_prop_types3 = __toESM(require_prop_types());
var refType = import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object]);
var refType_default2 = refType;

// node_modules/@mui/base/node_modules/@mui/utils/esm/createChainedFunction/createChainedFunction.js
function createChainedFunction(...funcs) {
  return funcs.reduce((acc, func) => {
    if (func == null) {
      return acc;
    }
    return function chainedFunction(...args) {
      acc.apply(this, args);
      func.apply(this, args);
    };
  }, () => {
  });
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/debounce/debounce.js
function debounce(func, wait = 166) {
  let timeout;
  function debounced(...args) {
    const later = () => {
      func.apply(this, args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  }
  debounced.clear = () => {
    clearTimeout(timeout);
  };
  return debounced;
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/isMuiElement/isMuiElement.js
var React9 = __toESM(require_react());

// node_modules/@mui/base/node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js
function ownerDocument(node) {
  return node && node.ownerDocument || document;
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/ownerWindow/ownerWindow.js
function ownerWindow(node) {
  const doc = ownerDocument(node);
  return doc.defaultView || window;
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js
var React10 = __toESM(require_react());
var useEnhancedEffect = typeof window !== "undefined" ? React10.useLayoutEffect : React10.useEffect;
var useEnhancedEffect_default = useEnhancedEffect;

// node_modules/@mui/base/node_modules/@mui/utils/esm/useId/useId.js
var React11 = __toESM(require_react());
var globalId = 0;
function useGlobalId(idOverride) {
  const [defaultId, setDefaultId] = React11.useState(idOverride);
  const id = idOverride || defaultId;
  React11.useEffect(() => {
    if (defaultId == null) {
      globalId += 1;
      setDefaultId(`mui-${globalId}`);
    }
  }, [defaultId]);
  return id;
}
var maybeReactUseId = React11["useId".toString()];
function useId2(idOverride) {
  if (maybeReactUseId !== void 0) {
    const reactId = maybeReactUseId();
    return idOverride != null ? idOverride : reactId;
  }
  return useGlobalId(idOverride);
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/useControlled/useControlled.js
var React12 = __toESM(require_react());
function useControlled2({
  controlled,
  default: defaultProp,
  name,
  state = "value"
}) {
  const {
    current: isControlled
  } = React12.useRef(controlled !== void 0);
  const [valueState, setValue] = React12.useState(defaultProp);
  const value = isControlled ? controlled : valueState;
  if (true) {
    React12.useEffect(() => {
      if (isControlled !== (controlled !== void 0)) {
        console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
      }
    }, [state, name, controlled]);
    const {
      current: defaultValue
    } = React12.useRef(defaultProp);
    React12.useEffect(() => {
      if (!isControlled && !Object.is(defaultValue, defaultProp)) {
        console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
      }
    }, [JSON.stringify(defaultProp)]);
  }
  const setValueIfUncontrolled = React12.useCallback((newValue) => {
    if (!isControlled) {
      setValue(newValue);
    }
  }, []);
  return [value, setValueIfUncontrolled];
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js
var React13 = __toESM(require_react());
function useEventCallback(fn) {
  const ref = React13.useRef(fn);
  useEnhancedEffect_default(() => {
    ref.current = fn;
  });
  return React13.useRef((...args) => (
    // @ts-expect-error hide `this`
    (0, ref.current)(...args)
  )).current;
}
var useEventCallback_default2 = useEventCallback;

// node_modules/@mui/base/node_modules/@mui/utils/esm/useLazyRef/useLazyRef.js
var React14 = __toESM(require_react());
var UNINITIALIZED = {};
function useLazyRef(init, initArg) {
  const ref = React14.useRef(UNINITIALIZED);
  if (ref.current === UNINITIALIZED) {
    ref.current = init(initArg);
  }
  return ref;
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/useOnMount/useOnMount.js
var React15 = __toESM(require_react());
var EMPTY = [];
function useOnMount(fn) {
  React15.useEffect(fn, EMPTY);
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/useTimeout/useTimeout.js
var Timeout2 = class _Timeout {
  constructor() {
    this.currentId = null;
    this.clear = () => {
      if (this.currentId !== null) {
        clearTimeout(this.currentId);
        this.currentId = null;
      }
    };
    this.disposeEffect = () => {
      return this.clear;
    };
  }
  static create() {
    return new _Timeout();
  }
  /**
   * Executes `fn` after `delay`, clearing any previously scheduled call.
   */
  start(delay, fn) {
    this.clear();
    this.currentId = setTimeout(() => {
      this.currentId = null;
      fn();
    }, delay);
  }
};
function useTimeout2() {
  const timeout = useLazyRef(Timeout2.create).current;
  useOnMount(timeout.disposeEffect);
  return timeout;
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/useIsFocusVisible/useIsFocusVisible.js
var React16 = __toESM(require_react());
var hadKeyboardEvent = true;
var hadFocusVisibleRecently = false;
var hadFocusVisibleRecentlyTimeout = new Timeout2();
var inputTypesWhitelist = {
  text: true,
  search: true,
  url: true,
  tel: true,
  email: true,
  password: true,
  number: true,
  date: true,
  month: true,
  week: true,
  time: true,
  datetime: true,
  "datetime-local": true
};
function focusTriggersKeyboardModality(node) {
  const {
    type,
    tagName
  } = node;
  if (tagName === "INPUT" && inputTypesWhitelist[type] && !node.readOnly) {
    return true;
  }
  if (tagName === "TEXTAREA" && !node.readOnly) {
    return true;
  }
  if (node.isContentEditable) {
    return true;
  }
  return false;
}
function handleKeyDown(event) {
  if (event.metaKey || event.altKey || event.ctrlKey) {
    return;
  }
  hadKeyboardEvent = true;
}
function handlePointerDown() {
  hadKeyboardEvent = false;
}
function handleVisibilityChange() {
  if (this.visibilityState === "hidden") {
    if (hadFocusVisibleRecently) {
      hadKeyboardEvent = true;
    }
  }
}
function prepare(doc) {
  doc.addEventListener("keydown", handleKeyDown, true);
  doc.addEventListener("mousedown", handlePointerDown, true);
  doc.addEventListener("pointerdown", handlePointerDown, true);
  doc.addEventListener("touchstart", handlePointerDown, true);
  doc.addEventListener("visibilitychange", handleVisibilityChange, true);
}
function isFocusVisible(event) {
  const {
    target
  } = event;
  try {
    return target.matches(":focus-visible");
  } catch (error) {
  }
  return hadKeyboardEvent || focusTriggersKeyboardModality(target);
}
function useIsFocusVisible2() {
  const ref = React16.useCallback((node) => {
    if (node != null) {
      prepare(node.ownerDocument);
    }
  }, []);
  const isFocusVisibleRef = React16.useRef(false);
  function handleBlurVisible() {
    if (isFocusVisibleRef.current) {
      hadFocusVisibleRecently = true;
      hadFocusVisibleRecentlyTimeout.start(100, () => {
        hadFocusVisibleRecently = false;
      });
      isFocusVisibleRef.current = false;
      return true;
    }
    return false;
  }
  function handleFocusVisible(event) {
    if (isFocusVisible(event)) {
      isFocusVisibleRef.current = true;
      return true;
    }
    return false;
  }
  return {
    isFocusVisibleRef,
    onFocus: handleFocusVisible,
    onBlur: handleBlurVisible,
    ref
  };
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/getScrollbarSize/getScrollbarSize.js
function getScrollbarSize(doc) {
  const documentWidth = doc.documentElement.clientWidth;
  return Math.abs(window.innerWidth - documentWidth);
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/usePreviousProps/usePreviousProps.js
var React17 = __toESM(require_react());
var usePreviousProps = (value) => {
  const ref = React17.useRef({});
  React17.useEffect(() => {
    ref.current = value;
  });
  return ref.current;
};
var usePreviousProps_default2 = usePreviousProps;

// node_modules/@mui/base/node_modules/@mui/utils/esm/getValidReactChildren/getValidReactChildren.js
var React18 = __toESM(require_react());

// node_modules/@mui/base/node_modules/@mui/utils/esm/visuallyHidden/visuallyHidden.js
var visuallyHidden = {
  border: 0,
  clip: "rect(0 0 0 0)",
  height: "1px",
  margin: "-1px",
  overflow: "hidden",
  padding: 0,
  position: "absolute",
  whiteSpace: "nowrap",
  width: "1px"
};
var visuallyHidden_default = visuallyHidden;

// node_modules/@mui/base/node_modules/@mui/utils/esm/integerPropType/integerPropType.js
function getTypeByValue(value) {
  const valueType = typeof value;
  switch (valueType) {
    case "number":
      if (Number.isNaN(value)) {
        return "NaN";
      }
      if (!Number.isFinite(value)) {
        return "Infinity";
      }
      if (value !== Math.floor(value)) {
        return "float";
      }
      return "number";
    case "object":
      if (value === null) {
        return "null";
      }
      return value.constructor.name;
    default:
      return valueType;
  }
}
function ponyfillIsInteger(x) {
  return typeof x === "number" && isFinite(x) && Math.floor(x) === x;
}
var isInteger = Number.isInteger || ponyfillIsInteger;
function requiredInteger(props, propName, componentName, location) {
  const propValue = props[propName];
  if (propValue == null || !isInteger(propValue)) {
    const propType = getTypeByValue(propValue);
    return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
  }
  return null;
}
function validator(props, propName, ...other) {
  const propValue = props[propName];
  if (propValue === void 0) {
    return null;
  }
  return requiredInteger(props, propName, ...other);
}
function validatorNoop() {
  return null;
}
validator.isRequired = requiredInteger;
validatorNoop.isRequired = validatorNoop;
var integerPropType_default2 = false ? validatorNoop : validator;

// node_modules/@mui/base/node_modules/@mui/utils/esm/composeClasses/composeClasses.js
function composeClasses2(slots, getUtilityClass, classes = void 0) {
  const output = {};
  Object.keys(slots).forEach(
    // `Object.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
    // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
    (slot) => {
      output[slot] = slots[slot].reduce((acc, key) => {
        if (key) {
          const utilityClass = getUtilityClass(key);
          if (utilityClass !== "") {
            acc.push(utilityClass);
          }
          if (classes && classes[key]) {
            acc.push(classes[key]);
          }
        }
        return acc;
      }, []).join(" ");
    }
  );
  return output;
}

// node_modules/@mui/base/node_modules/@mui/utils/esm/ClassNameGenerator/ClassNameGenerator.js
var defaultGenerator = (componentName) => componentName;
var createClassNameGenerator = () => {
  let generate = defaultGenerator;
  return {
    configure(generator) {
      generate = generator;
    },
    generate(componentName) {
      return generate(componentName);
    },
    reset() {
      generate = defaultGenerator;
    }
  };
};
var ClassNameGenerator = createClassNameGenerator();

// node_modules/@mui/base/node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js
var globalStateClasses = {
  active: "active",
  checked: "checked",
  completed: "completed",
  disabled: "disabled",
  error: "error",
  expanded: "expanded",
  focused: "focused",
  focusVisible: "focusVisible",
  open: "open",
  readOnly: "readOnly",
  required: "required",
  selected: "selected"
};

// node_modules/@mui/base/node_modules/@mui/utils/esm/clamp/clamp.js
function clamp(val, min2 = Number.MIN_SAFE_INTEGER, max2 = Number.MAX_SAFE_INTEGER) {
  return Math.max(min2, Math.min(val, max2));
}
var clamp_default = clamp;

// node_modules/@mui/base/node_modules/@mui/utils/esm/getReactElementRef/getReactElementRef.js
var React19 = __toESM(require_react());
function getReactElementRef2(element) {
  if (parseInt(React19.version, 10) >= 19) {
    var _element$props;
    return (element == null || (_element$props = element.props) == null ? void 0 : _element$props.ref) || null;
  }
  return (element == null ? void 0 : element.ref) || null;
}

// node_modules/@mui/base/useBadge/useBadge.js
function useBadge(parameters) {
  const {
    badgeContent: badgeContentProp,
    invisible: invisibleProp = false,
    max: maxProp = 99,
    showZero = false
  } = parameters;
  const prevProps = usePreviousProps_default2({
    badgeContent: badgeContentProp,
    max: maxProp
  });
  let invisible = invisibleProp;
  if (invisibleProp === false && badgeContentProp === 0 && !showZero) {
    invisible = true;
  }
  const {
    badgeContent,
    max: max2 = maxProp
  } = invisible ? prevProps : parameters;
  const displayValue = badgeContent && Number(badgeContent) > max2 ? `${max2}+` : badgeContent;
  return {
    badgeContent,
    invisible,
    max: max2,
    displayValue
  };
}

// node_modules/@mui/base/generateUtilityClass/index.js
var GLOBAL_CLASS_PREFIX = "base";
function buildStateClass(state) {
  return `${GLOBAL_CLASS_PREFIX}--${state}`;
}
function buildSlotClass(componentName, slot) {
  return `${GLOBAL_CLASS_PREFIX}-${componentName}-${slot}`;
}
function generateUtilityClass4(componentName, slot) {
  const globalStateClass = globalStateClasses[slot];
  return globalStateClass ? buildStateClass(globalStateClass) : buildSlotClass(componentName, slot);
}

// node_modules/@mui/base/generateUtilityClasses/index.js
function generateUtilityClasses4(componentName, slots) {
  const result = {};
  slots.forEach((slot) => {
    result[slot] = generateUtilityClass4(componentName, slot);
  });
  return result;
}

// node_modules/@mui/base/Badge/badgeClasses.js
var COMPONENT_NAME = "Badge";
function getBadgeUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME, slot);
}
var badgeClasses = generateUtilityClasses4(COMPONENT_NAME, ["root", "badge", "invisible"]);

// node_modules/@mui/base/Badge/Badge.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var _excluded2 = ["badgeContent", "children", "invisible", "max", "slotProps", "slots", "showZero"];
var useUtilityClasses = (ownerState) => {
  const {
    invisible
  } = ownerState;
  const slots = {
    root: ["root"],
    badge: ["badge", invisible && "invisible"]
  };
  return composeClasses2(slots, useClassNamesOverride(getBadgeUtilityClass));
};
var Badge = React20.forwardRef(function Badge2(props, forwardedRef) {
  var _slots$root, _slots$badge;
  const {
    children,
    max: maxProp = 99,
    slotProps = {},
    slots = {},
    showZero = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
  const {
    badgeContent,
    max: max2,
    displayValue,
    invisible
  } = useBadge(_extends({}, props, {
    max: maxProp
  }));
  const ownerState = _extends({}, props, {
    badgeContent,
    invisible,
    max: max2,
    showZero
  });
  const classes = useUtilityClasses(ownerState);
  const Root = (_slots$root = slots.root) != null ? _slots$root : "span";
  const rootProps = useSlotProps_default({
    elementType: Root,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      ref: forwardedRef
    },
    ownerState,
    className: classes.root
  });
  const BadgeComponent = (_slots$badge = slots.badge) != null ? _slots$badge : "span";
  const badgeProps = useSlotProps_default({
    elementType: BadgeComponent,
    externalSlotProps: slotProps.badge,
    ownerState,
    className: classes.badge
  });
  return (0, import_jsx_runtime6.jsxs)(Root, _extends({}, rootProps, {
    children: [children, (0, import_jsx_runtime5.jsx)(BadgeComponent, _extends({}, badgeProps, {
      children: displayValue
    }))]
  }));
});
true ? Badge.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content rendered within the badge.
   */
  badgeContent: import_prop_types4.default.node,
  /**
   * The badge will be added relative to this node.
   */
  children: import_prop_types4.default.node,
  /**
   * If `true`, the badge is invisible.
   * @default false
   */
  invisible: import_prop_types4.default.bool,
  /**
   * Max count to show.
   * @default 99
   */
  max: import_prop_types4.default.number,
  /**
   * Controls whether the badge is hidden when `badgeContent` is zero.
   * @default false
   */
  showZero: import_prop_types4.default.bool,
  /**
   * The props used for each slot inside the Badge.
   * @default {}
   */
  slotProps: import_prop_types4.default.shape({
    badge: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object]),
    root: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object])
  }),
  /**
   * The components used for each slot inside the Badge.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types4.default.shape({
    badge: import_prop_types4.default.elementType,
    root: import_prop_types4.default.elementType
  })
} : void 0;

// node_modules/@mui/base/Button/Button.js
var React22 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());

// node_modules/@mui/base/Button/buttonClasses.js
var COMPONENT_NAME2 = "Button";
function getButtonUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME2, slot);
}
var buttonClasses = generateUtilityClasses4(COMPONENT_NAME2, ["root", "active", "disabled", "focusVisible"]);

// node_modules/@mui/base/useButton/useButton.js
var React21 = __toESM(require_react());
function useButton(parameters = {}) {
  const {
    disabled = false,
    focusableWhenDisabled,
    href,
    rootRef: externalRef,
    tabIndex,
    to,
    type,
    rootElementName: rootElementNameProp
  } = parameters;
  const buttonRef = React21.useRef(null);
  const [active, setActive] = React21.useState(false);
  const {
    isFocusVisibleRef,
    onFocus: handleFocusVisible,
    onBlur: handleBlurVisible,
    ref: focusVisibleRef
  } = useIsFocusVisible2();
  const [focusVisible, setFocusVisible] = React21.useState(false);
  if (disabled && !focusableWhenDisabled && focusVisible) {
    setFocusVisible(false);
  }
  React21.useEffect(() => {
    isFocusVisibleRef.current = focusVisible;
  }, [focusVisible, isFocusVisibleRef]);
  const [rootElementName, updateRootElementName] = useRootElementName({
    rootElementName: rootElementNameProp != null ? rootElementNameProp : href || to ? "a" : void 0,
    componentName: "Button"
  });
  const createHandleMouseLeave = (otherHandlers) => (event) => {
    var _otherHandlers$onMous;
    if (focusVisible) {
      event.preventDefault();
    }
    (_otherHandlers$onMous = otherHandlers.onMouseLeave) == null || _otherHandlers$onMous.call(otherHandlers, event);
  };
  const createHandleBlur = (otherHandlers) => (event) => {
    var _otherHandlers$onBlur;
    handleBlurVisible(event);
    if (isFocusVisibleRef.current === false) {
      setFocusVisible(false);
    }
    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
  };
  const createHandleFocus = (otherHandlers) => (event) => {
    var _otherHandlers$onFocu2;
    if (!buttonRef.current) {
      buttonRef.current = event.currentTarget;
    }
    handleFocusVisible(event);
    if (isFocusVisibleRef.current === true) {
      var _otherHandlers$onFocu;
      setFocusVisible(true);
      (_otherHandlers$onFocu = otherHandlers.onFocusVisible) == null || _otherHandlers$onFocu.call(otherHandlers, event);
    }
    (_otherHandlers$onFocu2 = otherHandlers.onFocus) == null || _otherHandlers$onFocu2.call(otherHandlers, event);
  };
  const isNativeButton = () => {
    const button = buttonRef.current;
    return rootElementName === "BUTTON" || rootElementName === "INPUT" && ["button", "submit", "reset"].includes(button == null ? void 0 : button.type) || rootElementName === "A" && (button == null ? void 0 : button.href);
  };
  const createHandleClick = (otherHandlers) => (event) => {
    if (!disabled) {
      var _otherHandlers$onClic;
      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
    }
  };
  const createHandleMouseDown = (otherHandlers) => (event) => {
    var _otherHandlers$onMous2;
    if (!disabled) {
      setActive(true);
      document.addEventListener("mouseup", () => {
        setActive(false);
      }, {
        once: true
      });
    }
    (_otherHandlers$onMous2 = otherHandlers.onMouseDown) == null || _otherHandlers$onMous2.call(otherHandlers, event);
  };
  const createHandleKeyDown = (otherHandlers) => (event) => {
    var _otherHandlers$onKeyD;
    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
    if (event.defaultMuiPrevented) {
      return;
    }
    if (event.target === event.currentTarget && !isNativeButton() && event.key === " ") {
      event.preventDefault();
    }
    if (event.target === event.currentTarget && event.key === " " && !disabled) {
      setActive(true);
    }
    if (event.target === event.currentTarget && !isNativeButton() && event.key === "Enter" && !disabled) {
      var _otherHandlers$onClic2;
      (_otherHandlers$onClic2 = otherHandlers.onClick) == null || _otherHandlers$onClic2.call(otherHandlers, event);
      event.preventDefault();
    }
  };
  const createHandleKeyUp = (otherHandlers) => (event) => {
    var _otherHandlers$onKeyU;
    if (event.target === event.currentTarget) {
      setActive(false);
    }
    (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null || _otherHandlers$onKeyU.call(otherHandlers, event);
    if (event.target === event.currentTarget && !isNativeButton() && !disabled && event.key === " " && !event.defaultMuiPrevented) {
      var _otherHandlers$onClic3;
      (_otherHandlers$onClic3 = otherHandlers.onClick) == null || _otherHandlers$onClic3.call(otherHandlers, event);
    }
  };
  const handleRef = useForkRef2(updateRootElementName, externalRef, focusVisibleRef, buttonRef);
  const buttonProps = {};
  if (tabIndex !== void 0) {
    buttonProps.tabIndex = tabIndex;
  }
  if (rootElementName === "BUTTON") {
    buttonProps.type = type != null ? type : "button";
    if (focusableWhenDisabled) {
      buttonProps["aria-disabled"] = disabled;
    } else {
      buttonProps.disabled = disabled;
    }
  } else if (rootElementName === "INPUT") {
    if (type && ["button", "submit", "reset"].includes(type)) {
      if (focusableWhenDisabled) {
        buttonProps["aria-disabled"] = disabled;
      } else {
        buttonProps.disabled = disabled;
      }
    }
  } else if (rootElementName !== "") {
    if (!href && !to) {
      buttonProps.role = "button";
      buttonProps.tabIndex = tabIndex != null ? tabIndex : 0;
    }
    if (disabled) {
      buttonProps["aria-disabled"] = disabled;
      buttonProps.tabIndex = focusableWhenDisabled ? tabIndex != null ? tabIndex : 0 : -1;
    }
  }
  const getRootProps = (externalProps = {}) => {
    const externalEventHandlers = _extends({}, extractEventHandlers_default(parameters), extractEventHandlers_default(externalProps));
    const props = _extends({
      type
    }, externalEventHandlers, buttonProps, externalProps, {
      onBlur: createHandleBlur(externalEventHandlers),
      onClick: createHandleClick(externalEventHandlers),
      onFocus: createHandleFocus(externalEventHandlers),
      onKeyDown: createHandleKeyDown(externalEventHandlers),
      onKeyUp: createHandleKeyUp(externalEventHandlers),
      onMouseDown: createHandleMouseDown(externalEventHandlers),
      onMouseLeave: createHandleMouseLeave(externalEventHandlers),
      ref: handleRef
    });
    delete props.onFocusVisible;
    return props;
  };
  return {
    getRootProps,
    focusVisible,
    setFocusVisible,
    active,
    rootRef: handleRef
  };
}

// node_modules/@mui/base/Button/Button.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var _excluded3 = ["action", "children", "disabled", "focusableWhenDisabled", "onFocusVisible", "slotProps", "slots", "rootElementName"];
var useUtilityClasses2 = (ownerState) => {
  const {
    active,
    disabled,
    focusVisible
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", active && "active"]
  };
  return composeClasses2(slots, useClassNamesOverride(getButtonUtilityClass));
};
var Button = React22.forwardRef(function Button2(props, forwardedRef) {
  var _slots$root;
  const {
    action,
    children,
    focusableWhenDisabled = false,
    slotProps = {},
    slots = {},
    rootElementName: rootElementNameProp = "button"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
  const buttonRef = React22.useRef(null);
  let rootElementName = rootElementNameProp;
  if (typeof slots.root === "string") {
    rootElementName = slots.root;
  } else if (other.href || other.to) {
    rootElementName = "a";
  }
  const {
    active,
    focusVisible,
    setFocusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    focusableWhenDisabled,
    rootElementName
  }));
  React22.useImperativeHandle(action, () => ({
    focusVisible: () => {
      setFocusVisible(true);
      buttonRef.current.focus();
    }
  }), [setFocusVisible]);
  const ownerState = _extends({}, props, {
    active,
    focusableWhenDisabled,
    focusVisible
  });
  const classes = useUtilityClasses2(ownerState);
  const defaultElement = other.href || other.to ? "a" : "button";
  const Root = (_slots$root = slots.root) != null ? _slots$root : defaultElement;
  const rootProps = useSlotProps_default({
    elementType: Root,
    getSlotProps: getRootProps,
    externalForwardedProps: other,
    externalSlotProps: slotProps.root,
    additionalProps: {
      ref: forwardedRef
    },
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime7.jsx)(Root, _extends({}, rootProps, {
    children
  }));
});
true ? Button.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */
  action: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.shape({
    current: import_prop_types5.default.shape({
      focusVisible: import_prop_types5.default.func.isRequired
    })
  })]),
  /**
   * @ignore
   */
  children: import_prop_types5.default.node,
  /**
   * @ignore
   */
  className: import_prop_types5.default.string,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types5.default.bool,
  /**
   * If `true`, allows a disabled button to receive focus.
   * @default false
   */
  focusableWhenDisabled: import_prop_types5.default.bool,
  /**
   * @ignore
   */
  href: import_prop_types5.default.string,
  /**
   * @ignore
   */
  onFocusVisible: import_prop_types5.default.func,
  /**
   * The HTML element that is ultimately rendered, for example 'button' or 'a'
   * @default 'button'
   */
  rootElementName: import_prop_types5.default.string,
  /**
   * The props used for each slot inside the Button.
   * @default {}
   */
  slotProps: import_prop_types5.default.shape({
    root: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object])
  }),
  /**
   * The components used for each slot inside the Button.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types5.default.shape({
    root: import_prop_types5.default.elementType
  }),
  /**
   * @ignore
   */
  to: import_prop_types5.default.string
} : void 0;

// node_modules/@mui/base/ClickAwayListener/ClickAwayListener.js
var React23 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
function mapEventPropToEvent(eventProp) {
  return eventProp.substring(2).toLowerCase();
}
function clickedRootScrollbar(event, doc) {
  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
}
function ClickAwayListener(props) {
  const {
    children,
    disableReactTree = false,
    mouseEvent = "onClick",
    onClickAway,
    touchEvent = "onTouchEnd"
  } = props;
  const movedRef = React23.useRef(false);
  const nodeRef = React23.useRef(null);
  const activatedRef = React23.useRef(false);
  const syntheticEventRef = React23.useRef(false);
  React23.useEffect(() => {
    setTimeout(() => {
      activatedRef.current = true;
    }, 0);
    return () => {
      activatedRef.current = false;
    };
  }, []);
  const handleRef = useForkRef2(getReactElementRef2(children), nodeRef);
  const handleClickAway = useEventCallback_default2((event) => {
    const insideReactTree = syntheticEventRef.current;
    syntheticEventRef.current = false;
    const doc = ownerDocument(nodeRef.current);
    if (!activatedRef.current || !nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
      return;
    }
    if (movedRef.current) {
      movedRef.current = false;
      return;
    }
    let insideDOM;
    if (event.composedPath) {
      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
    } else {
      insideDOM = !doc.documentElement.contains(
        // @ts-expect-error returns `false` as intended when not dispatched from a Node
        event.target
      ) || nodeRef.current.contains(
        // @ts-expect-error returns `false` as intended when not dispatched from a Node
        event.target
      );
    }
    if (!insideDOM && (disableReactTree || !insideReactTree)) {
      onClickAway(event);
    }
  });
  const createHandleSynthetic = (handlerName) => (event) => {
    syntheticEventRef.current = true;
    const childrenPropsHandler = children.props[handlerName];
    if (childrenPropsHandler) {
      childrenPropsHandler(event);
    }
  };
  const childrenProps = {
    ref: handleRef
  };
  if (touchEvent !== false) {
    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
  }
  React23.useEffect(() => {
    if (touchEvent !== false) {
      const mappedTouchEvent = mapEventPropToEvent(touchEvent);
      const doc = ownerDocument(nodeRef.current);
      const handleTouchMove = () => {
        movedRef.current = true;
      };
      doc.addEventListener(mappedTouchEvent, handleClickAway);
      doc.addEventListener("touchmove", handleTouchMove);
      return () => {
        doc.removeEventListener(mappedTouchEvent, handleClickAway);
        doc.removeEventListener("touchmove", handleTouchMove);
      };
    }
    return void 0;
  }, [handleClickAway, touchEvent]);
  if (mouseEvent !== false) {
    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
  }
  React23.useEffect(() => {
    if (mouseEvent !== false) {
      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
      const doc = ownerDocument(nodeRef.current);
      doc.addEventListener(mappedMouseEvent, handleClickAway);
      return () => {
        doc.removeEventListener(mappedMouseEvent, handleClickAway);
      };
    }
    return void 0;
  }, [handleClickAway, mouseEvent]);
  return (0, import_jsx_runtime8.jsx)(React23.Fragment, {
    children: React23.cloneElement(children, childrenProps)
  });
}
true ? ClickAwayListener.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The wrapped element.
   */
  children: elementAcceptingRef_default2.isRequired,
  /**
   * If `true`, the React tree is ignored and only the DOM tree is considered.
   * This prop changes how portaled elements are handled.
   * @default false
   */
  disableReactTree: import_prop_types6.default.bool,
  /**
   * The mouse event to listen to. You can disable the listener by providing `false`.
   * @default 'onClick'
   */
  mouseEvent: import_prop_types6.default.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", false]),
  /**
   * Callback fired when a "click away" event is detected.
   */
  onClickAway: import_prop_types6.default.func.isRequired,
  /**
   * The touch event to listen to. You can disable the listener by providing `false`.
   * @default 'onTouchEnd'
   */
  touchEvent: import_prop_types6.default.oneOf(["onTouchEnd", "onTouchStart", false])
} : void 0;
if (true) {
  ClickAwayListener["propTypes"] = exactProp(ClickAwayListener.propTypes);
}

// node_modules/@mui/base/Dropdown/Dropdown.js
var React27 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());

// node_modules/@mui/base/useDropdown/DropdownContext.js
var React24 = __toESM(require_react());
var DropdownContext = React24.createContext(null);
if (true) {
  DropdownContext.displayName = "DropdownContext";
}

// node_modules/@mui/base/useDropdown/useDropdown.js
var React26 = __toESM(require_react());

// node_modules/@mui/base/utils/useControllableReducer.js
var React25 = __toESM(require_react());
function areEqual(a, b) {
  return a === b;
}
var EMPTY_OBJECT = {};
var NOOP = () => {
};
function getControlledState(internalState, controlledProps) {
  const augmentedState = _extends({}, internalState);
  Object.keys(controlledProps).forEach((key) => {
    if (controlledProps[key] !== void 0) {
      augmentedState[key] = controlledProps[key];
    }
  });
  return augmentedState;
}
function useStateChangeDetection(parameters) {
  const {
    nextState,
    initialState,
    stateComparers,
    onStateChange,
    controlledProps,
    lastActionRef
  } = parameters;
  const internalPreviousStateRef = React25.useRef(initialState);
  React25.useEffect(() => {
    if (lastActionRef.current === null) {
      return;
    }
    const previousState = getControlledState(internalPreviousStateRef.current, controlledProps);
    Object.keys(nextState).forEach((key) => {
      var _stateComparers$key;
      const stateComparer = (_stateComparers$key = stateComparers[key]) != null ? _stateComparers$key : areEqual;
      const nextStateItem = nextState[key];
      const previousStateItem = previousState[key];
      if (previousStateItem == null && nextStateItem != null || previousStateItem != null && nextStateItem == null || previousStateItem != null && nextStateItem != null && !stateComparer(nextStateItem, previousStateItem)) {
        var _event, _type;
        onStateChange == null || onStateChange((_event = lastActionRef.current.event) != null ? _event : null, key, nextStateItem, (_type = lastActionRef.current.type) != null ? _type : "", nextState);
      }
    });
    internalPreviousStateRef.current = nextState;
    lastActionRef.current = null;
  }, [internalPreviousStateRef, nextState, lastActionRef, onStateChange, stateComparers, controlledProps]);
}
function useControllableReducer(parameters) {
  const lastActionRef = React25.useRef(null);
  const {
    reducer,
    initialState,
    controlledProps = EMPTY_OBJECT,
    stateComparers = EMPTY_OBJECT,
    onStateChange = NOOP,
    actionContext,
    componentName = ""
  } = parameters;
  const controlledPropsRef = React25.useRef(controlledProps);
  if (true) {
    React25.useEffect(() => {
      Object.keys(controlledProps).forEach((key) => {
        if (controlledPropsRef.current[key] !== void 0 && controlledProps[key] === void 0) {
          console.error(`useControllableReducer: ${componentName ? `The ${componentName} component` : "A component"} is changing a controlled prop to be uncontrolled: ${key}`);
        }
        if (controlledPropsRef.current[key] === void 0 && controlledProps[key] !== void 0) {
          console.error(`useControllableReducer: ${componentName ? `The ${componentName} component` : "A component"} is changing an uncontrolled prop to be controlled: ${key}`);
        }
      });
    }, [controlledProps, componentName]);
  }
  const reducerWithControlledState = React25.useCallback((state, action) => {
    lastActionRef.current = action;
    const controlledState = getControlledState(state, controlledProps);
    const newState = reducer(controlledState, action);
    return newState;
  }, [controlledProps, reducer]);
  const [nextState, dispatch] = React25.useReducer(reducerWithControlledState, initialState);
  const dispatchWithContext = React25.useCallback((action) => {
    dispatch(_extends({}, action, {
      context: actionContext
    }));
  }, [actionContext]);
  useStateChangeDetection({
    nextState,
    initialState,
    stateComparers: stateComparers != null ? stateComparers : EMPTY_OBJECT,
    onStateChange: onStateChange != null ? onStateChange : NOOP,
    controlledProps,
    lastActionRef
  });
  return [getControlledState(nextState, controlledProps), dispatchWithContext];
}

// node_modules/@mui/base/useDropdown/useDropdown.types.js
var DropdownActionTypes = {
  blur: "dropdown:blur",
  escapeKeyDown: "dropdown:escapeKeyDown",
  toggle: "dropdown:toggle",
  open: "dropdown:open",
  close: "dropdown:close"
};

// node_modules/@mui/base/useDropdown/dropdownReducer.js
function dropdownReducer(state, action) {
  switch (action.type) {
    case DropdownActionTypes.blur:
      return {
        open: false,
        changeReason: action.event
      };
    case DropdownActionTypes.escapeKeyDown:
      return {
        open: false,
        changeReason: action.event
      };
    case DropdownActionTypes.toggle:
      return {
        open: !state.open,
        changeReason: action.event
      };
    case DropdownActionTypes.open:
      return {
        open: true,
        changeReason: action.event
      };
    case DropdownActionTypes.close:
      return {
        open: false,
        changeReason: action.event
      };
    default:
      throw new Error(`Unhandled action`);
  }
}

// node_modules/@mui/base/useDropdown/useDropdown.js
function useDropdown(parameters = {}) {
  const {
    defaultOpen,
    onOpenChange,
    open: openProp,
    componentName = "useDropdown"
  } = parameters;
  const [popupId, setPopupId] = React26.useState("");
  const [triggerElement, setTriggerElement] = React26.useState(null);
  const lastActionType = React26.useRef(null);
  const handleStateChange = React26.useCallback((event, field, value, reason) => {
    if (field === "open") {
      onOpenChange == null || onOpenChange(event, value);
    }
    lastActionType.current = reason;
  }, [onOpenChange]);
  const controlledProps = React26.useMemo(() => openProp !== void 0 ? {
    open: openProp
  } : {}, [openProp]);
  const [state, dispatch] = useControllableReducer({
    controlledProps,
    initialState: defaultOpen ? {
      open: true,
      changeReason: null
    } : {
      open: false,
      changeReason: null
    },
    onStateChange: handleStateChange,
    reducer: dropdownReducer,
    componentName
  });
  React26.useEffect(() => {
    if (!state.open && lastActionType.current !== null && lastActionType.current !== DropdownActionTypes.blur) {
      triggerElement == null || triggerElement.focus();
    }
  }, [state.open, triggerElement]);
  const contextValue = {
    state,
    dispatch,
    popupId,
    registerPopup: setPopupId,
    registerTrigger: setTriggerElement,
    triggerElement
  };
  return {
    contextValue,
    open: state.open
  };
}

// node_modules/@mui/base/Dropdown/Dropdown.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
function Dropdown(props) {
  const {
    children,
    open,
    defaultOpen,
    onOpenChange
  } = props;
  const {
    contextValue
  } = useDropdown({
    defaultOpen,
    onOpenChange,
    open
  });
  return (0, import_jsx_runtime9.jsx)(DropdownContext.Provider, {
    value: contextValue,
    children
  });
}
true ? Dropdown.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types7.default.node,
  /**
   * If `true`, the dropdown is initially open.
   */
  defaultOpen: import_prop_types7.default.bool,
  /**
   * Callback fired when the component requests to be opened or closed.
   */
  onOpenChange: import_prop_types7.default.func,
  /**
   * Allows to control whether the dropdown is open.
   * This is a controlled counterpart of `defaultOpen`.
   */
  open: import_prop_types7.default.bool
} : void 0;
if (true) {
  Dropdown["propTypes"] = exactProp(Dropdown.propTypes);
}

// node_modules/@mui/base/FocusTrap/FocusTrap.js
var React28 = __toESM(require_react());
var import_prop_types8 = __toESM(require_prop_types());
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
function getTabIndex(node) {
  const tabindexAttr = parseInt(node.getAttribute("tabindex") || "", 10);
  if (!Number.isNaN(tabindexAttr)) {
    return tabindexAttr;
  }
  if (node.contentEditable === "true" || (node.nodeName === "AUDIO" || node.nodeName === "VIDEO" || node.nodeName === "DETAILS") && node.getAttribute("tabindex") === null) {
    return 0;
  }
  return node.tabIndex;
}
function isNonTabbableRadio(node) {
  if (node.tagName !== "INPUT" || node.type !== "radio") {
    return false;
  }
  if (!node.name) {
    return false;
  }
  const getRadio = (selector) => node.ownerDocument.querySelector(`input[type="radio"]${selector}`);
  let roving = getRadio(`[name="${node.name}"]:checked`);
  if (!roving) {
    roving = getRadio(`[name="${node.name}"]`);
  }
  return roving !== node;
}
function isNodeMatchingSelectorFocusable(node) {
  if (node.disabled || node.tagName === "INPUT" && node.type === "hidden" || isNonTabbableRadio(node)) {
    return false;
  }
  return true;
}
function defaultGetTabbable(root) {
  const regularTabNodes = [];
  const orderedTabNodes = [];
  Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {
    const nodeTabIndex = getTabIndex(node);
    if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {
      return;
    }
    if (nodeTabIndex === 0) {
      regularTabNodes.push(node);
    } else {
      orderedTabNodes.push({
        documentOrder: i,
        tabIndex: nodeTabIndex,
        node
      });
    }
  });
  return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map((a) => a.node).concat(regularTabNodes);
}
function defaultIsEnabled() {
  return true;
}
function FocusTrap(props) {
  const {
    children,
    disableAutoFocus = false,
    disableEnforceFocus = false,
    disableRestoreFocus = false,
    getTabbable = defaultGetTabbable,
    isEnabled = defaultIsEnabled,
    open
  } = props;
  const ignoreNextEnforceFocus = React28.useRef(false);
  const sentinelStart = React28.useRef(null);
  const sentinelEnd = React28.useRef(null);
  const nodeToRestore = React28.useRef(null);
  const reactFocusEventTarget = React28.useRef(null);
  const activated = React28.useRef(false);
  const rootRef = React28.useRef(null);
  const handleRef = useForkRef2(getReactElementRef2(children), rootRef);
  const lastKeydown = React28.useRef(null);
  React28.useEffect(() => {
    if (!open || !rootRef.current) {
      return;
    }
    activated.current = !disableAutoFocus;
  }, [disableAutoFocus, open]);
  React28.useEffect(() => {
    if (!open || !rootRef.current) {
      return;
    }
    const doc = ownerDocument(rootRef.current);
    if (!rootRef.current.contains(doc.activeElement)) {
      if (!rootRef.current.hasAttribute("tabIndex")) {
        if (true) {
          console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
        }
        rootRef.current.setAttribute("tabIndex", "-1");
      }
      if (activated.current) {
        rootRef.current.focus();
      }
    }
    return () => {
      if (!disableRestoreFocus) {
        if (nodeToRestore.current && nodeToRestore.current.focus) {
          ignoreNextEnforceFocus.current = true;
          nodeToRestore.current.focus();
        }
        nodeToRestore.current = null;
      }
    };
  }, [open]);
  React28.useEffect(() => {
    if (!open || !rootRef.current) {
      return;
    }
    const doc = ownerDocument(rootRef.current);
    const loopFocus = (nativeEvent) => {
      lastKeydown.current = nativeEvent;
      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== "Tab") {
        return;
      }
      if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
        ignoreNextEnforceFocus.current = true;
        if (sentinelEnd.current) {
          sentinelEnd.current.focus();
        }
      }
    };
    const contain = () => {
      const rootElement = rootRef.current;
      if (rootElement === null) {
        return;
      }
      if (!doc.hasFocus() || !isEnabled() || ignoreNextEnforceFocus.current) {
        ignoreNextEnforceFocus.current = false;
        return;
      }
      if (rootElement.contains(doc.activeElement)) {
        return;
      }
      if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {
        return;
      }
      if (doc.activeElement !== reactFocusEventTarget.current) {
        reactFocusEventTarget.current = null;
      } else if (reactFocusEventTarget.current !== null) {
        return;
      }
      if (!activated.current) {
        return;
      }
      let tabbable = [];
      if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
        tabbable = getTabbable(rootRef.current);
      }
      if (tabbable.length > 0) {
        var _lastKeydown$current, _lastKeydown$current2;
        const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
        const focusNext = tabbable[0];
        const focusPrevious = tabbable[tabbable.length - 1];
        if (typeof focusNext !== "string" && typeof focusPrevious !== "string") {
          if (isShiftTab) {
            focusPrevious.focus();
          } else {
            focusNext.focus();
          }
        }
      } else {
        rootElement.focus();
      }
    };
    doc.addEventListener("focusin", contain);
    doc.addEventListener("keydown", loopFocus, true);
    const interval = setInterval(() => {
      if (doc.activeElement && doc.activeElement.tagName === "BODY") {
        contain();
      }
    }, 50);
    return () => {
      clearInterval(interval);
      doc.removeEventListener("focusin", contain);
      doc.removeEventListener("keydown", loopFocus, true);
    };
  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
  const onFocus = (event) => {
    if (nodeToRestore.current === null) {
      nodeToRestore.current = event.relatedTarget;
    }
    activated.current = true;
    reactFocusEventTarget.current = event.target;
    const childrenPropsHandler = children.props.onFocus;
    if (childrenPropsHandler) {
      childrenPropsHandler(event);
    }
  };
  const handleFocusSentinel = (event) => {
    if (nodeToRestore.current === null) {
      nodeToRestore.current = event.relatedTarget;
    }
    activated.current = true;
  };
  return (0, import_jsx_runtime11.jsxs)(React28.Fragment, {
    children: [(0, import_jsx_runtime10.jsx)("div", {
      tabIndex: open ? 0 : -1,
      onFocus: handleFocusSentinel,
      ref: sentinelStart,
      "data-testid": "sentinelStart"
    }), React28.cloneElement(children, {
      ref: handleRef,
      onFocus
    }), (0, import_jsx_runtime10.jsx)("div", {
      tabIndex: open ? 0 : -1,
      onFocus: handleFocusSentinel,
      ref: sentinelEnd,
      "data-testid": "sentinelEnd"
    })]
  });
}
true ? FocusTrap.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A single child content element.
   */
  children: elementAcceptingRef_default2,
  /**
   * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the focus trap less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableAutoFocus: import_prop_types8.default.bool,
  /**
   * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
   *
   * Generally this should never be set to `true` as it makes the focus trap less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableEnforceFocus: import_prop_types8.default.bool,
  /**
   * If `true`, the focus trap will not restore focus to previously focused element once
   * focus trap is hidden or unmounted.
   * @default false
   */
  disableRestoreFocus: import_prop_types8.default.bool,
  /**
   * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
   * For instance, you can provide the "tabbable" npm dependency.
   * @param {HTMLElement} root
   */
  getTabbable: import_prop_types8.default.func,
  /**
   * This prop extends the `open` prop.
   * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
   * This prop should be memoized.
   * It can be used to support multiple focus trap mounted at the same time.
   * @default function defaultIsEnabled(): boolean {
   *   return true;
   * }
   */
  isEnabled: import_prop_types8.default.func,
  /**
   * If `true`, focus is locked.
   */
  open: import_prop_types8.default.bool.isRequired
} : void 0;
if (true) {
  FocusTrap["propTypes"] = exactProp(FocusTrap.propTypes);
}

// node_modules/@mui/base/FormControl/FormControl.js
var React30 = __toESM(require_react());
var import_prop_types9 = __toESM(require_prop_types());

// node_modules/@mui/base/FormControl/FormControlContext.js
var React29 = __toESM(require_react());
var FormControlContext = React29.createContext(void 0);
if (true) {
  FormControlContext.displayName = "FormControlContext";
}

// node_modules/@mui/base/FormControl/formControlClasses.js
var COMPONENT_NAME3 = "FormControl";
function getFormControlUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME3, slot);
}
var formControlClasses = generateUtilityClasses4(COMPONENT_NAME3, ["root", "disabled", "error", "filled", "focused", "required"]);

// node_modules/@mui/base/FormControl/FormControl.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var _excluded4 = ["defaultValue", "children", "disabled", "error", "onChange", "required", "slotProps", "slots", "value"];
function hasValue(value) {
  return value != null && !(Array.isArray(value) && value.length === 0) && value !== "";
}
function useUtilityClasses3(ownerState) {
  const {
    disabled,
    error,
    filled,
    focused,
    required
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focused && "focused", error && "error", filled && "filled", required && "required"]
  };
  return composeClasses2(slots, useClassNamesOverride(getFormControlUtilityClass));
}
var FormControl = React30.forwardRef(function FormControl2(props, forwardedRef) {
  var _slots$root;
  const {
    defaultValue,
    children,
    disabled = false,
    error = false,
    onChange,
    required = false,
    slotProps = {},
    slots = {},
    value: incomingValue
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);
  const [value, setValue] = useControlled2({
    controlled: incomingValue,
    default: defaultValue,
    name: "FormControl",
    state: "value"
  });
  const filled = hasValue(value);
  const [focusedState, setFocused] = React30.useState(false);
  const focused = focusedState && !disabled;
  React30.useEffect(() => setFocused((isFocused) => disabled ? false : isFocused), [disabled]);
  const ownerState = _extends({}, props, {
    disabled,
    error,
    filled,
    focused,
    required
  });
  const childContext = React30.useMemo(() => {
    return {
      disabled,
      error,
      filled,
      focused,
      onBlur: () => {
        setFocused(false);
      },
      onChange: (event) => {
        setValue(event.target.value);
        onChange == null || onChange(event);
      },
      onFocus: () => {
        setFocused(true);
      },
      required,
      value: value != null ? value : ""
    };
  }, [disabled, error, filled, focused, onChange, required, setValue, value]);
  const classes = useUtilityClasses3(ownerState);
  const renderChildren = () => {
    if (typeof children === "function") {
      return children(childContext);
    }
    return children;
  };
  const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
  const rootProps = useSlotProps_default({
    elementType: Root,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      ref: forwardedRef,
      children: renderChildren()
    },
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime12.jsx)(FormControlContext.Provider, {
    value: childContext,
    children: (0, import_jsx_runtime12.jsx)(Root, _extends({}, rootProps))
  });
});
true ? FormControl.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types9.default.oneOfType([import_prop_types9.default.node, import_prop_types9.default.func]),
  /**
   * Class name applied to the root element.
   */
  className: import_prop_types9.default.string,
  /**
   * @ignore
   */
  defaultValue: import_prop_types9.default.any,
  /**
   * If `true`, the label, input and helper text should be displayed in a disabled state.
   * @default false
   */
  disabled: import_prop_types9.default.bool,
  /**
   * If `true`, the label is displayed in an error state.
   * @default false
   */
  error: import_prop_types9.default.bool,
  /**
   * Callback fired when the form element's value is modified.
   */
  onChange: import_prop_types9.default.func,
  /**
   * If `true`, the label will indicate that the `input` is required.
   * @default false
   */
  required: import_prop_types9.default.bool,
  /**
   * The props used for each slot inside the FormControl.
   * @default {}
   */
  slotProps: import_prop_types9.default.shape({
    root: import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object])
  }),
  /**
   * The components used for each slot inside the FormControl.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types9.default.shape({
    root: import_prop_types9.default.elementType
  }),
  /**
   * The value of the form element.
   */
  value: import_prop_types9.default.any
} : void 0;

// node_modules/@mui/base/FormControl/useFormControlContext.js
var React31 = __toESM(require_react());
function useFormControlContext() {
  return React31.useContext(FormControlContext);
}

// node_modules/@mui/base/Input/Input.js
var React33 = __toESM(require_react());
var import_prop_types10 = __toESM(require_prop_types());

// node_modules/@mui/base/Input/inputClasses.js
var COMPONENT_NAME4 = "Input";
function getInputUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME4, slot);
}
var inputClasses = generateUtilityClasses4(COMPONENT_NAME4, ["root", "formControl", "focused", "disabled", "error", "multiline", "input", "inputMultiline", "inputTypeSearch", "adornedStart", "adornedEnd"]);

// node_modules/@mui/base/useInput/useInput.js
var React32 = __toESM(require_react());
function useInput(parameters = {}) {
  const {
    defaultValue: defaultValueProp,
    disabled: disabledProp = false,
    error: errorProp = false,
    onBlur,
    onChange,
    onFocus,
    required: requiredProp = false,
    value: valueProp,
    inputRef: inputRefProp
  } = parameters;
  const formControlContext = useFormControlContext();
  let defaultValue;
  let disabled;
  let error;
  let required;
  let value;
  if (formControlContext) {
    var _formControlContext$d, _formControlContext$e, _formControlContext$r;
    defaultValue = void 0;
    disabled = (_formControlContext$d = formControlContext.disabled) != null ? _formControlContext$d : false;
    error = (_formControlContext$e = formControlContext.error) != null ? _formControlContext$e : false;
    required = (_formControlContext$r = formControlContext.required) != null ? _formControlContext$r : false;
    value = formControlContext.value;
    if (true) {
      const definedLocalProps = ["defaultValue", "disabled", "error", "required", "value"].filter((prop) => parameters[prop] !== void 0);
      if (definedLocalProps.length > 0) {
        console.warn(["MUI: You have set props on an input that is inside a FormControl.", "Set these props on a FormControl instead. Otherwise they will be ignored.", `Ignored props: ${definedLocalProps.join(", ")}`].join("\n"));
      }
    }
  } else {
    defaultValue = defaultValueProp;
    disabled = disabledProp;
    error = errorProp;
    required = requiredProp;
    value = valueProp;
  }
  const {
    current: isControlled
  } = React32.useRef(value != null);
  const handleInputRefWarning = React32.useCallback((instance) => {
    if (true) {
      if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
        console.error(["MUI: You have provided a `slots.input` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
      }
    }
  }, []);
  const inputRef = React32.useRef(null);
  const handleInputRef = useForkRef2(inputRef, inputRefProp, handleInputRefWarning);
  const [focused, setFocused] = React32.useState(false);
  React32.useEffect(() => {
    if (!formControlContext && disabled && focused) {
      setFocused(false);
      onBlur == null || onBlur();
    }
  }, [formControlContext, disabled, focused, onBlur]);
  const handleFocus = (otherHandlers) => (event) => {
    var _otherHandlers$onFocu;
    if (formControlContext != null && formControlContext.disabled) {
      event.stopPropagation();
      return;
    }
    (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);
    if (formControlContext && formControlContext.onFocus) {
      var _formControlContext$o;
      formControlContext == null || (_formControlContext$o = formControlContext.onFocus) == null || _formControlContext$o.call(formControlContext);
    } else {
      setFocused(true);
    }
  };
  const handleBlur2 = (otherHandlers) => (event) => {
    var _otherHandlers$onBlur;
    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
    if (formControlContext && formControlContext.onBlur) {
      formControlContext.onBlur();
    } else {
      setFocused(false);
    }
  };
  const handleChange = (otherHandlers) => (event, ...args) => {
    var _formControlContext$o2, _otherHandlers$onChan;
    if (!isControlled) {
      const element = event.target || inputRef.current;
      if (element == null) {
        throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \`slots.input\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : formatMuiErrorMessage(17));
      }
    }
    formControlContext == null || (_formControlContext$o2 = formControlContext.onChange) == null || _formControlContext$o2.call(formControlContext, event);
    (_otherHandlers$onChan = otherHandlers.onChange) == null || _otherHandlers$onChan.call(otherHandlers, event, ...args);
  };
  const handleClick = (otherHandlers) => (event) => {
    var _otherHandlers$onClic;
    if (inputRef.current && event.currentTarget === event.target) {
      inputRef.current.focus();
    }
    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
  };
  const getRootProps = (externalProps = {}) => {
    const propsEventHandlers = extractEventHandlers_default(parameters, ["onBlur", "onChange", "onFocus"]);
    const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers_default(externalProps));
    return _extends({}, externalProps, externalEventHandlers, {
      onClick: handleClick(externalEventHandlers)
    });
  };
  const getInputProps = (externalProps = {}) => {
    const propsEventHandlers = {
      onBlur,
      onChange,
      onFocus
    };
    const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers_default(externalProps));
    const mergedEventHandlers = _extends({}, externalEventHandlers, {
      onBlur: handleBlur2(externalEventHandlers),
      onChange: handleChange(externalEventHandlers),
      onFocus: handleFocus(externalEventHandlers)
    });
    return _extends({}, mergedEventHandlers, {
      "aria-invalid": error || void 0,
      defaultValue,
      value,
      required,
      disabled
    }, externalProps, {
      ref: handleInputRef
    }, mergedEventHandlers);
  };
  return {
    disabled,
    error,
    focused,
    formControlContext,
    getInputProps,
    getRootProps,
    inputRef: handleInputRef,
    required,
    value
  };
}

// node_modules/@mui/base/Input/Input.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
var _excluded5 = ["aria-describedby", "aria-label", "aria-labelledby", "autoComplete", "autoFocus", "className", "defaultValue", "disabled", "endAdornment", "error", "id", "multiline", "name", "onClick", "onChange", "onKeyDown", "onKeyUp", "onFocus", "onBlur", "placeholder", "readOnly", "required", "startAdornment", "value", "type", "rows", "slotProps", "slots", "minRows", "maxRows"];
var useUtilityClasses4 = (ownerState) => {
  const {
    disabled,
    error,
    focused,
    formControlContext,
    multiline,
    startAdornment,
    endAdornment
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", error && "error", focused && "focused", Boolean(formControlContext) && "formControl", multiline && "multiline", Boolean(startAdornment) && "adornedStart", Boolean(endAdornment) && "adornedEnd"],
    input: ["input", disabled && "disabled", multiline && "multiline"]
  };
  return composeClasses2(slots, useClassNamesOverride(getInputUtilityClass));
};
var Input = React33.forwardRef(function Input2(props, forwardedRef) {
  var _slots$root, _slots$textarea, _slots$input;
  const {
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    autoComplete,
    autoFocus,
    className,
    defaultValue,
    disabled,
    endAdornment,
    error,
    id,
    multiline = false,
    name,
    onClick,
    onChange,
    onKeyDown,
    onKeyUp,
    onFocus,
    onBlur,
    placeholder,
    readOnly,
    required,
    startAdornment,
    value,
    type: typeProp,
    rows,
    slotProps = {},
    slots = {},
    minRows,
    maxRows
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded5);
  const {
    getRootProps,
    getInputProps,
    focused,
    formControlContext,
    error: errorState,
    disabled: disabledState
  } = useInput({
    disabled,
    defaultValue,
    error,
    onBlur,
    onClick,
    onChange,
    onFocus,
    required,
    value
  });
  const type = !multiline ? typeProp != null ? typeProp : "text" : void 0;
  const ownerState = _extends({}, props, {
    disabled: disabledState,
    error: errorState,
    focused,
    formControlContext,
    multiline,
    type
  });
  const classes = useUtilityClasses4(ownerState);
  const propsToForward = {
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    autoComplete,
    autoFocus,
    id,
    onKeyDown,
    onKeyUp,
    name,
    placeholder,
    readOnly,
    type
  };
  const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
  const rootProps = useSlotProps_default({
    elementType: Root,
    getSlotProps: getRootProps,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      ref: forwardedRef
    },
    ownerState,
    className: [classes.root, className]
  });
  const InputComponent = multiline ? (_slots$textarea = slots.textarea) != null ? _slots$textarea : "textarea" : (_slots$input = slots.input) != null ? _slots$input : "input";
  const inputProps = useSlotProps_default({
    elementType: InputComponent,
    getSlotProps: (otherHandlers) => {
      return getInputProps(_extends({}, propsToForward, otherHandlers));
    },
    externalSlotProps: slotProps.input,
    additionalProps: _extends({
      rows: multiline ? rows : void 0
    }, multiline && !isHostComponent_default(InputComponent) && {
      minRows: rows || minRows,
      maxRows: rows || maxRows
    }),
    ownerState,
    className: classes.input
  });
  if (true) {
    if (multiline) {
      if (rows) {
        if (minRows || maxRows) {
          console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
        }
      }
    }
  }
  return (0, import_jsx_runtime14.jsxs)(Root, _extends({}, rootProps, {
    children: [startAdornment, (0, import_jsx_runtime13.jsx)(InputComponent, _extends({}, inputProps)), endAdornment]
  }));
});
true ? Input.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  "aria-describedby": import_prop_types10.default.string,
  /**
   * @ignore
   */
  "aria-label": import_prop_types10.default.string,
  /**
   * @ignore
   */
  "aria-labelledby": import_prop_types10.default.string,
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: import_prop_types10.default.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: import_prop_types10.default.bool,
  /**
   * Class name applied to the root element.
   */
  className: import_prop_types10.default.string,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: import_prop_types10.default.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: import_prop_types10.default.bool,
  /**
   * Trailing adornment for this input.
   */
  endAdornment: import_prop_types10.default.node,
  /**
   * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `baseui--error` class on the root element.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: import_prop_types10.default.bool,
  /**
   * The id of the `input` element.
   */
  id: import_prop_types10.default.string,
  /**
   * @ignore
   */
  inputRef: import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.shape({
    current: import_prop_types10.default.object
  })]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: import_prop_types10.default.number,
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: import_prop_types10.default.number,
  /**
   * If `true`, a `textarea` element is rendered.
   * @default false
   */
  multiline: import_prop_types10.default.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: import_prop_types10.default.string,
  /**
   * @ignore
   */
  onBlur: import_prop_types10.default.func,
  /**
   * @ignore
   */
  onChange: import_prop_types10.default.func,
  /**
   * @ignore
   */
  onClick: import_prop_types10.default.func,
  /**
   * @ignore
   */
  onFocus: import_prop_types10.default.func,
  /**
   * @ignore
   */
  onKeyDown: import_prop_types10.default.func,
  /**
   * @ignore
   */
  onKeyUp: import_prop_types10.default.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: import_prop_types10.default.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: import_prop_types10.default.bool,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: import_prop_types10.default.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: import_prop_types10.default.number,
  /**
   * The props used for each slot inside the Input.
   * @default {}
   */
  slotProps: import_prop_types10.default.shape({
    input: import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object]),
    root: import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object])
  }),
  /**
   * The components used for each slot inside the InputBase.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types10.default.shape({
    input: import_prop_types10.default.elementType,
    root: import_prop_types10.default.elementType,
    textarea: import_prop_types10.default.elementType
  }),
  /**
   * Leading adornment for this input.
   */
  startAdornment: import_prop_types10.default.node,
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */
  type: import_prop_types10.default.oneOf(["button", "checkbox", "color", "date", "datetime-local", "email", "file", "hidden", "image", "month", "number", "password", "radio", "range", "reset", "search", "submit", "tel", "text", "time", "url", "week"]),
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: import_prop_types10.default.any
} : void 0;

// node_modules/@mui/base/Menu/Menu.js
var React49 = __toESM(require_react());
var import_prop_types13 = __toESM(require_prop_types());

// node_modules/@mui/base/Menu/menuClasses.js
var COMPONENT_NAME5 = "Menu";
function getMenuUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME5, slot);
}
var menuClasses = generateUtilityClasses4(COMPONENT_NAME5, ["root", "listbox", "expanded"]);

// node_modules/@mui/base/useMenu/useMenu.js
var React40 = __toESM(require_react());

// node_modules/@mui/base/useList/useList.js
var React35 = __toESM(require_react());

// node_modules/@mui/base/useList/listActions.types.js
var ListActionTypes = {
  blur: "list:blur",
  focus: "list:focus",
  itemClick: "list:itemClick",
  itemHover: "list:itemHover",
  itemsChange: "list:itemsChange",
  keyDown: "list:keyDown",
  resetHighlight: "list:resetHighlight",
  highlightLast: "list:highlightLast",
  textNavigation: "list:textNavigation",
  clearSelection: "list:clearSelection"
};

// node_modules/@mui/base/useList/listReducer.js
function findValidItemToHighlight(currentIndex, lookupDirection, items, includeDisabledItems, isItemDisabled, wrapAround) {
  if (items.length === 0 || !includeDisabledItems && items.every((item, itemIndex) => isItemDisabled(item, itemIndex))) {
    return -1;
  }
  let nextFocus = currentIndex;
  for (; ; ) {
    if (!wrapAround && lookupDirection === "next" && nextFocus === items.length || !wrapAround && lookupDirection === "previous" && nextFocus === -1) {
      return -1;
    }
    const nextFocusDisabled = includeDisabledItems ? false : isItemDisabled(items[nextFocus], nextFocus);
    if (nextFocusDisabled) {
      nextFocus += lookupDirection === "next" ? 1 : -1;
      if (wrapAround) {
        nextFocus = (nextFocus + items.length) % items.length;
      }
    } else {
      return nextFocus;
    }
  }
}
function moveHighlight(previouslyHighlightedValue, offset4, context) {
  var _items$nextIndex;
  const {
    items,
    isItemDisabled,
    disableListWrap,
    disabledItemsFocusable,
    itemComparer,
    focusManagement
  } = context;
  const defaultHighlightedIndex = focusManagement === "DOM" ? 0 : -1;
  const maxIndex = items.length - 1;
  const previouslyHighlightedIndex = previouslyHighlightedValue == null ? -1 : items.findIndex((item) => itemComparer(item, previouslyHighlightedValue));
  let nextIndexCandidate;
  let lookupDirection;
  let wrapAround = !disableListWrap;
  switch (offset4) {
    case "reset":
      if (defaultHighlightedIndex === -1) {
        return null;
      }
      nextIndexCandidate = 0;
      lookupDirection = "next";
      wrapAround = false;
      break;
    case "start":
      nextIndexCandidate = 0;
      lookupDirection = "next";
      wrapAround = false;
      break;
    case "end":
      nextIndexCandidate = maxIndex;
      lookupDirection = "previous";
      wrapAround = false;
      break;
    default: {
      const newIndex = previouslyHighlightedIndex + offset4;
      if (newIndex < 0) {
        if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(offset4) > 1) {
          nextIndexCandidate = 0;
          lookupDirection = "next";
        } else {
          nextIndexCandidate = maxIndex;
          lookupDirection = "previous";
        }
      } else if (newIndex > maxIndex) {
        if (!wrapAround || Math.abs(offset4) > 1) {
          nextIndexCandidate = maxIndex;
          lookupDirection = "previous";
        } else {
          nextIndexCandidate = 0;
          lookupDirection = "next";
        }
      } else {
        nextIndexCandidate = newIndex;
        lookupDirection = offset4 >= 0 ? "next" : "previous";
      }
    }
  }
  const nextIndex = findValidItemToHighlight(nextIndexCandidate, lookupDirection, items, disabledItemsFocusable, isItemDisabled, wrapAround);
  if (nextIndex === -1 && previouslyHighlightedValue !== null && !isItemDisabled(previouslyHighlightedValue, previouslyHighlightedIndex)) {
    return previouslyHighlightedValue;
  }
  return (_items$nextIndex = items[nextIndex]) != null ? _items$nextIndex : null;
}
function toggleSelection(item, selectedValues, selectionMode, itemComparer) {
  if (selectionMode === "none") {
    return [];
  }
  if (selectionMode === "single") {
    if (itemComparer(selectedValues[0], item)) {
      return selectedValues;
    }
    return [item];
  }
  if (selectedValues.some((sv) => itemComparer(sv, item))) {
    return selectedValues.filter((sv) => !itemComparer(sv, item));
  }
  return [...selectedValues, item];
}
function handleItemSelection(item, state, context) {
  const {
    itemComparer,
    isItemDisabled,
    selectionMode,
    items
  } = context;
  const {
    selectedValues
  } = state;
  const itemIndex = items.findIndex((i) => itemComparer(item, i));
  if (isItemDisabled(item, itemIndex)) {
    return state;
  }
  const newSelectedValues = toggleSelection(item, selectedValues, selectionMode, itemComparer);
  return _extends({}, state, {
    selectedValues: newSelectedValues,
    highlightedValue: item
  });
}
function handleKeyDown2(key, state, context) {
  const previouslySelectedValue = state.highlightedValue;
  const {
    orientation,
    pageSize: pageSize2
  } = context;
  switch (key) {
    case "Home":
      return _extends({}, state, {
        highlightedValue: moveHighlight(previouslySelectedValue, "start", context)
      });
    case "End":
      return _extends({}, state, {
        highlightedValue: moveHighlight(previouslySelectedValue, "end", context)
      });
    case "PageUp":
      return _extends({}, state, {
        highlightedValue: moveHighlight(previouslySelectedValue, -pageSize2, context)
      });
    case "PageDown":
      return _extends({}, state, {
        highlightedValue: moveHighlight(previouslySelectedValue, pageSize2, context)
      });
    case "ArrowUp":
      if (orientation !== "vertical") {
        break;
      }
      return _extends({}, state, {
        highlightedValue: moveHighlight(previouslySelectedValue, -1, context)
      });
    case "ArrowDown":
      if (orientation !== "vertical") {
        break;
      }
      return _extends({}, state, {
        highlightedValue: moveHighlight(previouslySelectedValue, 1, context)
      });
    case "ArrowLeft": {
      if (orientation === "vertical") {
        break;
      }
      const offset4 = orientation === "horizontal-ltr" ? -1 : 1;
      return _extends({}, state, {
        highlightedValue: moveHighlight(previouslySelectedValue, offset4, context)
      });
    }
    case "ArrowRight": {
      if (orientation === "vertical") {
        break;
      }
      const offset4 = orientation === "horizontal-ltr" ? 1 : -1;
      return _extends({}, state, {
        highlightedValue: moveHighlight(previouslySelectedValue, offset4, context)
      });
    }
    case "Enter":
    case " ":
      if (state.highlightedValue === null) {
        return state;
      }
      return handleItemSelection(state.highlightedValue, state, context);
    default:
      break;
  }
  return state;
}
function handleBlur(state, context) {
  if (context.focusManagement === "DOM") {
    return state;
  }
  return _extends({}, state, {
    highlightedValue: null
  });
}
function textCriteriaMatches(nextFocus, searchString, stringifyItem) {
  var _stringifyItem;
  const text = (_stringifyItem = stringifyItem(nextFocus)) == null ? void 0 : _stringifyItem.trim().toLowerCase();
  if (!text || text.length === 0) {
    return false;
  }
  return text.indexOf(searchString) === 0;
}
function handleTextNavigation(state, searchString, context) {
  const {
    items,
    isItemDisabled,
    disabledItemsFocusable,
    getItemAsString
  } = context;
  const startWithCurrentItem = searchString.length > 1;
  let nextItem = startWithCurrentItem ? state.highlightedValue : moveHighlight(state.highlightedValue, 1, context);
  for (let index2 = 0; index2 < items.length; index2 += 1) {
    if (!nextItem || !startWithCurrentItem && state.highlightedValue === nextItem) {
      return state;
    }
    if (textCriteriaMatches(nextItem, searchString, getItemAsString) && (!isItemDisabled(nextItem, items.indexOf(nextItem)) || disabledItemsFocusable)) {
      return _extends({}, state, {
        highlightedValue: nextItem
      });
    }
    nextItem = moveHighlight(nextItem, 1, context);
  }
  return state;
}
function handleItemsChange(items, previousItems, state, context) {
  var _state$selectedValues;
  const {
    itemComparer,
    focusManagement
  } = context;
  let newHighlightedValue = null;
  if (state.highlightedValue != null) {
    var _items$find;
    newHighlightedValue = (_items$find = items.find((item) => itemComparer(item, state.highlightedValue))) != null ? _items$find : null;
  } else if (focusManagement === "DOM" && previousItems.length === 0) {
    newHighlightedValue = moveHighlight(null, "reset", context);
  }
  const selectedValues = (_state$selectedValues = state.selectedValues) != null ? _state$selectedValues : [];
  const newSelectedValues = selectedValues.filter((selectedValue) => items.some((item) => itemComparer(item, selectedValue)));
  return _extends({}, state, {
    highlightedValue: newHighlightedValue,
    selectedValues: newSelectedValues
  });
}
function handleResetHighlight(state, context) {
  return _extends({}, state, {
    highlightedValue: moveHighlight(null, "reset", context)
  });
}
function handleHighlightLast(state, context) {
  return _extends({}, state, {
    highlightedValue: moveHighlight(null, "end", context)
  });
}
function handleClearSelection(state, context) {
  return _extends({}, state, {
    selectedValues: [],
    highlightedValue: moveHighlight(null, "reset", context)
  });
}
function listReducer(state, action) {
  const {
    type,
    context
  } = action;
  switch (type) {
    case ListActionTypes.keyDown:
      return handleKeyDown2(action.key, state, context);
    case ListActionTypes.itemClick:
      return handleItemSelection(action.item, state, context);
    case ListActionTypes.blur:
      return handleBlur(state, context);
    case ListActionTypes.textNavigation:
      return handleTextNavigation(state, action.searchString, context);
    case ListActionTypes.itemsChange:
      return handleItemsChange(action.items, action.previousItems, state, context);
    case ListActionTypes.resetHighlight:
      return handleResetHighlight(state, context);
    case ListActionTypes.highlightLast:
      return handleHighlightLast(state, context);
    case ListActionTypes.clearSelection:
      return handleClearSelection(state, context);
    default:
      return state;
  }
}

// node_modules/@mui/base/utils/useTextNavigation.js
var React34 = __toESM(require_react());
var TEXT_NAVIGATION_RESET_TIMEOUT = 500;
function useTextNavigation(callback) {
  const textCriteriaRef = React34.useRef({
    searchString: "",
    lastTime: null
  });
  return React34.useCallback((event) => {
    if (event.key.length === 1 && event.key !== " ") {
      const textCriteria = textCriteriaRef.current;
      const lowerKey = event.key.toLowerCase();
      const currentTime = performance.now();
      if (textCriteria.searchString.length > 0 && textCriteria.lastTime && currentTime - textCriteria.lastTime > TEXT_NAVIGATION_RESET_TIMEOUT) {
        textCriteria.searchString = lowerKey;
      } else if (textCriteria.searchString.length !== 1 || lowerKey !== textCriteria.searchString) {
        textCriteria.searchString += lowerKey;
      }
      textCriteria.lastTime = currentTime;
      callback(textCriteria.searchString, event);
    }
  }, [callback]);
}

// node_modules/@mui/base/useList/useList.js
var EMPTY_OBJECT2 = {};
var NOOP2 = () => {
};
var defaultItemComparer = (optionA, optionB) => optionA === optionB;
var defaultIsItemDisabled = () => false;
var defaultItemStringifier = (item) => typeof item === "string" ? item : String(item);
var defaultGetInitialState = () => ({
  highlightedValue: null,
  selectedValues: []
});
function useList(params) {
  const {
    controlledProps = EMPTY_OBJECT2,
    disabledItemsFocusable = false,
    disableListWrap = false,
    focusManagement = "activeDescendant",
    getInitialState = defaultGetInitialState,
    getItemDomElement,
    getItemId,
    isItemDisabled = defaultIsItemDisabled,
    rootRef: externalListRef,
    onStateChange = NOOP2,
    items,
    itemComparer = defaultItemComparer,
    getItemAsString = defaultItemStringifier,
    onChange,
    onHighlightChange,
    onItemsChange,
    orientation = "vertical",
    pageSize: pageSize2 = 5,
    reducerActionContext = EMPTY_OBJECT2,
    selectionMode = "single",
    stateReducer: externalReducer,
    componentName = "useList"
  } = params;
  if (true) {
    if (focusManagement === "DOM" && getItemDomElement == null) {
      throw new Error("useList: The `getItemDomElement` prop is required when using the `DOM` focus management.");
    }
    if (focusManagement === "activeDescendant" && getItemId == null) {
      throw new Error("useList: The `getItemId` prop is required when using the `activeDescendant` focus management.");
    }
  }
  const listRef = React35.useRef(null);
  const handleRef = useForkRef2(externalListRef, listRef);
  const handleHighlightChange = React35.useCallback((event, value, reason) => {
    onHighlightChange == null || onHighlightChange(event, value, reason);
    if (focusManagement === "DOM" && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {
      var _getItemDomElement;
      getItemDomElement == null || (_getItemDomElement = getItemDomElement(value)) == null || _getItemDomElement.focus();
    }
  }, [getItemDomElement, onHighlightChange, focusManagement]);
  const stateComparers = React35.useMemo(() => ({
    highlightedValue: itemComparer,
    selectedValues: (valuesArray1, valuesArray2) => areArraysEqual(valuesArray1, valuesArray2, itemComparer)
  }), [itemComparer]);
  const handleStateChange = React35.useCallback((event, field, value, reason, state2) => {
    onStateChange == null || onStateChange(event, field, value, reason, state2);
    switch (field) {
      case "highlightedValue":
        handleHighlightChange(event, value, reason);
        break;
      case "selectedValues":
        onChange == null || onChange(event, value, reason);
        break;
      default:
        break;
    }
  }, [handleHighlightChange, onChange, onStateChange]);
  const listActionContext = React35.useMemo(() => {
    return {
      disabledItemsFocusable,
      disableListWrap,
      focusManagement,
      isItemDisabled,
      itemComparer,
      items,
      getItemAsString,
      onHighlightChange: handleHighlightChange,
      orientation,
      pageSize: pageSize2,
      selectionMode,
      stateComparers
    };
  }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize2, selectionMode, stateComparers]);
  const initialState = getInitialState();
  const reducer = externalReducer != null ? externalReducer : listReducer;
  const actionContext = React35.useMemo(() => _extends({}, reducerActionContext, listActionContext), [reducerActionContext, listActionContext]);
  const [state, dispatch] = useControllableReducer({
    reducer,
    actionContext,
    initialState,
    controlledProps,
    stateComparers,
    onStateChange: handleStateChange,
    componentName
  });
  const {
    highlightedValue,
    selectedValues
  } = state;
  const handleTextNavigation2 = useTextNavigation((searchString, event) => dispatch({
    type: ListActionTypes.textNavigation,
    event,
    searchString
  }));
  const previousItems = React35.useRef([]);
  React35.useEffect(() => {
    if (areArraysEqual(previousItems.current, items, itemComparer)) {
      return;
    }
    dispatch({
      type: ListActionTypes.itemsChange,
      event: null,
      items,
      previousItems: previousItems.current
    });
    previousItems.current = items;
    onItemsChange == null || onItemsChange(items);
  }, [items, itemComparer, dispatch, onItemsChange]);
  const createHandleKeyDown = (externalHandlers) => (event) => {
    var _externalHandlers$onK;
    (_externalHandlers$onK = externalHandlers.onKeyDown) == null || _externalHandlers$onK.call(externalHandlers, event);
    if (event.defaultMuiPrevented) {
      return;
    }
    const keysToPreventDefault = ["Home", "End", "PageUp", "PageDown"];
    if (orientation === "vertical") {
      keysToPreventDefault.push("ArrowUp", "ArrowDown");
    } else {
      keysToPreventDefault.push("ArrowLeft", "ArrowRight");
    }
    if (focusManagement === "activeDescendant") {
      keysToPreventDefault.push(" ", "Enter");
    }
    if (keysToPreventDefault.includes(event.key)) {
      event.preventDefault();
    }
    dispatch({
      type: ListActionTypes.keyDown,
      key: event.key,
      event
    });
    handleTextNavigation2(event);
  };
  const createHandleBlur = (externalHandlers) => (event) => {
    var _externalHandlers$onB, _listRef$current;
    (_externalHandlers$onB = externalHandlers.onBlur) == null || _externalHandlers$onB.call(externalHandlers, event);
    if (event.defaultMuiPrevented) {
      return;
    }
    if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {
      return;
    }
    dispatch({
      type: ListActionTypes.blur,
      event
    });
  };
  const getRootProps = (externalProps = {}) => {
    const externalEventHandlers = extractEventHandlers_default(externalProps);
    return _extends({}, externalProps, {
      "aria-activedescendant": focusManagement === "activeDescendant" && highlightedValue != null ? getItemId(highlightedValue) : void 0,
      tabIndex: focusManagement === "DOM" ? -1 : 0,
      ref: handleRef
    }, externalEventHandlers, {
      onBlur: createHandleBlur(externalEventHandlers),
      onKeyDown: createHandleKeyDown(externalEventHandlers)
    });
  };
  const getItemState = React35.useCallback((item) => {
    const selected = (selectedValues != null ? selectedValues : []).some((value) => value != null && itemComparer(item, value));
    const highlighted = highlightedValue != null && itemComparer(item, highlightedValue);
    const focusable = focusManagement === "DOM";
    return {
      focusable,
      highlighted,
      selected
    };
  }, [itemComparer, selectedValues, highlightedValue, focusManagement]);
  const contextValue = React35.useMemo(() => ({
    dispatch,
    getItemState
  }), [dispatch, getItemState]);
  React35.useDebugValue({
    state
  });
  return {
    contextValue,
    dispatch,
    getRootProps,
    rootRef: handleRef,
    state
  };
}

// node_modules/@mui/base/useList/useListItem.js
var React37 = __toESM(require_react());

// node_modules/@mui/base/useList/ListContext.js
var React36 = __toESM(require_react());
var ListContext = React36.createContext(null);
if (true) {
  ListContext.displayName = "ListContext";
}

// node_modules/@mui/base/useList/useListItem.js
function useListItem(parameters) {
  const {
    handlePointerOverEvents = false,
    item
  } = parameters;
  const listContext = React37.useContext(ListContext);
  if (!listContext) {
    throw new Error("useListItem must be used within a ListProvider");
  }
  const {
    dispatch,
    getItemState
  } = listContext;
  const {
    highlighted,
    selected,
    focusable
  } = getItemState(item);
  const createHandleClick = React37.useCallback((externalHandlers) => (event) => {
    var _externalHandlers$onC;
    (_externalHandlers$onC = externalHandlers.onClick) == null || _externalHandlers$onC.call(externalHandlers, event);
    if (event.defaultPrevented) {
      return;
    }
    if (true) {
      if (item === void 0) {
        throw new Error(["MUI: The `item` provided to useListItem() is undefined.", "This should happen only during server-side rendering under React 17."].join("\n"));
      }
    }
    dispatch({
      type: ListActionTypes.itemClick,
      item,
      event
    });
  }, [dispatch, item]);
  const createHandlePointerOver = React37.useCallback((externalHandlers) => (event) => {
    var _externalHandlers$onM;
    (_externalHandlers$onM = externalHandlers.onMouseOver) == null || _externalHandlers$onM.call(externalHandlers, event);
    if (event.defaultPrevented) {
      return;
    }
    if (true) {
      if (item === void 0) {
        throw new Error(["MUI: The `item` provided to useListItem() is undefined.", "This should happen only during server-side rendering under React 17."].join("\n"));
      }
    }
    dispatch({
      type: ListActionTypes.itemHover,
      item,
      event
    });
  }, [dispatch, item]);
  let tabIndex;
  if (focusable) {
    tabIndex = highlighted ? 0 : -1;
  }
  const getRootProps = (externalProps = {}) => {
    const externalEventHandlers = extractEventHandlers_default(externalProps);
    return _extends({}, externalProps, {
      onClick: createHandleClick(externalEventHandlers),
      onPointerOver: handlePointerOverEvents ? createHandlePointerOver(externalEventHandlers) : void 0,
      tabIndex
    });
  };
  return {
    getRootProps,
    highlighted,
    selected
  };
}

// node_modules/@mui/base/useMenu/menuReducer.js
function menuReducer(state, action) {
  if (action.type === ListActionTypes.itemHover) {
    return _extends({}, state, {
      highlightedValue: action.item
    });
  }
  const newState = listReducer(state, action);
  if (newState.highlightedValue === null && action.context.items.length > 0) {
    return _extends({}, newState, {
      highlightedValue: action.context.items[0]
    });
  }
  if (action.type === ListActionTypes.keyDown) {
    if (action.event.key === "Escape") {
      return _extends({}, newState, {
        open: false
      });
    }
  }
  if (action.type === ListActionTypes.blur) {
    var _action$context$listb;
    if (!((_action$context$listb = action.context.listboxRef.current) != null && _action$context$listb.contains(action.event.relatedTarget))) {
      var _action$context$listb2, _action$event$related;
      const listboxId = (_action$context$listb2 = action.context.listboxRef.current) == null ? void 0 : _action$context$listb2.getAttribute("id");
      const controlledBy = (_action$event$related = action.event.relatedTarget) == null ? void 0 : _action$event$related.getAttribute("aria-controls");
      if (listboxId && controlledBy && listboxId === controlledBy) {
        return newState;
      }
      return _extends({}, newState, {
        open: false,
        highlightedValue: action.context.items[0]
      });
    }
  }
  return newState;
}

// node_modules/@mui/base/useCompound/useCompoundParent.js
var React38 = __toESM(require_react());
var CompoundComponentContext = React38.createContext(null);
if (true) {
  CompoundComponentContext.displayName = "CompoundComponentContext";
}
function sortSubitems(subitems) {
  const subitemsArray = Array.from(subitems.keys()).map((key) => {
    const subitem = subitems.get(key);
    return {
      key,
      subitem
    };
  });
  subitemsArray.sort((a, b) => {
    const aNode = a.subitem.ref.current;
    const bNode = b.subitem.ref.current;
    if (aNode === null || bNode === null || aNode === bNode) {
      return 0;
    }
    return aNode.compareDocumentPosition(bNode) & Node.DOCUMENT_POSITION_PRECEDING ? 1 : -1;
  });
  return new Map(subitemsArray.map((item) => [item.key, item.subitem]));
}
function useCompoundParent() {
  const [subitems, setSubitems] = React38.useState(/* @__PURE__ */ new Map());
  const subitemKeys = React38.useRef(/* @__PURE__ */ new Set());
  const deregisterItem = React38.useCallback(function deregisterItem2(id) {
    subitemKeys.current.delete(id);
    setSubitems((previousState) => {
      const newState = new Map(previousState);
      newState.delete(id);
      return newState;
    });
  }, []);
  const registerItem = React38.useCallback(function registerItem2(id, item) {
    let providedOrGeneratedId;
    if (typeof id === "function") {
      providedOrGeneratedId = id(subitemKeys.current);
    } else {
      providedOrGeneratedId = id;
    }
    subitemKeys.current.add(providedOrGeneratedId);
    setSubitems((previousState) => {
      const newState = new Map(previousState);
      newState.set(providedOrGeneratedId, item);
      return newState;
    });
    return {
      id: providedOrGeneratedId,
      deregister: () => deregisterItem(providedOrGeneratedId)
    };
  }, [deregisterItem]);
  const sortedSubitems = React38.useMemo(() => sortSubitems(subitems), [subitems]);
  const getItemIndex = React38.useCallback(function getItemIndex2(id) {
    return Array.from(sortedSubitems.keys()).indexOf(id);
  }, [sortedSubitems]);
  const contextValue = React38.useMemo(() => ({
    getItemIndex,
    registerItem,
    totalSubitemCount: subitems.size
  }), [getItemIndex, registerItem, subitems.size]);
  return {
    contextValue,
    subitems: sortedSubitems
  };
}

// node_modules/@mui/base/useCompound/useCompoundItem.js
var React39 = __toESM(require_react());
function useCompoundItem(id, itemMetadata) {
  const context = React39.useContext(CompoundComponentContext);
  if (context === null) {
    throw new Error("useCompoundItem must be used within a useCompoundParent");
  }
  const {
    registerItem
  } = context;
  const [registeredId, setRegisteredId] = React39.useState(typeof id === "function" ? void 0 : id);
  useEnhancedEffect_default(() => {
    const {
      id: returnedId,
      deregister
    } = registerItem(id, itemMetadata);
    setRegisteredId(returnedId);
    return deregister;
  }, [registerItem, itemMetadata, id]);
  return {
    id: registeredId,
    index: registeredId !== void 0 ? context.getItemIndex(registeredId) : -1,
    totalItemCount: context.totalSubitemCount
  };
}

// node_modules/@mui/base/utils/combineHooksSlotProps.js
function combineHooksSlotProps(getFirstProps, getSecondProps) {
  return function getCombinedProps(external = {}) {
    const firstResult = _extends({}, external, getFirstProps(external));
    const result = _extends({}, firstResult, getSecondProps(firstResult));
    return result;
  };
}

// node_modules/@mui/base/useMenu/useMenu.js
var FALLBACK_MENU_CONTEXT = {
  dispatch: () => {
  },
  popupId: "",
  registerPopup: () => {
  },
  registerTrigger: () => {
  },
  state: {
    open: true,
    changeReason: null
  },
  triggerElement: null
};
function useMenu(parameters = {}) {
  var _useId, _React$useContext;
  const {
    listboxRef: listboxRefProp,
    onItemsChange,
    id: idParam,
    disabledItemsFocusable = true,
    disableListWrap = false,
    autoFocus = true,
    componentName = "useMenu"
  } = parameters;
  const rootRef = React40.useRef(null);
  const handleRef = useForkRef2(rootRef, listboxRefProp);
  const listboxId = (_useId = useId2(idParam)) != null ? _useId : "";
  const {
    state: {
      open,
      changeReason
    },
    dispatch: menuDispatch,
    triggerElement,
    registerPopup
  } = (_React$useContext = React40.useContext(DropdownContext)) != null ? _React$useContext : FALLBACK_MENU_CONTEXT;
  const isInitiallyOpen = React40.useRef(open);
  const {
    subitems,
    contextValue: compoundComponentContextValue
  } = useCompoundParent();
  const subitemKeys = React40.useMemo(() => Array.from(subitems.keys()), [subitems]);
  const getItemDomElement = React40.useCallback((itemId) => {
    var _subitems$get$ref$cur, _subitems$get;
    if (itemId == null) {
      return null;
    }
    return (_subitems$get$ref$cur = (_subitems$get = subitems.get(itemId)) == null ? void 0 : _subitems$get.ref.current) != null ? _subitems$get$ref$cur : null;
  }, [subitems]);
  const isItemDisabled = React40.useCallback((id) => {
    var _subitems$get2;
    return (subitems == null || (_subitems$get2 = subitems.get(id)) == null ? void 0 : _subitems$get2.disabled) || false;
  }, [subitems]);
  const getItemAsString = React40.useCallback((id) => {
    var _subitems$get3, _subitems$get4;
    return ((_subitems$get3 = subitems.get(id)) == null ? void 0 : _subitems$get3.label) || ((_subitems$get4 = subitems.get(id)) == null || (_subitems$get4 = _subitems$get4.ref.current) == null ? void 0 : _subitems$get4.innerText);
  }, [subitems]);
  const reducerActionContext = React40.useMemo(() => ({
    listboxRef: rootRef
  }), [rootRef]);
  const {
    dispatch: listDispatch,
    getRootProps: getListRootProps,
    contextValue: listContextValue,
    state: {
      highlightedValue
    },
    rootRef: mergedListRef
  } = useList({
    disabledItemsFocusable,
    disableListWrap,
    focusManagement: "DOM",
    getItemDomElement,
    getInitialState: () => ({
      selectedValues: [],
      highlightedValue: null
    }),
    isItemDisabled,
    items: subitemKeys,
    getItemAsString,
    rootRef: handleRef,
    onItemsChange,
    reducerActionContext,
    selectionMode: "none",
    stateReducer: menuReducer,
    componentName
  });
  useEnhancedEffect_default(() => {
    registerPopup(listboxId);
  }, [listboxId, registerPopup]);
  useEnhancedEffect_default(() => {
    if (open && (changeReason == null ? void 0 : changeReason.type) === "keydown" && changeReason.key === "ArrowUp") {
      listDispatch({
        type: ListActionTypes.highlightLast,
        event: changeReason
      });
    }
  }, [open, changeReason, listDispatch]);
  React40.useEffect(() => {
    if (open && autoFocus && highlightedValue && !isInitiallyOpen.current) {
      var _subitems$get5;
      (_subitems$get5 = subitems.get(highlightedValue)) == null || (_subitems$get5 = _subitems$get5.ref) == null || (_subitems$get5 = _subitems$get5.current) == null || _subitems$get5.focus();
    }
  }, [open, autoFocus, highlightedValue, subitems, subitemKeys]);
  React40.useEffect(() => {
    var _rootRef$current;
    if ((_rootRef$current = rootRef.current) != null && _rootRef$current.contains(document.activeElement) && highlightedValue !== null) {
      var _subitems$get6;
      subitems == null || (_subitems$get6 = subitems.get(highlightedValue)) == null || (_subitems$get6 = _subitems$get6.ref.current) == null || _subitems$get6.focus();
    }
  }, [highlightedValue, subitems]);
  const createHandleBlur = (otherHandlers) => (event) => {
    var _otherHandlers$onBlur, _rootRef$current2;
    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
    if (event.defaultMuiPrevented) {
      return;
    }
    if ((_rootRef$current2 = rootRef.current) != null && _rootRef$current2.contains(event.relatedTarget) || event.relatedTarget === triggerElement) {
      return;
    }
    menuDispatch({
      type: DropdownActionTypes.blur,
      event
    });
  };
  const createHandleKeyDown = (otherHandlers) => (event) => {
    var _otherHandlers$onKeyD;
    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
    if (event.defaultMuiPrevented) {
      return;
    }
    if (event.key === "Escape") {
      menuDispatch({
        type: DropdownActionTypes.escapeKeyDown,
        event
      });
    }
  };
  const getOwnListboxHandlers = (otherHandlers = {}) => ({
    onBlur: createHandleBlur(otherHandlers),
    onKeyDown: createHandleKeyDown(otherHandlers)
  });
  const getListboxProps = (externalProps = {}) => {
    const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListRootProps);
    const externalEventHandlers = extractEventHandlers_default(externalProps);
    return _extends({}, externalProps, externalEventHandlers, getCombinedRootProps(externalEventHandlers), {
      id: listboxId,
      role: "menu"
    });
  };
  React40.useDebugValue({
    subitems,
    highlightedValue
  });
  return {
    contextValue: _extends({}, compoundComponentContextValue, listContextValue),
    dispatch: listDispatch,
    getListboxProps,
    highlightedValue,
    listboxRef: mergedListRef,
    menuItems: subitems,
    open,
    triggerElement
  };
}

// node_modules/@mui/base/useMenu/MenuProvider.js
var React41 = __toESM(require_react());
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
function MenuProvider(props) {
  const {
    value,
    children
  } = props;
  const {
    dispatch,
    getItemIndex,
    getItemState,
    registerItem,
    totalSubitemCount
  } = value;
  const listContextValue = React41.useMemo(() => ({
    dispatch,
    getItemState,
    getItemIndex
  }), [dispatch, getItemIndex, getItemState]);
  const compoundComponentContextValue = React41.useMemo(() => ({
    getItemIndex,
    registerItem,
    totalSubitemCount
  }), [registerItem, getItemIndex, totalSubitemCount]);
  return (0, import_jsx_runtime15.jsx)(CompoundComponentContext.Provider, {
    value: compoundComponentContextValue,
    children: (0, import_jsx_runtime15.jsx)(ListContext.Provider, {
      value: listContextValue,
      children
    })
  });
}

// node_modules/@mui/base/Unstable_Popup/Popup.js
var React48 = __toESM(require_react());
var import_prop_types12 = __toESM(require_prop_types());

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
var sides = ["top", "right", "bottom", "left"];
var alignments = ["start", "end"];
var placements = sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
var min = Math.min;
var max = Math.max;
var round = Math.round;
var floor = Math.floor;
var createCoords = (v) => ({
  x: v,
  y: v
});
var oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp2(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl) return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x,
    y,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y,
    left: x,
    right: x + width,
    bottom: y + height,
    x,
    y
  };
}

// node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name,
      fn
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x,
    y,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x,
    y,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
var flip = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const initialSideAxis = getSideAxis(initialPlacement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$filter2;
              const placement2 = (_overflowsData$filter2 = overflowsData.filter((d) => {
                if (hasFallbackAxisSideDirection) {
                  const currentSideAxis = getSideAxis(d.placement);
                  return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                  // reading directions favoring greater width.
                  currentSideAxis === "y";
                }
                return true;
              }).map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: rawValue.mainAxis || 0,
    crossAxis: rawValue.crossAxis || 0,
    alignmentAxis: rawValue.alignmentAxis
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var offset = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x,
        y,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x + diffCoords.x,
        y: y + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
var shift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x,
        y,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x2,
              y: y2
            } = _ref;
            return {
              x: x2,
              y: y2
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x,
        y
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp2(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp2(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x,
          y: limitedCoords.y - y,
          enabled: {
            [mainAxis]: checkMainAxis,
            [crossAxis]: checkCrossAxis
          }
        }
      };
    }
  };
};

// node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function hasWindow() {
  return typeof window !== "undefined";
}
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (!hasWindow() || typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isTopLayer(element) {
  return [":popover-open", ":modal"].some((selector) => {
    try {
      return element.matches(selector);
    } catch (e) {
      return false;
    }
  });
}
function isContainingBlock(elementOrCss) {
  const webkit = isWebKit();
  const css2 = isElement(elementOrCss) ? getComputedStyle(elementOrCss) : elementOrCss;
  return ["transform", "translate", "scale", "rotate", "perspective"].some((value) => css2[value] ? css2[value] !== "none" : false) || (css2.containerType ? css2.containerType !== "normal" : false) || !webkit && (css2.backdropFilter ? css2.backdropFilter !== "none" : false) || !webkit && (css2.filter ? css2.filter !== "none" : false) || ["transform", "translate", "scale", "rotate", "perspective", "filter"].some((value) => (css2.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css2.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else if (isTopLayer(currentNode)) {
      return null;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports) return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.scrollX,
    scrollTop: element.scrollY
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    const frameElement = getFrameElement(win);
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getFrameElement(win) {
  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
}

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css2 = getComputedStyle(element);
  let width = parseFloat(css2.width) || 0;
  let height = parseFloat(css2.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}
var noOffsets = createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = getFrameElement(currentWin);
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css2 = getComputedStyle(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css2.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css2.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = getFrameElement(currentWin);
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}
function getWindowScrollBarX(element, rect) {
  const leftScroll = getNodeScroll(element).scrollLeft;
  if (!rect) {
    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
  }
  return rect.left + leftScroll;
}
function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
  if (ignoreScrollbarX === void 0) {
    ignoreScrollbarX = false;
  }
  const htmlRect = documentElement.getBoundingClientRect();
  const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : (
    // RTL <body> scrollbar.
    getWindowScrollBarX(documentElement, htmlRect)
  ));
  const y = htmlRect.top + scroll.scrollTop;
  return {
    x,
    y
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle(body).direction === "rtl") {
    x += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y,
      width: clippingAncestor.width,
      height: clippingAncestor.height
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
  const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
  return {
    x,
    y,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element) {
  return getComputedStyle(element).position === "static";
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  let rawOffsetParent = element.offsetParent;
  if (getDocumentElement(element) === rawOffsetParent) {
    rawOffsetParent = rawOffsetParent.ownerDocument.body;
  }
  return rawOffsetParent;
}
function getOffsetParent(element, polyfill) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}
var getElementRects = async function(data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  const floatingDimensions = await getDimensionsFn(data.floating);
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      width: floatingDimensions.width,
      height: floatingDimensions.height
    }
  };
};
function isRTL(element) {
  return getComputedStyle(element).direction === "rtl";
}
var platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function rectsAreEqual(a, b) {
  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;
}
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const elementRectForRootMargin = element.getBoundingClientRect();
    const {
      left,
      top,
      width,
      height
    } = elementRectForRootMargin;
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {
        refresh();
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var offset2 = offset;
var shift2 = shift;
var flip2 = flip;
var computePosition2 = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

// node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
var React42 = __toESM(require_react(), 1);
var import_react = __toESM(require_react(), 1);
var ReactDOM = __toESM(require_react_dom(), 1);
var index = typeof document !== "undefined" ? import_react.useLayoutEffect : import_react.useEffect;
function deepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== typeof b) {
    return false;
  }
  if (typeof a === "function" && a.toString() === b.toString()) {
    return true;
  }
  let length;
  let i;
  let keys;
  if (a && b && typeof a === "object") {
    if (Array.isArray(a)) {
      length = a.length;
      if (length !== b.length) return false;
      for (i = length; i-- !== 0; ) {
        if (!deepEqual(a[i], b[i])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) {
      return false;
    }
    for (i = length; i-- !== 0; ) {
      if (!{}.hasOwnProperty.call(b, keys[i])) {
        return false;
      }
    }
    for (i = length; i-- !== 0; ) {
      const key = keys[i];
      if (key === "_owner" && a.$$typeof) {
        continue;
      }
      if (!deepEqual(a[key], b[key])) {
        return false;
      }
    }
    return true;
  }
  return a !== a && b !== b;
}
function getDPR(element) {
  if (typeof window === "undefined") {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}
function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}
function useLatestRef(value) {
  const ref = React42.useRef(value);
  index(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform = true,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = React42.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React42.useState(middleware);
  if (!deepEqual(latestMiddleware, middleware)) {
    setLatestMiddleware(middleware);
  }
  const [_reference, _setReference] = React42.useState(null);
  const [_floating, _setFloating] = React42.useState(null);
  const setReference = React42.useCallback((node) => {
    if (node !== referenceRef.current) {
      referenceRef.current = node;
      _setReference(node);
    }
  }, []);
  const setFloating = React42.useCallback((node) => {
    if (node !== floatingRef.current) {
      floatingRef.current = node;
      _setFloating(node);
    }
  }, []);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = React42.useRef(null);
  const floatingRef = React42.useRef(null);
  const dataRef = React42.useRef(data);
  const hasWhileElementsMounted = whileElementsMounted != null;
  const whileElementsMountedRef = useLatestRef(whileElementsMounted);
  const platformRef = useLatestRef(platform2);
  const openRef = useLatestRef(open);
  const update = React42.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {
      const fullData = {
        ...data2,
        // The floating element's position may be recomputed while it's closed
        // but still mounted (such as when transitioning out). To ensure
        // `isPositioned` will be `false` initially on the next open, avoid
        // setting it to `true` when `open === false` (must be specified).
        isPositioned: openRef.current !== false
      };
      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef, openRef]);
  index(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React42.useRef(false);
  index(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index(() => {
    if (referenceEl) referenceRef.current = referenceEl;
    if (floatingEl) floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      }
      update();
    }
  }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);
  const refs = React42.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React42.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = React42.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x = roundByDPR(elements.floating, data.x);
    const y = roundByDPR(elements.floating, data.y);
    if (transform) {
      return {
        ...initialStyles,
        transform: "translate(" + x + "px, " + y + "px)",
        ...getDPR(elements.floating) >= 1.5 && {
          willChange: "transform"
        }
      };
    }
    return {
      position: strategy,
      left: x,
      top: y
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return React42.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    floatingStyles
  }), [data, update, refs, elements, floatingStyles]);
}
var offset3 = (options, deps) => ({
  ...offset2(options),
  options: [options, deps]
});
var shift3 = (options, deps) => ({
  ...shift2(options),
  options: [options, deps]
});
var flip3 = (options, deps) => ({
  ...flip2(options),
  options: [options, deps]
});

// node_modules/@mui/base/Portal/Portal.js
var React43 = __toESM(require_react());
var ReactDOM2 = __toESM(require_react_dom());
var import_prop_types11 = __toESM(require_prop_types());
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
function getContainer(container) {
  return typeof container === "function" ? container() : container;
}
var Portal = React43.forwardRef(function Portal2(props, forwardedRef) {
  const {
    children,
    container,
    disablePortal = false
  } = props;
  const [mountNode, setMountNode] = React43.useState(null);
  const handleRef = useForkRef2(React43.isValidElement(children) ? getReactElementRef2(children) : null, forwardedRef);
  useEnhancedEffect_default(() => {
    if (!disablePortal) {
      setMountNode(getContainer(container) || document.body);
    }
  }, [container, disablePortal]);
  useEnhancedEffect_default(() => {
    if (mountNode && !disablePortal) {
      setRef(forwardedRef, mountNode);
      return () => {
        setRef(forwardedRef, null);
      };
    }
    return void 0;
  }, [forwardedRef, mountNode, disablePortal]);
  if (disablePortal) {
    if (React43.isValidElement(children)) {
      const newProps = {
        ref: handleRef
      };
      return React43.cloneElement(children, newProps);
    }
    return (0, import_jsx_runtime16.jsx)(React43.Fragment, {
      children
    });
  }
  return (0, import_jsx_runtime16.jsx)(React43.Fragment, {
    children: mountNode ? ReactDOM2.createPortal(children, mountNode) : mountNode
  });
});
true ? Portal.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The children to render into the `container`.
   */
  children: import_prop_types11.default.node,
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: import_prop_types11.default.oneOfType([HTMLElementType2, import_prop_types11.default.func]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: import_prop_types11.default.bool
} : void 0;
if (true) {
  Portal["propTypes"] = exactProp(Portal.propTypes);
}

// node_modules/@mui/base/Unstable_Popup/popupClasses.js
var COMPONENT_NAME6 = "Popup";
function getPopupUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME6, slot);
}
var popupClasses = generateUtilityClasses4(COMPONENT_NAME6, ["root", "open"]);

// node_modules/@mui/base/useTransition/useTransitionStateManager.js
var React45 = __toESM(require_react());

// node_modules/@mui/base/useTransition/TransitionContext.js
var React44 = __toESM(require_react());
var TransitionContext = React44.createContext(null);
if (true) {
  TransitionContext.displayName = "TransitionContext";
}

// node_modules/@mui/base/useTransition/useTransitionStateManager.js
function useTransitionStateManager() {
  const transitionContext = React45.useContext(TransitionContext);
  if (!transitionContext) {
    throw new Error("Missing transition context");
  }
  const {
    registerTransition,
    requestedEnter,
    onExited
  } = transitionContext;
  React45.useEffect(() => {
    return registerTransition();
  }, [registerTransition]);
  return {
    onExited,
    requestedEnter
  };
}

// node_modules/@mui/base/useTransition/useTransitionTrigger.js
var React46 = __toESM(require_react());
function useTransitionTrigger(requestEnter) {
  const [exitTransitionFinished, setExitTransitionFinished] = React46.useState(true);
  const hasPendingExitTransition = React46.useRef(false);
  const registeredTransitions = React46.useRef(0);
  const [hasTransition, setHasTransition] = React46.useState(false);
  const previousRequestEnter = React46.useRef(requestEnter);
  React46.useEffect(() => {
    if (!requestEnter && // checking registeredTransitions.current instead of hasTransition to avoid this effect re-firing whenever hasTransition changes
    registeredTransitions.current > 0 && // prevents waiting for a pending transition right after mounting
    previousRequestEnter.current !== requestEnter) {
      hasPendingExitTransition.current = true;
      setExitTransitionFinished(false);
    }
    previousRequestEnter.current = requestEnter;
  }, [requestEnter]);
  const handleExited = React46.useCallback(() => {
    hasPendingExitTransition.current = false;
    setExitTransitionFinished(true);
  }, []);
  const registerTransition = React46.useCallback(() => {
    registeredTransitions.current += 1;
    setHasTransition(true);
    return () => {
      registeredTransitions.current -= 1;
      if (registeredTransitions.current === 0) {
        setHasTransition(false);
      }
    };
  }, []);
  let hasExited;
  if (!hasTransition) {
    hasExited = !requestEnter;
  } else if (requestEnter) {
    hasExited = false;
  } else {
    hasExited = !hasPendingExitTransition.current && exitTransitionFinished;
  }
  const contextValue = React46.useMemo(() => ({
    requestedEnter: requestEnter,
    onExited: handleExited,
    registerTransition,
    hasExited
  }), [handleExited, requestEnter, registerTransition, hasExited]);
  return {
    contextValue,
    hasExited
  };
}

// node_modules/@mui/base/Unstable_Popup/PopupContext.js
var React47 = __toESM(require_react());
var PopupContext = React47.createContext(null);
if (true) {
  PopupContext.displayName = "PopupContext";
}

// node_modules/@mui/base/Unstable_Popup/Popup.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
var _excluded6 = ["anchor", "children", "container", "disablePortal", "keepMounted", "middleware", "offset", "open", "placement", "slotProps", "slots", "strategy"];
function useUtilityClasses5(ownerState) {
  const {
    open
  } = ownerState;
  const slots = {
    root: ["root", open && "open"]
  };
  return composeClasses2(slots, useClassNamesOverride(getPopupUtilityClass));
}
function resolveAnchor(anchor) {
  return typeof anchor === "function" ? anchor() : anchor;
}
var Popup = React48.forwardRef(function Popup2(props, forwardedRef) {
  var _slots$root;
  const {
    anchor: anchorProp,
    children,
    container,
    disablePortal = false,
    keepMounted = false,
    middleware,
    offset: offsetProp = 0,
    open = false,
    placement = "bottom",
    slotProps = {},
    slots = {},
    strategy = "absolute"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded6);
  const {
    refs,
    elements,
    floatingStyles,
    update,
    placement: finalPlacement
  } = useFloating({
    elements: {
      reference: resolveAnchor(anchorProp)
    },
    open,
    middleware: middleware != null ? middleware : [offset3(offsetProp != null ? offsetProp : 0), flip3(), shift3()],
    placement,
    strategy,
    whileElementsMounted: !keepMounted ? autoUpdate : void 0
  });
  const handleRef = useForkRef2(refs.setFloating, forwardedRef);
  useEnhancedEffect_default(() => {
    if (keepMounted && open && elements.reference && elements.floating) {
      const cleanup = autoUpdate(elements.reference, elements.floating, update);
      return cleanup;
    }
    return void 0;
  }, [keepMounted, open, elements, update]);
  const ownerState = _extends({}, props, {
    disablePortal,
    keepMounted,
    offset: offset3,
    open,
    placement,
    finalPlacement,
    strategy
  });
  const {
    contextValue,
    hasExited: hasTransitionExited
  } = useTransitionTrigger(open);
  const visibility = keepMounted && hasTransitionExited ? "hidden" : void 0;
  const classes = useUtilityClasses5(ownerState);
  const Root = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : "div";
  const rootProps = useSlotProps_default({
    elementType: Root,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    ownerState,
    className: classes.root,
    additionalProps: {
      ref: handleRef,
      role: "tooltip",
      style: _extends({}, floatingStyles, {
        visibility
      })
    }
  });
  const popupContextValue = React48.useMemo(() => ({
    placement: finalPlacement
  }), [finalPlacement]);
  const shouldRender = keepMounted || !hasTransitionExited;
  if (!shouldRender) {
    return null;
  }
  return (0, import_jsx_runtime17.jsx)(Portal, {
    disablePortal,
    container,
    children: (0, import_jsx_runtime17.jsx)(PopupContext.Provider, {
      value: popupContextValue,
      children: (0, import_jsx_runtime17.jsx)(TransitionContext.Provider, {
        value: contextValue,
        children: (0, import_jsx_runtime17.jsx)(Root, _extends({}, rootProps, {
          children
        }))
      })
    })
  });
});
true ? Popup.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An HTML element, [virtual element](https://floating-ui.com/docs/virtual-elements),
   * or a function that returns either.
   * It's used to set the position of the popup.
   */
  anchor: import_prop_types12.default.oneOfType([HTMLElementType2, import_prop_types12.default.object, import_prop_types12.default.func]),
  /**
   * @ignore
   */
  children: import_prop_types12.default.oneOfType([import_prop_types12.default.node, import_prop_types12.default.func]),
  /**
   * An HTML element or function that returns one. The container will have the portal children appended to it.
   * By default, it uses the body of the top-level document object, so it's `document.body` in these cases.
   */
  container: import_prop_types12.default.oneOfType([HTMLElementType2, import_prop_types12.default.func]),
  /**
   * If `true`, the popup will be rendered where it is defined, without the use of portals.
   * @default false
   */
  disablePortal: import_prop_types12.default.bool,
  /**
   * If `true`, the popup will exist in the DOM even if it's closed.
   * Its visibility will be controlled by the `visibility` CSS property.
   *
   * Otherwise, a closed popup will be removed from the DOM.
   *
   * @default false
   */
  keepMounted: import_prop_types12.default.bool,
  /**
   * Collection of Floating UI middleware to use when positioning the popup.
   * If not provided, the [`offset`](https://floating-ui.com/docs/offset)
   * and [`flip`](https://floating-ui.com/docs/flip) functions will be used.
   *
   * @see https://floating-ui.com/docs/computePosition#middleware
   */
  middleware: import_prop_types12.default.arrayOf(import_prop_types12.default.oneOfType([import_prop_types12.default.oneOf([false]), import_prop_types12.default.shape({
    fn: import_prop_types12.default.func.isRequired,
    name: import_prop_types12.default.string.isRequired,
    options: import_prop_types12.default.any
  })])),
  /**
   * Distance between a popup and the trigger element.
   * This prop is ignored when custom `middleware` is provided.
   *
   * @default 0
   * @see https://floating-ui.com/docs/offset
   */
  offset: import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.number, import_prop_types12.default.shape({
    alignmentAxis: import_prop_types12.default.number,
    crossAxis: import_prop_types12.default.number,
    mainAxis: import_prop_types12.default.number
  })]),
  /**
   * If `true`, the popup is visible.
   *
   * @default false
   */
  open: import_prop_types12.default.bool,
  /**
   * Determines where to place the popup relative to the trigger element.
   *
   * @default 'bottom'
   * @see https://floating-ui.com/docs/computePosition#placement
   */
  placement: import_prop_types12.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * The props used for each slot inside the Popup.
   *
   * @default {}
   */
  slotProps: import_prop_types12.default.shape({
    root: import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object])
  }),
  /**
   * The components used for each slot inside the Popup.
   * Either a string to use a HTML element or a component.
   *
   * @default {}
   */
  slots: import_prop_types12.default.shape({
    root: import_prop_types12.default.elementType
  }),
  /**
   * The type of CSS position property to use (absolute or fixed).
   *
   * @default 'absolute'
   * @see https://floating-ui.com/docs/computePosition#strategy
   */
  strategy: import_prop_types12.default.oneOf(["absolute", "fixed"])
} : void 0;

// node_modules/@mui/base/Menu/Menu.js
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var _excluded7 = ["actions", "anchor", "children", "onItemsChange", "slotProps", "slots"];
function useUtilityClasses6(ownerState) {
  const {
    open
  } = ownerState;
  const slots = {
    root: ["root", open && "expanded"],
    listbox: ["listbox", open && "expanded"]
  };
  return composeClasses2(slots, useClassNamesOverride(getMenuUtilityClass));
}
var Menu = React49.forwardRef(function Menu2(props, forwardedRef) {
  var _slots$root, _slots$listbox;
  const {
    actions,
    anchor: anchorProp,
    children,
    onItemsChange,
    slotProps = {},
    slots = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded7);
  const {
    contextValue,
    getListboxProps,
    dispatch,
    open,
    triggerElement
  } = useMenu({
    onItemsChange,
    componentName: "Menu"
  });
  const anchor = anchorProp != null ? anchorProp : triggerElement;
  React49.useImperativeHandle(actions, () => ({
    dispatch,
    resetHighlight: () => dispatch({
      type: ListActionTypes.resetHighlight,
      event: null
    })
  }), [dispatch]);
  const ownerState = _extends({}, props, {
    open
  });
  const classes = useUtilityClasses6(ownerState);
  const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
  const rootProps = useSlotProps_default({
    elementType: Root,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      ref: forwardedRef,
      role: void 0
    },
    className: classes.root,
    ownerState
  });
  const Listbox = (_slots$listbox = slots.listbox) != null ? _slots$listbox : "ul";
  const listboxProps = useSlotProps_default({
    elementType: Listbox,
    getSlotProps: getListboxProps,
    externalSlotProps: slotProps.listbox,
    className: classes.listbox,
    ownerState
  });
  if (open === true && anchor == null) {
    return (0, import_jsx_runtime18.jsx)(Root, _extends({}, rootProps, {
      children: (0, import_jsx_runtime18.jsx)(Listbox, _extends({}, listboxProps, {
        children: (0, import_jsx_runtime18.jsx)(MenuProvider, {
          value: contextValue,
          children
        })
      }))
    }));
  }
  return (0, import_jsx_runtime18.jsx)(Popup, _extends({
    keepMounted: true
  }, rootProps, {
    open,
    anchor,
    slots: {
      root: Root
    },
    children: (0, import_jsx_runtime18.jsx)(Listbox, _extends({}, listboxProps, {
      children: (0, import_jsx_runtime18.jsx)(MenuProvider, {
        value: contextValue,
        children
      })
    }))
  }));
});
true ? Menu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref with imperative actions that can be performed on the menu.
   */
  actions: refType_default2,
  /**
   * The element based on which the menu is positioned.
   */
  anchor: import_prop_types13.default.oneOfType([HTMLElementType2, import_prop_types13.default.object, import_prop_types13.default.func]),
  /**
   * @ignore
   */
  children: import_prop_types13.default.node,
  /**
   * @ignore
   */
  className: import_prop_types13.default.string,
  /**
   * Function called when the items displayed in the menu change.
   */
  onItemsChange: import_prop_types13.default.func,
  /**
   * The props used for each slot inside the Menu.
   * @default {}
   */
  slotProps: import_prop_types13.default.shape({
    listbox: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object]),
    root: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object])
  }),
  /**
   * The components used for each slot inside the Menu.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types13.default.shape({
    listbox: import_prop_types13.default.elementType,
    root: import_prop_types13.default.elementType
  })
} : void 0;

// node_modules/@mui/base/MenuButton/MenuButton.js
var React51 = __toESM(require_react());
var import_prop_types14 = __toESM(require_prop_types());

// node_modules/@mui/base/useMenuButton/useMenuButton.js
var React50 = __toESM(require_react());
function useMenuButton(parameters = {}) {
  const {
    disabled = false,
    focusableWhenDisabled,
    rootRef: externalRef
  } = parameters;
  const menuContext = React50.useContext(DropdownContext);
  if (menuContext === null) {
    throw new Error("useMenuButton: no menu context available.");
  }
  const {
    state,
    dispatch,
    registerTrigger,
    popupId
  } = menuContext;
  const {
    getRootProps: getButtonRootProps,
    rootRef: buttonRootRef,
    active
  } = useButton({
    disabled,
    focusableWhenDisabled,
    rootRef: externalRef
  });
  const handleRef = useForkRef2(buttonRootRef, registerTrigger);
  const createHandleClick = (otherHandlers) => (event) => {
    var _otherHandlers$onClic;
    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
    if (event.defaultMuiPrevented) {
      return;
    }
    dispatch({
      type: DropdownActionTypes.toggle,
      event
    });
  };
  const createHandleKeyDown = (otherHandlers) => (event) => {
    var _otherHandlers$onKeyD;
    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
    if (event.defaultMuiPrevented) {
      return;
    }
    if (event.key === "ArrowDown" || event.key === "ArrowUp") {
      event.preventDefault();
      dispatch({
        type: DropdownActionTypes.open,
        event
      });
    }
  };
  const getOwnRootProps = (otherHandlers = {}) => ({
    onClick: createHandleClick(otherHandlers),
    onKeyDown: createHandleKeyDown(otherHandlers)
  });
  const getRootProps = (externalProps = {}) => {
    const externalEventHandlers = extractEventHandlers_default(externalProps);
    const getCombinedProps = combineHooksSlotProps(getOwnRootProps, getButtonRootProps);
    return _extends({
      "aria-haspopup": "menu",
      "aria-expanded": state.open,
      "aria-controls": popupId
    }, externalProps, externalEventHandlers, getCombinedProps(externalEventHandlers), {
      tabIndex: 0,
      // this is needed to make the button focused after click in Safari
      ref: handleRef
    });
  };
  return {
    active,
    getRootProps,
    open: state.open,
    rootRef: handleRef
  };
}

// node_modules/@mui/base/MenuButton/menuButtonClasses.js
var COMPONENT_NAME7 = "MenuButton";
function getMenuButtonUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME7, slot);
}
var menuButtonClasses = generateUtilityClasses4(COMPONENT_NAME7, ["root", "active", "disabled", "expanded"]);

// node_modules/@mui/base/MenuButton/MenuButton.js
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var _excluded8 = ["children", "disabled", "label", "slots", "slotProps", "focusableWhenDisabled"];
var useUtilityClasses7 = (ownerState) => {
  const {
    active,
    disabled,
    open
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", active && "active", open && "expanded"]
  };
  return composeClasses2(slots, useClassNamesOverride(getMenuButtonUtilityClass));
};
var MenuButton = React51.forwardRef(function MenuButton2(props, forwardedRef) {
  const {
    children,
    disabled = false,
    slots = {},
    slotProps = {},
    focusableWhenDisabled = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded8);
  const {
    getRootProps,
    open,
    active
  } = useMenuButton({
    disabled,
    focusableWhenDisabled,
    rootRef: forwardedRef
  });
  const ownerState = _extends({}, props, {
    open,
    active,
    disabled,
    focusableWhenDisabled
  });
  const classes = useUtilityClasses7(ownerState);
  const Root = slots.root || "button";
  const rootProps = useSlotProps_default({
    elementType: Root,
    getSlotProps: getRootProps,
    externalForwardedProps: other,
    externalSlotProps: slotProps.root,
    additionalProps: {
      ref: forwardedRef,
      type: "button"
    },
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime19.jsx)(Root, _extends({}, rootProps, {
    children
  }));
});
true ? MenuButton.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types14.default.node,
  /**
   * Class name applied to the root element.
   */
  className: import_prop_types14.default.string,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types14.default.bool,
  /**
   * If `true`, allows a disabled button to receive focus.
   * @default false
   */
  focusableWhenDisabled: import_prop_types14.default.bool,
  /**
   * Label of the button
   */
  label: import_prop_types14.default.string,
  /**
   * The components used for each slot inside the MenuButton.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slotProps: import_prop_types14.default.shape({
    root: import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object])
  }),
  /**
   * The props used for each slot inside the MenuButton.
   * @default {}
   */
  slots: import_prop_types14.default.shape({
    root: import_prop_types14.default.elementType
  })
} : void 0;

// node_modules/@mui/base/MenuItem/MenuItem.js
var React54 = __toESM(require_react());
var import_prop_types15 = __toESM(require_prop_types());

// node_modules/@mui/base/MenuItem/menuItemClasses.js
var COMPONENT_NAME8 = "MenuItem";
function getMenuItemUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME8, slot);
}
var menuItemClasses = generateUtilityClasses4(COMPONENT_NAME8, ["root", "disabled", "focusVisible"]);

// node_modules/@mui/base/useMenuItem/useMenuItem.js
var React52 = __toESM(require_react());
function idGenerator(existingKeys) {
  return `menu-item-${existingKeys.size}`;
}
var FALLBACK_MENU_CONTEXT2 = {
  dispatch: () => {
  },
  popupId: "",
  registerPopup: () => {
  },
  registerTrigger: () => {
  },
  state: {
    open: true,
    changeReason: null
  },
  triggerElement: null
};
function useMenuItem(params) {
  var _React$useContext;
  const {
    disabled = false,
    id: idParam,
    rootRef: externalRef,
    label,
    disableFocusOnHover = false
  } = params;
  const id = useId2(idParam);
  const itemRef = React52.useRef(null);
  const itemMetadata = React52.useMemo(() => ({
    disabled,
    id: id != null ? id : "",
    label,
    ref: itemRef
  }), [disabled, id, label]);
  const {
    dispatch
  } = (_React$useContext = React52.useContext(DropdownContext)) != null ? _React$useContext : FALLBACK_MENU_CONTEXT2;
  const {
    getRootProps: getListRootProps,
    highlighted
  } = useListItem({
    item: id,
    handlePointerOverEvents: !disableFocusOnHover
  });
  const {
    index: index2,
    totalItemCount
  } = useCompoundItem(id != null ? id : idGenerator, itemMetadata);
  const {
    getRootProps: getButtonProps,
    focusVisible,
    rootRef: buttonRefHandler
  } = useButton({
    disabled,
    focusableWhenDisabled: true
  });
  const handleRef = useForkRef2(buttonRefHandler, externalRef, itemRef);
  React52.useDebugValue({
    id,
    highlighted,
    disabled,
    label
  });
  const createHandleClick = (otherHandlers) => (event) => {
    var _otherHandlers$onClic;
    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
    if (event.defaultMuiPrevented) {
      return;
    }
    dispatch({
      type: DropdownActionTypes.close,
      event
    });
  };
  const getOwnHandlers = (otherHandlers = {}) => _extends({}, otherHandlers, {
    onClick: createHandleClick(otherHandlers)
  });
  function getRootProps(externalProps = {}) {
    const externalEventHandlers = extractEventHandlers_default(externalProps);
    const getCombinedRootProps = combineHooksSlotProps(getOwnHandlers, combineHooksSlotProps(getButtonProps, getListRootProps));
    return _extends({}, externalProps, externalEventHandlers, getCombinedRootProps(externalEventHandlers), {
      id,
      ref: handleRef,
      role: "menuitem"
    });
  }
  if (id === void 0) {
    return {
      getRootProps,
      disabled: false,
      focusVisible,
      highlighted: false,
      index: -1,
      totalItemCount: 0,
      rootRef: handleRef
    };
  }
  return {
    getRootProps,
    disabled,
    focusVisible,
    highlighted,
    index: index2,
    totalItemCount,
    rootRef: handleRef
  };
}

// node_modules/@mui/base/useMenuItem/useMenuItemContextStabilizer.js
var React53 = __toESM(require_react());
function useMenuItemContextStabilizer(id) {
  const listContext = React53.useContext(ListContext);
  if (!listContext) {
    throw new Error("MenuItem: ListContext was not found.");
  }
  const itemId = useId2(id);
  const {
    getItemState,
    dispatch
  } = listContext;
  let itemState;
  if (itemId != null) {
    itemState = getItemState(itemId);
  } else {
    itemState = {
      focusable: true,
      highlighted: false,
      selected: false
    };
  }
  const {
    highlighted,
    selected,
    focusable
  } = itemState;
  const localGetItemState = React53.useCallback((itemValue) => {
    if (itemValue !== itemId) {
      throw new Error(["Base UI MenuItem: Tried to access the state of another MenuItem.", `itemValue: ${itemValue} | id: ${itemId}`, "This is unsupported when the MenuItem uses the MenuItemContextStabilizer as a performance optimization."].join("/n"));
    }
    return {
      highlighted,
      selected,
      focusable
    };
  }, [highlighted, selected, focusable, itemId]);
  const localContextValue = React53.useMemo(() => ({
    dispatch,
    getItemState: localGetItemState
  }), [dispatch, localGetItemState]);
  return {
    contextValue: localContextValue,
    id: itemId
  };
}

// node_modules/@mui/base/MenuItem/MenuItem.js
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var _excluded9 = ["children", "disabled", "label", "id", "slotProps", "slots"];
function useUtilityClasses8(ownerState) {
  const {
    disabled,
    focusVisible
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
  };
  return composeClasses2(slots, useClassNamesOverride(getMenuItemUtilityClass));
}
var InnerMenuItem = React54.memo(React54.forwardRef(function MenuItem(props, forwardedRef) {
  var _slots$root;
  const {
    children,
    disabled: disabledProp = false,
    label,
    id,
    slotProps = {},
    slots = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded9);
  const {
    getRootProps,
    disabled,
    focusVisible,
    highlighted
  } = useMenuItem({
    id,
    disabled: disabledProp,
    rootRef: forwardedRef,
    label
  });
  const ownerState = _extends({}, props, {
    disabled,
    focusVisible,
    highlighted
  });
  const classes = useUtilityClasses8(ownerState);
  const Root = (_slots$root = slots.root) != null ? _slots$root : "li";
  const rootProps = useSlotProps_default({
    elementType: Root,
    getSlotProps: getRootProps,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime20.jsx)(Root, _extends({}, rootProps, {
    children
  }));
}));
var MenuItem2 = React54.forwardRef(function MenuItem3(props, ref) {
  const {
    id: idProp
  } = props;
  const {
    contextValue,
    id
  } = useMenuItemContextStabilizer(idProp);
  return (0, import_jsx_runtime20.jsx)(ListContext.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime20.jsx)(InnerMenuItem, _extends({}, props, {
      id,
      ref
    }))
  });
});
true ? MenuItem2.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types15.default.node,
  /**
   * @ignore
   */
  className: import_prop_types15.default.string,
  /**
   * If `true`, the menu item will be disabled.
   * @default false
   */
  disabled: import_prop_types15.default.bool,
  /**
   * If `true`, the menu item won't receive focus when the mouse moves over it.
   *
   * @default false
   */
  disableFocusOnHover: import_prop_types15.default.bool,
  /**
   * A text representation of the menu item's content.
   * Used for keyboard text navigation matching.
   */
  label: import_prop_types15.default.string,
  /**
   * @ignore
   */
  onClick: import_prop_types15.default.func,
  /**
   * The props used for each slot inside the MenuItem.
   * @default {}
   */
  slotProps: import_prop_types15.default.shape({
    root: import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object])
  }),
  /**
   * The components used for each slot inside the MenuItem.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types15.default.shape({
    root: import_prop_types15.default.elementType
  })
} : void 0;

// node_modules/@mui/base/Modal/Modal.js
var React56 = __toESM(require_react());
var import_prop_types16 = __toESM(require_prop_types());

// node_modules/@mui/base/unstable_useModal/useModal.js
var React55 = __toESM(require_react());

// node_modules/@mui/base/unstable_useModal/ModalManager.js
function isOverflowing(container) {
  const doc = ownerDocument(container);
  if (doc.body === container) {
    return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
  }
  return container.scrollHeight > container.clientHeight;
}
function ariaHidden(element, show) {
  if (show) {
    element.setAttribute("aria-hidden", "true");
  } else {
    element.removeAttribute("aria-hidden");
  }
}
function getPaddingRight(element) {
  return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
}
function isAriaHiddenForbiddenOnElement(element) {
  const forbiddenTagNames = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"];
  const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
  const isInputHidden = element.tagName === "INPUT" && element.getAttribute("type") === "hidden";
  return isForbiddenTagName || isInputHidden;
}
function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
  const blacklist = [mountElement, currentElement, ...elementsToExclude];
  [].forEach.call(container.children, (element) => {
    const isNotExcludedElement = blacklist.indexOf(element) === -1;
    const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
    if (isNotExcludedElement && isNotForbiddenElement) {
      ariaHidden(element, show);
    }
  });
}
function findIndexOf(items, callback) {
  let idx = -1;
  items.some((item, index2) => {
    if (callback(item)) {
      idx = index2;
      return true;
    }
    return false;
  });
  return idx;
}
function handleContainer(containerInfo, props) {
  const restoreStyle = [];
  const container = containerInfo.container;
  if (!props.disableScrollLock) {
    if (isOverflowing(container)) {
      const scrollbarSize = getScrollbarSize(ownerDocument(container));
      restoreStyle.push({
        value: container.style.paddingRight,
        property: "padding-right",
        el: container
      });
      container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
      const fixedElements = ownerDocument(container).querySelectorAll(".mui-fixed");
      [].forEach.call(fixedElements, (element) => {
        restoreStyle.push({
          value: element.style.paddingRight,
          property: "padding-right",
          el: element
        });
        element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
      });
    }
    let scrollContainer;
    if (container.parentNode instanceof DocumentFragment) {
      scrollContainer = ownerDocument(container).body;
    } else {
      const parent = container.parentElement;
      const containerWindow = ownerWindow(container);
      scrollContainer = (parent == null ? void 0 : parent.nodeName) === "HTML" && containerWindow.getComputedStyle(parent).overflowY === "scroll" ? parent : container;
    }
    restoreStyle.push({
      value: scrollContainer.style.overflow,
      property: "overflow",
      el: scrollContainer
    }, {
      value: scrollContainer.style.overflowX,
      property: "overflow-x",
      el: scrollContainer
    }, {
      value: scrollContainer.style.overflowY,
      property: "overflow-y",
      el: scrollContainer
    });
    scrollContainer.style.overflow = "hidden";
  }
  const restore = () => {
    restoreStyle.forEach(({
      value,
      el,
      property
    }) => {
      if (value) {
        el.style.setProperty(property, value);
      } else {
        el.style.removeProperty(property);
      }
    });
  };
  return restore;
}
function getHiddenSiblings(container) {
  const hiddenSiblings = [];
  [].forEach.call(container.children, (element) => {
    if (element.getAttribute("aria-hidden") === "true") {
      hiddenSiblings.push(element);
    }
  });
  return hiddenSiblings;
}
var ModalManager = class {
  constructor() {
    this.containers = void 0;
    this.modals = void 0;
    this.modals = [];
    this.containers = [];
  }
  add(modal, container) {
    let modalIndex = this.modals.indexOf(modal);
    if (modalIndex !== -1) {
      return modalIndex;
    }
    modalIndex = this.modals.length;
    this.modals.push(modal);
    if (modal.modalRef) {
      ariaHidden(modal.modalRef, false);
    }
    const hiddenSiblings = getHiddenSiblings(container);
    ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
    const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
    if (containerIndex !== -1) {
      this.containers[containerIndex].modals.push(modal);
      return modalIndex;
    }
    this.containers.push({
      modals: [modal],
      container,
      restore: null,
      hiddenSiblings
    });
    return modalIndex;
  }
  mount(modal, props) {
    const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
    const containerInfo = this.containers[containerIndex];
    if (!containerInfo.restore) {
      containerInfo.restore = handleContainer(containerInfo, props);
    }
  }
  remove(modal, ariaHiddenState = true) {
    const modalIndex = this.modals.indexOf(modal);
    if (modalIndex === -1) {
      return modalIndex;
    }
    const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
    const containerInfo = this.containers[containerIndex];
    containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
    this.modals.splice(modalIndex, 1);
    if (containerInfo.modals.length === 0) {
      if (containerInfo.restore) {
        containerInfo.restore();
      }
      if (modal.modalRef) {
        ariaHidden(modal.modalRef, ariaHiddenState);
      }
      ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
      this.containers.splice(containerIndex, 1);
    } else {
      const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
      if (nextTop.modalRef) {
        ariaHidden(nextTop.modalRef, false);
      }
    }
    return modalIndex;
  }
  isTopModal(modal) {
    return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
  }
};

// node_modules/@mui/base/unstable_useModal/useModal.js
function getContainer2(container) {
  return typeof container === "function" ? container() : container;
}
function getHasTransition(children) {
  return children ? children.props.hasOwnProperty("in") : false;
}
var defaultManager = new ModalManager();
function useModal(parameters) {
  const {
    container,
    disableEscapeKeyDown = false,
    disableScrollLock = false,
    // @ts-ignore internal logic - Base UI supports the manager as a prop too
    manager = defaultManager,
    closeAfterTransition = false,
    onTransitionEnter,
    onTransitionExited,
    children,
    onClose,
    open,
    rootRef
  } = parameters;
  const modal = React55.useRef({});
  const mountNodeRef = React55.useRef(null);
  const modalRef = React55.useRef(null);
  const handleRef = useForkRef2(modalRef, rootRef);
  const [exited, setExited] = React55.useState(!open);
  const hasTransition = getHasTransition(children);
  let ariaHiddenProp = true;
  if (parameters["aria-hidden"] === "false" || parameters["aria-hidden"] === false) {
    ariaHiddenProp = false;
  }
  const getDoc = () => ownerDocument(mountNodeRef.current);
  const getModal = () => {
    modal.current.modalRef = modalRef.current;
    modal.current.mount = mountNodeRef.current;
    return modal.current;
  };
  const handleMounted = () => {
    manager.mount(getModal(), {
      disableScrollLock
    });
    if (modalRef.current) {
      modalRef.current.scrollTop = 0;
    }
  };
  const handleOpen = useEventCallback_default2(() => {
    const resolvedContainer = getContainer2(container) || getDoc().body;
    manager.add(getModal(), resolvedContainer);
    if (modalRef.current) {
      handleMounted();
    }
  });
  const isTopModal = React55.useCallback(() => manager.isTopModal(getModal()), [manager]);
  const handlePortalRef = useEventCallback_default2((node) => {
    mountNodeRef.current = node;
    if (!node) {
      return;
    }
    if (open && isTopModal()) {
      handleMounted();
    } else if (modalRef.current) {
      ariaHidden(modalRef.current, ariaHiddenProp);
    }
  });
  const handleClose = React55.useCallback(() => {
    manager.remove(getModal(), ariaHiddenProp);
  }, [ariaHiddenProp, manager]);
  React55.useEffect(() => {
    return () => {
      handleClose();
    };
  }, [handleClose]);
  React55.useEffect(() => {
    if (open) {
      handleOpen();
    } else if (!hasTransition || !closeAfterTransition) {
      handleClose();
    }
  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
  const createHandleKeyDown = (otherHandlers) => (event) => {
    var _otherHandlers$onKeyD;
    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
    if (event.key !== "Escape" || event.which === 229 || // Wait until IME is settled.
    !isTopModal()) {
      return;
    }
    if (!disableEscapeKeyDown) {
      event.stopPropagation();
      if (onClose) {
        onClose(event, "escapeKeyDown");
      }
    }
  };
  const createHandleBackdropClick = (otherHandlers) => (event) => {
    var _otherHandlers$onClic;
    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
    if (event.target !== event.currentTarget) {
      return;
    }
    if (onClose) {
      onClose(event, "backdropClick");
    }
  };
  const getRootProps = (otherHandlers = {}) => {
    const propsEventHandlers = extractEventHandlers_default(parameters);
    delete propsEventHandlers.onTransitionEnter;
    delete propsEventHandlers.onTransitionExited;
    const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);
    return _extends({
      role: "presentation"
    }, externalEventHandlers, {
      onKeyDown: createHandleKeyDown(externalEventHandlers),
      ref: handleRef
    });
  };
  const getBackdropProps = (otherHandlers = {}) => {
    const externalEventHandlers = otherHandlers;
    return _extends({
      "aria-hidden": true
    }, externalEventHandlers, {
      onClick: createHandleBackdropClick(externalEventHandlers),
      open
    });
  };
  const getTransitionProps = () => {
    const handleEnter = () => {
      setExited(false);
      if (onTransitionEnter) {
        onTransitionEnter();
      }
    };
    const handleExited = () => {
      setExited(true);
      if (onTransitionExited) {
        onTransitionExited();
      }
      if (closeAfterTransition) {
        handleClose();
      }
    };
    return {
      onEnter: createChainedFunction(handleEnter, children == null ? void 0 : children.props.onEnter),
      onExited: createChainedFunction(handleExited, children == null ? void 0 : children.props.onExited)
    };
  };
  return {
    getRootProps,
    getBackdropProps,
    getTransitionProps,
    rootRef: handleRef,
    portalRef: handlePortalRef,
    isTopModal,
    exited,
    hasTransition
  };
}

// node_modules/@mui/base/Modal/modalClasses.js
var COMPONENT_NAME9 = "Modal";
function getModalUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME9, slot);
}
var modalClasses = generateUtilityClasses4(COMPONENT_NAME9, ["root", "hidden", "backdrop"]);

// node_modules/@mui/base/Modal/Modal.js
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
var import_jsx_runtime22 = __toESM(require_jsx_runtime());
var _excluded10 = ["children", "closeAfterTransition", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited", "slotProps", "slots"];
var useUtilityClasses9 = (ownerState) => {
  const {
    open,
    exited
  } = ownerState;
  const slots = {
    root: ["root", !open && exited && "hidden"],
    backdrop: ["backdrop"]
  };
  return composeClasses2(slots, useClassNamesOverride(getModalUtilityClass));
};
var Modal = React56.forwardRef(function Modal2(props, forwardedRef) {
  var _slots$root;
  const {
    children,
    closeAfterTransition = false,
    container,
    disableAutoFocus = false,
    disableEnforceFocus = false,
    disableEscapeKeyDown = false,
    disablePortal = false,
    disableRestoreFocus = false,
    disableScrollLock = false,
    hideBackdrop = false,
    keepMounted = false,
    onBackdropClick,
    open,
    slotProps = {},
    slots = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded10);
  const propsWithDefaults = _extends({}, props, {
    closeAfterTransition,
    disableAutoFocus,
    disableEnforceFocus,
    disableEscapeKeyDown,
    disablePortal,
    disableRestoreFocus,
    disableScrollLock,
    hideBackdrop,
    keepMounted
  });
  const {
    getRootProps,
    getBackdropProps,
    getTransitionProps,
    portalRef,
    isTopModal,
    exited,
    hasTransition
  } = useModal(_extends({}, propsWithDefaults, {
    rootRef: forwardedRef
  }));
  const ownerState = _extends({}, propsWithDefaults, {
    exited,
    hasTransition
  });
  const classes = useUtilityClasses9(ownerState);
  const childProps = {};
  if (children.props.tabIndex === void 0) {
    childProps.tabIndex = "-1";
  }
  if (hasTransition) {
    const {
      onEnter,
      onExited
    } = getTransitionProps();
    childProps.onEnter = onEnter;
    childProps.onExited = onExited;
  }
  const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
  const rootProps = useSlotProps_default({
    elementType: Root,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    getSlotProps: getRootProps,
    className: classes.root,
    ownerState
  });
  const BackdropComponent = slots.backdrop;
  const backdropProps = useSlotProps_default({
    elementType: BackdropComponent,
    externalSlotProps: slotProps.backdrop,
    getSlotProps: (otherHandlers) => {
      return getBackdropProps(_extends({}, otherHandlers, {
        onClick: (e) => {
          if (onBackdropClick) {
            onBackdropClick(e);
          }
          if (otherHandlers != null && otherHandlers.onClick) {
            otherHandlers.onClick(e);
          }
        }
      }));
    },
    className: classes.backdrop,
    ownerState
  });
  if (!keepMounted && !open && (!hasTransition || exited)) {
    return null;
  }
  return (0, import_jsx_runtime21.jsx)(Portal, {
    ref: portalRef,
    container,
    disablePortal,
    children: (0, import_jsx_runtime22.jsxs)(Root, _extends({}, rootProps, {
      children: [!hideBackdrop && BackdropComponent ? (0, import_jsx_runtime21.jsx)(BackdropComponent, _extends({}, backdropProps)) : null, (0, import_jsx_runtime21.jsx)(FocusTrap, {
        disableEnforceFocus,
        disableAutoFocus,
        disableRestoreFocus,
        isEnabled: isTopModal,
        open,
        children: React56.cloneElement(children, childProps)
      })]
    }))
  });
});
true ? Modal.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A single child content element.
   */
  children: elementAcceptingRef_default2.isRequired,
  /**
   * When set to true the Modal waits until a nested Transition is completed before closing.
   * @default false
   */
  closeAfterTransition: import_prop_types16.default.bool,
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: import_prop_types16.default.oneOfType([HTMLElementType2, import_prop_types16.default.func]),
  /**
   * If `true`, the modal will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableAutoFocus: import_prop_types16.default.bool,
  /**
   * If `true`, the modal will not prevent focus from leaving the modal while open.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableEnforceFocus: import_prop_types16.default.bool,
  /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */
  disableEscapeKeyDown: import_prop_types16.default.bool,
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: import_prop_types16.default.bool,
  /**
   * If `true`, the modal will not restore focus to previously focused element once
   * modal is hidden or unmounted.
   * @default false
   */
  disableRestoreFocus: import_prop_types16.default.bool,
  /**
   * Disable the scroll lock behavior.
   * @default false
   */
  disableScrollLock: import_prop_types16.default.bool,
  /**
   * If `true`, the backdrop is not rendered.
   * @default false
   */
  hideBackdrop: import_prop_types16.default.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Modal.
   * @default false
   */
  keepMounted: import_prop_types16.default.bool,
  /**
   * Callback fired when the backdrop is clicked.
   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
   */
  onBackdropClick: import_prop_types16.default.func,
  /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
   */
  onClose: import_prop_types16.default.func,
  /**
   * A function called when a transition enters.
   */
  onTransitionEnter: import_prop_types16.default.func,
  /**
   * A function called when a transition has exited.
   */
  onTransitionExited: import_prop_types16.default.func,
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types16.default.bool.isRequired,
  /**
   * The props used for each slot inside the Modal.
   * @default {}
   */
  slotProps: import_prop_types16.default.shape({
    backdrop: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object]),
    root: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object])
  }),
  /**
   * The components used for each slot inside the Modal.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types16.default.shape({
    backdrop: import_prop_types16.default.elementType,
    root: import_prop_types16.default.elementType
  })
} : void 0;

// node_modules/@mui/base/NoSsr/NoSsr.js
var React57 = __toESM(require_react());
var import_prop_types17 = __toESM(require_prop_types());
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
function NoSsr(props) {
  const {
    children,
    defer = false,
    fallback = null
  } = props;
  const [mountedState, setMountedState] = React57.useState(false);
  useEnhancedEffect_default(() => {
    if (!defer) {
      setMountedState(true);
    }
  }, [defer]);
  React57.useEffect(() => {
    if (defer) {
      setMountedState(true);
    }
  }, [defer]);
  return (0, import_jsx_runtime23.jsx)(React57.Fragment, {
    children: mountedState ? children : fallback
  });
}
true ? NoSsr.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * You can wrap a node.
   */
  children: import_prop_types17.default.node,
  /**
   * If `true`, the component will not only prevent server-side rendering.
   * It will also defer the rendering of the children into a different screen frame.
   * @default false
   */
  defer: import_prop_types17.default.bool,
  /**
   * The fallback content to display.
   * @default null
   */
  fallback: import_prop_types17.default.node
} : void 0;
if (true) {
  NoSsr["propTypes"] = exactProp(NoSsr.propTypes);
}

// node_modules/@mui/base/Unstable_NumberInput/NumberInput.js
var React59 = __toESM(require_react());
var import_prop_types18 = __toESM(require_prop_types());

// node_modules/@mui/base/Unstable_NumberInput/numberInputClasses.js
var COMPONENT_NAME10 = "NumberInput";
function getNumberInputUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME10, slot);
}
var numberInputClasses = generateUtilityClasses4(COMPONENT_NAME10, ["root", "formControl", "focused", "disabled", "readOnly", "error", "input", "incrementButton", "decrementButton", "adornedStart", "adornedEnd"]);

// node_modules/@mui/base/unstable_useNumberInput/useNumberInput.js
var React58 = __toESM(require_react());

// node_modules/@mui/base/unstable_useNumberInput/numberInputAction.types.js
var NumberInputActionTypes = {
  clamp: "numberInput:clamp",
  inputChange: "numberInput:inputChange",
  increment: "numberInput:increment",
  decrement: "numberInput:decrement",
  decrementToMin: "numberInput:decrementToMin",
  incrementToMax: "numberInput:incrementToMax",
  resetInputValue: "numberInput:resetInputValue"
};

// node_modules/@mui/base/unstable_useNumberInput/utils.js
function clampStepwise(val, min2 = Number.MIN_SAFE_INTEGER, max2 = Number.MAX_SAFE_INTEGER, stepProp = NaN) {
  if (Number.isNaN(stepProp)) {
    return clamp_default(val, min2, max2);
  }
  const step = stepProp || 1;
  const remainder = val % step;
  const positivity = Math.sign(remainder);
  if (Math.abs(remainder) > step / 2) {
    return clamp_default(val + positivity * (step - Math.abs(remainder)), min2, max2);
  }
  return clamp_default(val - positivity * Math.abs(remainder), min2, max2);
}
function isNumber(val) {
  return typeof val === "number" && !Number.isNaN(val) && Number.isFinite(val);
}

// node_modules/@mui/base/unstable_useNumberInput/numberInputReducer.js
function getClampedValues(rawValue, context) {
  const {
    min: min2,
    max: max2,
    step
  } = context;
  const clampedValue = rawValue === null ? null : clampStepwise(rawValue, min2, max2, step);
  const newInputValue = clampedValue === null ? "" : String(clampedValue);
  return {
    value: clampedValue,
    inputValue: newInputValue
  };
}
function stepValue(state, context, direction, multiplier) {
  const {
    value
  } = state;
  const {
    step = 1,
    min: min2,
    max: max2
  } = context;
  if (isNumber(value)) {
    return {
      up: value + (step != null ? step : 1) * multiplier,
      down: value - (step != null ? step : 1) * multiplier
    }[direction];
  }
  return {
    up: min2 != null ? min2 : 1,
    down: max2 != null ? max2 : -1
  }[direction];
}
function handleClamp(state, context, inputValue) {
  const {
    getInputValueAsString: getInputValueAsString2
  } = context;
  const numberValueAsString = getInputValueAsString2(inputValue);
  const intermediateValue = numberValueAsString === "" || numberValueAsString === "-" ? null : parseInt(numberValueAsString, 10);
  const clampedValues = getClampedValues(intermediateValue, context);
  return _extends({}, state, clampedValues);
}
function handleInputChange(state, context, inputValue) {
  const {
    getInputValueAsString: getInputValueAsString2
  } = context;
  const numberValueAsString = getInputValueAsString2(inputValue);
  if (numberValueAsString.match(/^-?\d+?$/) || numberValueAsString === "" || numberValueAsString === "-") {
    return _extends({}, state, {
      inputValue: numberValueAsString
    });
  }
  return state;
}
function handleStep(state, context, applyMultiplier, direction) {
  const multiplier = applyMultiplier ? context.shiftMultiplier : 1;
  const newValue = stepValue(state, context, direction, multiplier);
  const clampedValues = getClampedValues(newValue, context);
  return _extends({}, state, clampedValues);
}
function handleToMinOrMax(state, context, to) {
  const newValue = context[to];
  if (!isNumber(newValue)) {
    return state;
  }
  return _extends({}, state, {
    value: newValue,
    inputValue: String(newValue)
  });
}
function numberInputReducer(state, action) {
  const {
    type,
    context
  } = action;
  switch (type) {
    case NumberInputActionTypes.clamp:
      return handleClamp(state, context, action.inputValue);
    case NumberInputActionTypes.inputChange:
      return handleInputChange(state, context, action.inputValue);
    case NumberInputActionTypes.increment:
      return handleStep(state, context, action.applyMultiplier, "up");
    case NumberInputActionTypes.decrement:
      return handleStep(state, context, action.applyMultiplier, "down");
    case NumberInputActionTypes.incrementToMax:
      return handleToMinOrMax(state, context, "max");
    case NumberInputActionTypes.decrementToMin:
      return handleToMinOrMax(state, context, "min");
    case NumberInputActionTypes.resetInputValue:
      return _extends({}, state, {
        inputValue: String(state.value)
      });
    default:
      return state;
  }
}

// node_modules/@mui/base/unstable_useNumberInput/useNumberInput.js
var STEP_KEYS = ["ArrowUp", "ArrowDown", "PageUp", "PageDown"];
var SUPPORTED_KEYS = [...STEP_KEYS, "Home", "End"];
function getInputValueAsString(v) {
  return v ? String(v.trim()) : String(v);
}
function useNumberInput(parameters) {
  var _ref;
  const {
    min: min2,
    max: max2,
    step,
    shiftMultiplier = 10,
    defaultValue: defaultValueProp,
    disabled: disabledProp = false,
    error: errorProp = false,
    onBlur,
    onInputChange,
    onFocus,
    onChange,
    required: requiredProp = false,
    readOnly: readOnlyProp = false,
    value: valueProp,
    inputRef: inputRefProp,
    inputId: inputIdProp,
    componentName = "useNumberInput"
  } = parameters;
  const formControlContext = useFormControlContext();
  const {
    current: isControlled
  } = React58.useRef(valueProp != null);
  const handleInputRefWarning = React58.useCallback((instance) => {
    if (true) {
      if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
        console.error(["MUI: You have provided a `slots.input` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
      }
    }
  }, []);
  const inputRef = React58.useRef(null);
  const handleInputRef = useForkRef2(inputRef, inputRefProp, handleInputRefWarning);
  const inputId = useId2(inputIdProp);
  const [focused, setFocused] = React58.useState(false);
  const handleStateChange = React58.useCallback((event, field, fieldValue, reason) => {
    if (field === "value" && typeof fieldValue !== "string") {
      switch (reason) {
        // only a blur event will dispatch `numberInput:clamp`
        case "numberInput:clamp":
          onChange == null || onChange(event, fieldValue);
          break;
        case "numberInput:increment":
        case "numberInput:decrement":
        case "numberInput:incrementToMax":
        case "numberInput:decrementToMin":
          onChange == null || onChange(event, fieldValue);
          break;
        default:
          break;
      }
    }
  }, [onChange]);
  const numberInputActionContext = React58.useMemo(() => {
    return {
      min: min2,
      max: max2,
      step,
      shiftMultiplier,
      getInputValueAsString
    };
  }, [min2, max2, step, shiftMultiplier]);
  const initialValue = (_ref = valueProp != null ? valueProp : defaultValueProp) != null ? _ref : null;
  const initialState = {
    value: initialValue,
    inputValue: initialValue ? String(initialValue) : ""
  };
  const controlledState = React58.useMemo(() => ({
    value: valueProp
  }), [valueProp]);
  const [state, dispatch] = useControllableReducer({
    reducer: numberInputReducer,
    controlledProps: controlledState,
    initialState,
    onStateChange: handleStateChange,
    actionContext: React58.useMemo(() => numberInputActionContext, [numberInputActionContext]),
    componentName
  });
  const {
    value,
    inputValue
  } = state;
  React58.useEffect(() => {
    if (!formControlContext && disabledProp && focused) {
      setFocused(false);
      onBlur == null || onBlur();
    }
  }, [formControlContext, disabledProp, focused, onBlur]);
  React58.useEffect(() => {
    if (isControlled && isNumber(value)) {
      dispatch({
        type: NumberInputActionTypes.resetInputValue
      });
    }
  }, [value, dispatch, isControlled]);
  const createHandleFocus = (otherHandlers) => (event) => {
    var _otherHandlers$onFocu;
    (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);
    if (event.defaultMuiPrevented || event.defaultPrevented) {
      return;
    }
    if (formControlContext && formControlContext.onFocus) {
      var _formControlContext$o;
      formControlContext == null || (_formControlContext$o = formControlContext.onFocus) == null || _formControlContext$o.call(formControlContext);
    }
    setFocused(true);
  };
  const createHandleInputChange = (otherHandlers) => (event) => {
    var _formControlContext$o2, _otherHandlers$onInpu;
    if (!isControlled && event.target === null) {
      throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \`slots.input\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : formatMuiErrorMessage(17));
    }
    formControlContext == null || (_formControlContext$o2 = formControlContext.onChange) == null || _formControlContext$o2.call(formControlContext, event);
    (_otherHandlers$onInpu = otherHandlers.onInputChange) == null || _otherHandlers$onInpu.call(otherHandlers, event);
    if (event.defaultMuiPrevented || event.defaultPrevented) {
      return;
    }
    dispatch({
      type: NumberInputActionTypes.inputChange,
      event,
      inputValue: event.currentTarget.value
    });
  };
  const createHandleBlur = (otherHandlers) => (event) => {
    var _otherHandlers$onBlur;
    formControlContext == null || formControlContext.onBlur();
    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
    if (event.defaultMuiPrevented || event.defaultPrevented) {
      return;
    }
    dispatch({
      type: NumberInputActionTypes.clamp,
      event,
      inputValue: event.currentTarget.value
    });
    setFocused(false);
  };
  const createHandleClick = (otherHandlers) => (event) => {
    var _otherHandlers$onClic;
    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
    if (event.defaultMuiPrevented || event.defaultPrevented) {
      return;
    }
    if (inputRef.current && event.currentTarget === event.target) {
      inputRef.current.focus();
    }
  };
  const handleStep2 = (direction) => (event) => {
    const applyMultiplier = Boolean(event.shiftKey);
    const actionType = {
      up: NumberInputActionTypes.increment,
      down: NumberInputActionTypes.decrement
    }[direction];
    dispatch({
      type: actionType,
      event,
      applyMultiplier
    });
  };
  const createHandleKeyDown = (otherHandlers) => (event) => {
    var _otherHandlers$onKeyD;
    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
    if (event.defaultMuiPrevented || event.defaultPrevented) {
      return;
    }
    if (SUPPORTED_KEYS.includes(event.key)) {
      event.preventDefault();
    }
    switch (event.key) {
      case "ArrowUp":
        dispatch({
          type: NumberInputActionTypes.increment,
          event,
          applyMultiplier: !!event.shiftKey
        });
        break;
      case "ArrowDown":
        dispatch({
          type: NumberInputActionTypes.decrement,
          event,
          applyMultiplier: !!event.shiftKey
        });
        break;
      case "PageUp":
        dispatch({
          type: NumberInputActionTypes.increment,
          event,
          applyMultiplier: true
        });
        break;
      case "PageDown":
        dispatch({
          type: NumberInputActionTypes.decrement,
          event,
          applyMultiplier: true
        });
        break;
      case "Home":
        dispatch({
          type: NumberInputActionTypes.incrementToMax,
          event
        });
        break;
      case "End":
        dispatch({
          type: NumberInputActionTypes.decrementToMin,
          event
        });
        break;
      default:
        break;
    }
  };
  const getRootProps = (externalProps = {}) => {
    const propsEventHandlers = extractEventHandlers_default(parameters, [
      // these are handled by the input slot
      "onBlur",
      "onInputChange",
      "onFocus",
      "onChange"
    ]);
    const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers_default(externalProps));
    return _extends({}, externalProps, externalEventHandlers, {
      onClick: createHandleClick(externalEventHandlers)
    });
  };
  const getInputProps = (externalProps = {}) => {
    var _ref2;
    const propsEventHandlers = {
      onBlur,
      onFocus,
      // onChange from normal props is the custom onChange so we ignore it here
      onChange: onInputChange
    };
    const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers_default(externalProps, [
      // onClick is handled by the root slot
      "onClick"
      // do not ignore 'onInputChange', we want slotProps.input.onInputChange to enter the DOM and throw
    ]));
    const mergedEventHandlers = _extends({}, externalEventHandlers, {
      onFocus: createHandleFocus(externalEventHandlers),
      // slotProps.onChange is renamed to onInputChange and passed to createHandleInputChange
      onChange: createHandleInputChange(_extends({}, externalEventHandlers, {
        onInputChange: externalEventHandlers.onChange
      })),
      onBlur: createHandleBlur(externalEventHandlers),
      onKeyDown: createHandleKeyDown(externalEventHandlers)
    });
    const displayValue = (_ref2 = focused ? inputValue : value) != null ? _ref2 : "";
    delete externalProps.onInputChange;
    return _extends({
      type: "text",
      id: inputId,
      "aria-invalid": errorProp || void 0,
      defaultValue: void 0,
      value: displayValue,
      "aria-valuenow": displayValue,
      "aria-valuetext": String(displayValue),
      "aria-valuemin": min2,
      "aria-valuemax": max2,
      autoComplete: "off",
      autoCorrect: "off",
      spellCheck: "false",
      required: requiredProp,
      readOnly: readOnlyProp,
      "aria-disabled": disabledProp,
      disabled: disabledProp
    }, externalProps, {
      ref: handleInputRef
    }, mergedEventHandlers);
  };
  const handleStepperButtonMouseDown = (event) => {
    event.preventDefault();
    if (inputRef.current) {
      inputRef.current.focus();
    }
  };
  const stepperButtonCommonProps = {
    "aria-controls": inputId,
    tabIndex: -1
  };
  const isIncrementDisabled = disabledProp || (isNumber(value) ? value >= (max2 != null ? max2 : Number.MAX_SAFE_INTEGER) : false);
  const getIncrementButtonProps = (externalProps = {}) => {
    return _extends({}, externalProps, stepperButtonCommonProps, {
      disabled: isIncrementDisabled,
      "aria-disabled": isIncrementDisabled,
      onMouseDown: handleStepperButtonMouseDown,
      onClick: handleStep2("up")
    });
  };
  const isDecrementDisabled = disabledProp || (isNumber(value) ? value <= (min2 != null ? min2 : Number.MIN_SAFE_INTEGER) : false);
  const getDecrementButtonProps = (externalProps = {}) => {
    return _extends({}, externalProps, stepperButtonCommonProps, {
      disabled: isDecrementDisabled,
      "aria-disabled": isDecrementDisabled,
      onMouseDown: handleStepperButtonMouseDown,
      onClick: handleStep2("down")
    });
  };
  return {
    disabled: disabledProp,
    error: errorProp,
    focused,
    formControlContext,
    getInputProps,
    getIncrementButtonProps,
    getDecrementButtonProps,
    getRootProps,
    required: requiredProp,
    value,
    inputValue,
    isIncrementDisabled,
    isDecrementDisabled
  };
}

// node_modules/@mui/base/Unstable_NumberInput/NumberInput.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
var _excluded11 = ["className", "defaultValue", "disabled", "endAdornment", "error", "id", "max", "min", "onBlur", "onInputChange", "onFocus", "onChange", "placeholder", "required", "readOnly", "shiftMultiplier", "startAdornment", "step", "value", "slotProps", "slots"];
var useUtilityClasses10 = (ownerState) => {
  const {
    disabled,
    error,
    focused,
    readOnly,
    formControlContext,
    isIncrementDisabled,
    isDecrementDisabled,
    startAdornment,
    endAdornment
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", error && "error", focused && "focused", readOnly && "readOnly", Boolean(formControlContext) && "formControl", Boolean(startAdornment) && "adornedStart", Boolean(endAdornment) && "adornedEnd"],
    input: ["input", disabled && "disabled", readOnly && "readOnly"],
    incrementButton: ["incrementButton", isIncrementDisabled && "disabled"],
    decrementButton: ["decrementButton", isDecrementDisabled && "disabled"]
  };
  return composeClasses2(slots, useClassNamesOverride(getNumberInputUtilityClass));
};
var NumberInput = React59.forwardRef(function NumberInput2(props, forwardedRef) {
  var _slots$root, _slots$input, _slots$incrementButto, _slots$decrementButto;
  const {
    className,
    defaultValue,
    disabled,
    endAdornment,
    error,
    id,
    max: max2,
    min: min2,
    onBlur,
    onInputChange,
    onFocus,
    onChange,
    placeholder,
    required,
    readOnly = false,
    shiftMultiplier,
    startAdornment,
    step,
    value,
    slotProps = {},
    slots = {}
  } = props, rest = _objectWithoutPropertiesLoose(props, _excluded11);
  const {
    getRootProps,
    getInputProps,
    getIncrementButtonProps,
    getDecrementButtonProps,
    focused,
    error: errorState,
    disabled: disabledState,
    formControlContext,
    isIncrementDisabled,
    isDecrementDisabled
  } = useNumberInput({
    min: min2,
    max: max2,
    step,
    shiftMultiplier,
    defaultValue,
    disabled,
    error,
    onFocus,
    onInputChange,
    onBlur,
    onChange,
    required,
    readOnly,
    value,
    inputId: id,
    componentName: "NumberInput"
  });
  const ownerState = _extends({}, props, {
    disabled: disabledState,
    error: errorState,
    focused,
    readOnly,
    formControlContext,
    isIncrementDisabled,
    isDecrementDisabled
  });
  const classes = useUtilityClasses10(ownerState);
  const propsForwardedToInputSlot = {
    placeholder
  };
  const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
  const rootProps = useSlotProps_default({
    elementType: Root,
    getSlotProps: getRootProps,
    externalSlotProps: slotProps.root,
    externalForwardedProps: rest,
    additionalProps: {
      ref: forwardedRef
    },
    ownerState,
    className: [classes.root, className]
  });
  const Input5 = (_slots$input = slots.input) != null ? _slots$input : "input";
  const inputProps = useSlotProps_default({
    elementType: Input5,
    getSlotProps: (otherHandlers) => getInputProps(_extends({}, propsForwardedToInputSlot, otherHandlers)),
    externalSlotProps: slotProps.input,
    ownerState,
    className: classes.input
  });
  const IncrementButton = (_slots$incrementButto = slots.incrementButton) != null ? _slots$incrementButto : "button";
  const incrementButtonProps = useSlotProps_default({
    elementType: IncrementButton,
    getSlotProps: getIncrementButtonProps,
    externalSlotProps: slotProps.incrementButton,
    ownerState,
    className: classes.incrementButton
  });
  const DecrementButton = (_slots$decrementButto = slots.decrementButton) != null ? _slots$decrementButto : "button";
  const decrementButtonProps = useSlotProps_default({
    elementType: DecrementButton,
    getSlotProps: getDecrementButtonProps,
    externalSlotProps: slotProps.decrementButton,
    ownerState,
    className: classes.decrementButton
  });
  return (0, import_jsx_runtime25.jsxs)(Root, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime24.jsx)(DecrementButton, _extends({}, decrementButtonProps)), (0, import_jsx_runtime24.jsx)(IncrementButton, _extends({}, incrementButtonProps)), startAdornment, (0, import_jsx_runtime24.jsx)(Input5, _extends({}, inputProps)), endAdornment]
  }));
});
true ? NumberInput.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types18.default.node,
  /**
   * @ignore
   */
  className: import_prop_types18.default.string,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: import_prop_types18.default.number,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: import_prop_types18.default.bool,
  /**
   * Trailing adornment for this input.
   */
  endAdornment: import_prop_types18.default.node,
  /**
   * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `baseui--error` class on the root element.
   */
  error: import_prop_types18.default.bool,
  /**
   * The id of the `input` element.
   */
  id: import_prop_types18.default.string,
  /**
   * The maximum value.
   */
  max: import_prop_types18.default.number,
  /**
   * The minimum value.
   */
  min: import_prop_types18.default.number,
  /**
   * @ignore
   */
  onBlur: import_prop_types18.default.func,
  /**
   * Callback fired after the value is clamped and changes - when the `input` is blurred or when
   * the stepper buttons are triggered.
   * Called with `undefined` when the value is unset.
   *
   * @param {React.FocusEvent<HTMLInputElement>|React.PointerEvent|React.KeyboardEvent} event The event source of the callback
   * @param {number|undefined} value The new value of the component
   */
  onChange: import_prop_types18.default.func,
  /**
   * @ignore
   */
  onFocus: import_prop_types18.default.func,
  /**
   * Callback fired when the `input` value changes after each keypress, before clamping is applied.
   * Note that `event.target.value` may contain values that fall outside of `min` and `max` or
   * are otherwise "invalid".
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   */
  onInputChange: import_prop_types18.default.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: import_prop_types18.default.string,
  /**
   * If `true`, the `input` element becomes read-only. The stepper buttons remain active,
   * with the addition that they are now keyboard focusable.
   * @default false
   */
  readOnly: import_prop_types18.default.bool,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: import_prop_types18.default.bool,
  /**
   * Multiplier applied to `step` if the shift key is held while incrementing
   * or decrementing the value. Defaults to `10`.
   */
  shiftMultiplier: import_prop_types18.default.number,
  /**
   * The props used for each slot inside the NumberInput.
   * @default {}
   */
  slotProps: import_prop_types18.default.shape({
    decrementButton: import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object]),
    incrementButton: import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object]),
    input: import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object]),
    root: import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object])
  }),
  /**
   * The components used for each slot inside the InputBase.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types18.default.shape({
    decrementButton: import_prop_types18.default.elementType,
    incrementButton: import_prop_types18.default.elementType,
    input: import_prop_types18.default.elementType,
    root: import_prop_types18.default.elementType
  }),
  /**
   * Leading adornment for this input.
   */
  startAdornment: import_prop_types18.default.node,
  /**
   * The amount that the value changes on each increment or decrement.
   */
  step: import_prop_types18.default.number,
  /**
   * The current value. Use when the component is controlled.
   * @default null
   */
  value: import_prop_types18.default.number
} : void 0;

// node_modules/@mui/base/OptionGroup/OptionGroup.js
var React60 = __toESM(require_react());
var import_prop_types19 = __toESM(require_prop_types());

// node_modules/@mui/base/OptionGroup/optionGroupClasses.js
var COMPONENT_NAME11 = "OptionGroup";
function getOptionGroupUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME11, slot);
}
var optionGroupClasses = generateUtilityClasses4(COMPONENT_NAME11, ["root", "disabled", "label", "list"]);

// node_modules/@mui/base/OptionGroup/OptionGroup.js
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
var _excluded12 = ["disabled", "slotProps", "slots"];
function useUtilityClasses11(disabled) {
  const slots = {
    root: ["root", disabled && "disabled"],
    label: ["label"],
    list: ["list"]
  };
  return composeClasses2(slots, useClassNamesOverride(getOptionGroupUtilityClass));
}
var OptionGroup = React60.forwardRef(function OptionGroup2(props, forwardedRef) {
  const {
    disabled = false,
    slotProps = {},
    slots = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded12);
  const Root = (slots == null ? void 0 : slots.root) || "li";
  const Label = (slots == null ? void 0 : slots.label) || "span";
  const List3 = (slots == null ? void 0 : slots.list) || "ul";
  const classes = useUtilityClasses11(disabled);
  const rootProps = useSlotProps_default({
    elementType: Root,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      ref: forwardedRef
    },
    ownerState: props,
    className: classes.root
  });
  const labelProps = useSlotProps_default({
    elementType: Label,
    externalSlotProps: slotProps.label,
    ownerState: props,
    className: classes.label
  });
  const listProps = useSlotProps_default({
    elementType: List3,
    externalSlotProps: slotProps.list,
    ownerState: props,
    className: classes.list
  });
  return (0, import_jsx_runtime27.jsxs)(Root, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime26.jsx)(Label, _extends({}, labelProps, {
      children: props.label
    })), (0, import_jsx_runtime26.jsx)(List3, _extends({}, listProps, {
      children: props.children
    }))]
  }));
});
true ? OptionGroup.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types19.default.node,
  /**
   * @ignore
   */
  className: import_prop_types19.default.string,
  /**
   * If `true` all the options in the group will be disabled.
   * @default false
   */
  disabled: import_prop_types19.default.bool,
  /**
   * The human-readable description of the group.
   */
  label: import_prop_types19.default.node,
  /**
   * The props used for each slot inside the Input.
   * @default {}
   */
  slotProps: import_prop_types19.default.shape({
    label: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]),
    list: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]),
    root: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object])
  }),
  /**
   * The components used for each slot inside the OptionGroup.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types19.default.shape({
    label: import_prop_types19.default.elementType,
    list: import_prop_types19.default.elementType,
    root: import_prop_types19.default.elementType
  })
} : void 0;

// node_modules/@mui/base/Option/Option.js
var React63 = __toESM(require_react());
var import_prop_types20 = __toESM(require_prop_types());

// node_modules/@mui/base/Option/optionClasses.js
var COMPONENT_NAME12 = "Option";
function getOptionUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME12, slot);
}
var optionClasses = generateUtilityClasses4(COMPONENT_NAME12, ["root", "disabled", "selected", "highlighted"]);

// node_modules/@mui/base/useOption/useOption.js
var React61 = __toESM(require_react());
function useOption(params) {
  const {
    value,
    label,
    disabled,
    rootRef: optionRefParam,
    id: idParam
  } = params;
  const {
    getRootProps: getListItemProps,
    highlighted,
    selected
  } = useListItem({
    item: value
  });
  const {
    getRootProps: getButtonProps,
    rootRef: buttonRefHandler
  } = useButton({
    disabled,
    focusableWhenDisabled: true
  });
  const id = useId2(idParam);
  const optionRef = React61.useRef(null);
  const selectOption = React61.useMemo(() => ({
    disabled,
    label,
    value,
    ref: optionRef,
    id
  }), [disabled, label, value, id]);
  const {
    index: index2
  } = useCompoundItem(value, selectOption);
  const handleRef = useForkRef2(optionRefParam, optionRef, buttonRefHandler);
  const createHandleKeyDown = (otherHandlers) => (event) => {
    var _otherHandlers$onKeyD;
    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
    if (event.defaultMuiPrevented) {
      return;
    }
    if ([" ", "Enter"].includes(event.key)) {
      event.defaultMuiPrevented = true;
    }
  };
  const getOwnHandlers = (otherHandlers = {}) => ({
    onKeyDown: createHandleKeyDown(otherHandlers)
  });
  return {
    getRootProps: (externalProps = {}) => {
      const externalEventHandlers = extractEventHandlers_default(externalProps);
      const getCombinedRootProps = combineHooksSlotProps(getListItemProps, combineHooksSlotProps(getButtonProps, getOwnHandlers));
      return _extends({}, externalProps, externalEventHandlers, getCombinedRootProps(externalEventHandlers), {
        id,
        ref: handleRef,
        role: "option",
        "aria-selected": selected
      });
    },
    highlighted,
    index: index2,
    selected,
    rootRef: handleRef
  };
}

// node_modules/@mui/base/useOption/useOptionContextStabilizer.js
var React62 = __toESM(require_react());
function useOptionContextStabilizer(value) {
  const listContext = React62.useContext(ListContext);
  if (!listContext) {
    throw new Error("Option: ListContext was not found.");
  }
  const {
    getItemState,
    dispatch
  } = listContext;
  const {
    highlighted,
    selected,
    focusable
  } = getItemState(value);
  const localGetItemState = React62.useCallback((itemValue) => {
    if (itemValue !== value) {
      throw new Error(["Base UI Option: Tried to access the state of another Option.", "This is unsupported when the Option uses the OptionContextStabilizer as a performance optimization."].join("/n"));
    }
    return {
      highlighted,
      selected,
      focusable
    };
  }, [highlighted, selected, focusable, value]);
  const localContextValue = React62.useMemo(() => ({
    dispatch,
    getItemState: localGetItemState
  }), [dispatch, localGetItemState]);
  return {
    contextValue: localContextValue
  };
}

// node_modules/@mui/base/Option/Option.js
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
var _excluded13 = ["children", "disabled", "label", "slotProps", "slots", "value"];
function useUtilityClasses12(ownerState) {
  const {
    disabled,
    highlighted,
    selected
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", highlighted && "highlighted", selected && "selected"]
  };
  return composeClasses2(slots, useClassNamesOverride(getOptionUtilityClass));
}
var InnerOption = React63.memo(React63.forwardRef(function Option(props, forwardedRef) {
  var _slots$root, _optionRef$current;
  const {
    children,
    disabled = false,
    label,
    slotProps = {},
    slots = {},
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded13);
  const Root = (_slots$root = slots.root) != null ? _slots$root : "li";
  const optionRef = React63.useRef(null);
  const combinedRef = useForkRef2(optionRef, forwardedRef);
  const computedLabel = label != null ? label : typeof children === "string" ? children : (_optionRef$current = optionRef.current) == null || (_optionRef$current = _optionRef$current.textContent) == null ? void 0 : _optionRef$current.trim();
  const {
    getRootProps,
    selected,
    highlighted,
    index: index2
  } = useOption({
    disabled,
    label: computedLabel,
    rootRef: combinedRef,
    value
  });
  const ownerState = _extends({}, props, {
    disabled,
    highlighted,
    index: index2,
    selected
  });
  const classes = useUtilityClasses12(ownerState);
  const rootProps = useSlotProps_default({
    getSlotProps: getRootProps,
    elementType: Root,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime28.jsx)(Root, _extends({}, rootProps, {
    children
  }));
}));
var Option2 = React63.forwardRef(function Option3(props, ref) {
  const {
    value
  } = props;
  const {
    contextValue
  } = useOptionContextStabilizer(value);
  return (0, import_jsx_runtime28.jsx)(ListContext.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime28.jsx)(InnerOption, _extends({}, props, {
      ref
    }))
  });
});
true ? Option2.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types20.default.node,
  /**
   * @ignore
   */
  className: import_prop_types20.default.string,
  /**
   * If `true`, the option will be disabled.
   * @default false
   */
  disabled: import_prop_types20.default.bool,
  /**
   * A text representation of the option's content.
   * Used for keyboard text navigation matching.
   */
  label: import_prop_types20.default.string,
  /**
   * The props used for each slot inside the Option.
   * @default {}
   */
  slotProps: import_prop_types20.default.shape({
    root: import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object])
  }),
  /**
   * The components used for each slot inside the Option.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types20.default.shape({
    root: import_prop_types20.default.elementType
  }),
  /**
   * The value of the option.
   */
  value: import_prop_types20.default.any.isRequired
} : void 0;

// node_modules/@mui/base/Popper/Popper.js
var React64 = __toESM(require_react());
var import_prop_types21 = __toESM(require_prop_types());

// node_modules/@mui/base/Popper/popperClasses.js
var COMPONENT_NAME13 = "Popper";
function getPopperUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME13, slot);
}
var popperClasses = generateUtilityClasses4(COMPONENT_NAME13, ["root"]);

// node_modules/@mui/base/Popper/Popper.js
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
var _excluded14 = ["anchorEl", "children", "direction", "disablePortal", "modifiers", "open", "placement", "popperOptions", "popperRef", "slotProps", "slots", "TransitionProps", "ownerState"];
var _excluded22 = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition", "slotProps", "slots"];
function flipPlacement(placement, direction) {
  if (direction === "ltr") {
    return placement;
  }
  switch (placement) {
    case "bottom-end":
      return "bottom-start";
    case "bottom-start":
      return "bottom-end";
    case "top-end":
      return "top-start";
    case "top-start":
      return "top-end";
    default:
      return placement;
  }
}
function resolveAnchorEl(anchorEl) {
  return typeof anchorEl === "function" ? anchorEl() : anchorEl;
}
function isHTMLElement2(element) {
  return element.nodeType !== void 0;
}
function isVirtualElement(element) {
  return !isHTMLElement2(element);
}
var useUtilityClasses13 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses2(slots, useClassNamesOverride(getPopperUtilityClass));
};
var defaultPopperOptions = {};
var PopperTooltip = React64.forwardRef(function PopperTooltip2(props, forwardedRef) {
  var _slots$root;
  const {
    anchorEl,
    children,
    direction,
    disablePortal,
    modifiers,
    open,
    placement: initialPlacement,
    popperOptions,
    popperRef: popperRefProp,
    slotProps = {},
    slots = {},
    TransitionProps
    // @ts-ignore internal logic
    // prevent from spreading to DOM, it can come from the parent component e.g. Select.
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded14);
  const tooltipRef = React64.useRef(null);
  const ownRef = useForkRef2(tooltipRef, forwardedRef);
  const popperRef = React64.useRef(null);
  const handlePopperRef = useForkRef2(popperRef, popperRefProp);
  const handlePopperRefRef = React64.useRef(handlePopperRef);
  useEnhancedEffect_default(() => {
    handlePopperRefRef.current = handlePopperRef;
  }, [handlePopperRef]);
  React64.useImperativeHandle(popperRefProp, () => popperRef.current, []);
  const rtlPlacement = flipPlacement(initialPlacement, direction);
  const [placement, setPlacement] = React64.useState(rtlPlacement);
  const [resolvedAnchorElement, setResolvedAnchorElement] = React64.useState(resolveAnchorEl(anchorEl));
  React64.useEffect(() => {
    if (popperRef.current) {
      popperRef.current.forceUpdate();
    }
  });
  React64.useEffect(() => {
    if (anchorEl) {
      setResolvedAnchorElement(resolveAnchorEl(anchorEl));
    }
  }, [anchorEl]);
  useEnhancedEffect_default(() => {
    if (!resolvedAnchorElement || !open) {
      return void 0;
    }
    const handlePopperUpdate = (data) => {
      setPlacement(data.placement);
    };
    if (true) {
      if (resolvedAnchorElement && isHTMLElement2(resolvedAnchorElement) && resolvedAnchorElement.nodeType === 1) {
        const box = resolvedAnchorElement.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      }
    }
    let popperModifiers = [{
      name: "preventOverflow",
      options: {
        altBoundary: disablePortal
      }
    }, {
      name: "flip",
      options: {
        altBoundary: disablePortal
      }
    }, {
      name: "onUpdate",
      enabled: true,
      phase: "afterWrite",
      fn: ({
        state
      }) => {
        handlePopperUpdate(state);
      }
    }];
    if (modifiers != null) {
      popperModifiers = popperModifiers.concat(modifiers);
    }
    if (popperOptions && popperOptions.modifiers != null) {
      popperModifiers = popperModifiers.concat(popperOptions.modifiers);
    }
    const popper = createPopper(resolvedAnchorElement, tooltipRef.current, _extends({
      placement: rtlPlacement
    }, popperOptions, {
      modifiers: popperModifiers
    }));
    handlePopperRefRef.current(popper);
    return () => {
      popper.destroy();
      handlePopperRefRef.current(null);
    };
  }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
  const childProps = {
    placement
  };
  if (TransitionProps !== null) {
    childProps.TransitionProps = TransitionProps;
  }
  const classes = useUtilityClasses13();
  const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
  const rootProps = useSlotProps_default({
    elementType: Root,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      role: "tooltip",
      ref: ownRef
    },
    ownerState: props,
    className: classes.root
  });
  return (0, import_jsx_runtime29.jsx)(Root, _extends({}, rootProps, {
    children: typeof children === "function" ? children(childProps) : children
  }));
});
var Popper = React64.forwardRef(function Popper2(props, forwardedRef) {
  const {
    anchorEl,
    children,
    container: containerProp,
    direction = "ltr",
    disablePortal = false,
    keepMounted = false,
    modifiers,
    open,
    placement = "bottom",
    popperOptions = defaultPopperOptions,
    popperRef,
    style,
    transition = false,
    slotProps = {},
    slots = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded22);
  const [exited, setExited] = React64.useState(true);
  const handleEnter = () => {
    setExited(false);
  };
  const handleExited = () => {
    setExited(true);
  };
  if (!keepMounted && !open && (!transition || exited)) {
    return null;
  }
  let container;
  if (containerProp) {
    container = containerProp;
  } else if (anchorEl) {
    const resolvedAnchorEl = resolveAnchorEl(anchorEl);
    container = resolvedAnchorEl && isHTMLElement2(resolvedAnchorEl) ? ownerDocument(resolvedAnchorEl).body : ownerDocument(null).body;
  }
  const display = !open && keepMounted && (!transition || exited) ? "none" : void 0;
  const transitionProps = transition ? {
    in: open,
    onEnter: handleEnter,
    onExited: handleExited
  } : void 0;
  return (0, import_jsx_runtime29.jsx)(Portal, {
    disablePortal,
    container,
    children: (0, import_jsx_runtime29.jsx)(PopperTooltip, _extends({
      anchorEl,
      direction,
      disablePortal,
      modifiers,
      ref: forwardedRef,
      open: transition ? !exited : open,
      placement,
      popperOptions,
      popperRef,
      slotProps,
      slots
    }, other, {
      style: _extends({
        // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
        position: "fixed",
        // Fix Popper.js display issue
        top: 0,
        left: 0,
        display
      }, style),
      TransitionProps: transitionProps,
      children
    }))
  });
});
true ? Popper.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */
  anchorEl: chainPropTypes2(import_prop_types21.default.oneOfType([HTMLElementType2, import_prop_types21.default.object, import_prop_types21.default.func]), (props) => {
    if (props.open) {
      const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
      if (resolvedAnchorEl && isHTMLElement2(resolvedAnchorEl) && resolvedAnchorEl.nodeType === 1) {
        const box = resolvedAnchorEl.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== "function" || isVirtualElement(resolvedAnchorEl) && resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
        return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join("\n"));
      }
    }
    return null;
  }),
  /**
   * Popper render function or node.
   */
  children: import_prop_types21.default.oneOfType([import_prop_types21.default.node, import_prop_types21.default.func]),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: import_prop_types21.default.oneOfType([HTMLElementType2, import_prop_types21.default.func]),
  /**
   * Direction of the text.
   * @default 'ltr'
   */
  direction: import_prop_types21.default.oneOf(["ltr", "rtl"]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: import_prop_types21.default.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: import_prop_types21.default.bool,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: import_prop_types21.default.arrayOf(import_prop_types21.default.shape({
    data: import_prop_types21.default.object,
    effect: import_prop_types21.default.func,
    enabled: import_prop_types21.default.bool,
    fn: import_prop_types21.default.func,
    name: import_prop_types21.default.any,
    options: import_prop_types21.default.object,
    phase: import_prop_types21.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: import_prop_types21.default.arrayOf(import_prop_types21.default.string),
    requiresIfExists: import_prop_types21.default.arrayOf(import_prop_types21.default.string)
  })),
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types21.default.bool.isRequired,
  /**
   * Popper placement.
   * @default 'bottom'
   */
  placement: import_prop_types21.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */
  popperOptions: import_prop_types21.default.shape({
    modifiers: import_prop_types21.default.array,
    onFirstUpdate: import_prop_types21.default.func,
    placement: import_prop_types21.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    strategy: import_prop_types21.default.oneOf(["absolute", "fixed"])
  }),
  /**
   * A ref that points to the used popper instance.
   */
  popperRef: refType_default2,
  /**
   * The props used for each slot inside the Popper.
   * @default {}
   */
  slotProps: import_prop_types21.default.shape({
    root: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object])
  }),
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types21.default.shape({
    root: import_prop_types21.default.elementType
  }),
  /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */
  transition: import_prop_types21.default.bool
} : void 0;

// node_modules/@mui/base/Select/Select.js
var React67 = __toESM(require_react());
var import_prop_types22 = __toESM(require_prop_types());

// node_modules/@mui/base/useSelect/useSelect.js
var React65 = __toESM(require_react());

// node_modules/@mui/base/useSelect/useSelect.types.js
var SelectActionTypes = {
  buttonClick: "buttonClick",
  browserAutoFill: "browserAutoFill"
};

// node_modules/@mui/base/useSelect/defaultOptionStringifier.js
var defaultOptionStringifier = (option) => {
  const {
    label,
    value
  } = option;
  if (typeof label === "string") {
    return label;
  }
  if (typeof value === "string") {
    return value;
  }
  return String(option);
};

// node_modules/@mui/base/useSelect/selectReducer.js
function selectReducer(state, action) {
  const {
    open
  } = state;
  const {
    context: {
      selectionMode
    }
  } = action;
  if (action.type === SelectActionTypes.buttonClick) {
    var _state$selectedValues;
    const itemToHighlight = (_state$selectedValues = state.selectedValues[0]) != null ? _state$selectedValues : moveHighlight(null, "start", action.context);
    return _extends({}, state, {
      open: !open,
      highlightedValue: !open ? itemToHighlight : null
    });
  }
  if (action.type === SelectActionTypes.browserAutoFill) {
    return handleItemSelection(action.item, state, action.context);
  }
  const newState = listReducer(state, action);
  switch (action.type) {
    case ListActionTypes.keyDown:
      if (state.open) {
        if (action.event.key === "Escape") {
          return _extends({}, newState, {
            open: false
          });
        }
      } else {
        if (action.event.key === "ArrowDown") {
          var _state$selectedValues2;
          return _extends({}, state, {
            open: true,
            highlightedValue: (_state$selectedValues2 = state.selectedValues[0]) != null ? _state$selectedValues2 : moveHighlight(null, "start", action.context)
          });
        }
        if (action.event.key === "ArrowUp") {
          var _state$selectedValues3;
          return _extends({}, state, {
            open: true,
            highlightedValue: (_state$selectedValues3 = state.selectedValues[0]) != null ? _state$selectedValues3 : moveHighlight(null, "end", action.context)
          });
        }
      }
      break;
    case ListActionTypes.itemClick:
      if (selectionMode === "single") {
        return _extends({}, newState, {
          open: false
        });
      }
      break;
    case ListActionTypes.blur:
      return _extends({}, newState, {
        open: false
      });
    default:
      return newState;
  }
  return newState;
}

// node_modules/@mui/base/useSelect/useSelect.js
function defaultFormValueProvider(selectedOption) {
  if (Array.isArray(selectedOption)) {
    if (selectedOption.length === 0) {
      return "";
    }
    return JSON.stringify(selectedOption.map((o) => o.value));
  }
  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {
    return "";
  }
  if (typeof selectedOption.value === "string" || typeof selectedOption.value === "number") {
    return selectedOption.value;
  }
  return JSON.stringify(selectedOption.value);
}
function useSelect(props) {
  const {
    areOptionsEqual,
    buttonRef: buttonRefProp,
    defaultOpen = false,
    defaultValue: defaultValueProp,
    disabled = false,
    listboxId: listboxIdProp,
    listboxRef: listboxRefProp,
    multiple = false,
    name,
    required,
    onChange,
    onHighlightChange,
    onOpenChange,
    open: openProp,
    options: optionsParam,
    getOptionAsString = defaultOptionStringifier,
    getSerializedValue = defaultFormValueProvider,
    value: valueProp,
    componentName = "useSelect"
  } = props;
  const buttonRef = React65.useRef(null);
  const handleButtonRef = useForkRef2(buttonRefProp, buttonRef);
  const listboxRef = React65.useRef(null);
  const listboxId = useId2(listboxIdProp);
  let defaultValue;
  if (valueProp === void 0 && defaultValueProp === void 0) {
    defaultValue = [];
  } else if (defaultValueProp !== void 0) {
    if (multiple) {
      defaultValue = defaultValueProp;
    } else {
      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];
    }
  }
  const value = React65.useMemo(() => {
    if (valueProp !== void 0) {
      if (multiple) {
        return valueProp;
      }
      return valueProp == null ? [] : [valueProp];
    }
    return void 0;
  }, [valueProp, multiple]);
  const {
    subitems,
    contextValue: compoundComponentContextValue
  } = useCompoundParent();
  const options = React65.useMemo(() => {
    if (optionsParam != null) {
      return new Map(optionsParam.map((option, index2) => [option.value, {
        value: option.value,
        label: option.label,
        disabled: option.disabled,
        ref: React65.createRef(),
        id: `${listboxId}_${index2}`
      }]));
    }
    return subitems;
  }, [optionsParam, subitems, listboxId]);
  const handleListboxRef = useForkRef2(listboxRefProp, listboxRef);
  const {
    getRootProps: getButtonRootProps,
    active: buttonActive,
    focusVisible: buttonFocusVisible,
    rootRef: mergedButtonRef
  } = useButton({
    disabled,
    rootRef: handleButtonRef
  });
  const optionValues = React65.useMemo(() => Array.from(options.keys()), [options]);
  const getOptionByValue = React65.useCallback((valueToGet) => {
    if (areOptionsEqual !== void 0) {
      const similarValue = optionValues.find((optionValue) => areOptionsEqual(optionValue, valueToGet));
      return options.get(similarValue);
    }
    return options.get(valueToGet);
  }, [options, areOptionsEqual, optionValues]);
  const isItemDisabled = React65.useCallback((valueToCheck) => {
    var _option$disabled;
    const option = getOptionByValue(valueToCheck);
    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;
  }, [getOptionByValue]);
  const stringifyOption = React65.useCallback((valueToCheck) => {
    const option = getOptionByValue(valueToCheck);
    if (!option) {
      return "";
    }
    return getOptionAsString(option);
  }, [getOptionByValue, getOptionAsString]);
  const controlledState = React65.useMemo(() => ({
    selectedValues: value,
    open: openProp
  }), [value, openProp]);
  const getItemId = React65.useCallback((itemValue) => {
    var _options$get;
    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;
  }, [options]);
  const handleSelectionChange = React65.useCallback((event, newValues) => {
    if (multiple) {
      onChange == null || onChange(event, newValues);
    } else {
      var _newValues$;
      onChange == null || onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);
    }
  }, [multiple, onChange]);
  const handleHighlightChange = React65.useCallback((event, newValue) => {
    onHighlightChange == null || onHighlightChange(event, newValue != null ? newValue : null);
  }, [onHighlightChange]);
  const handleStateChange = React65.useCallback((event, field, fieldValue) => {
    if (field === "open") {
      onOpenChange == null || onOpenChange(fieldValue);
      if (fieldValue === false && (event == null ? void 0 : event.type) !== "blur") {
        var _buttonRef$current;
        (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();
      }
    }
  }, [onOpenChange]);
  const getItemDomElement = React65.useCallback((itemId) => {
    var _subitems$get$ref$cur, _subitems$get;
    if (itemId == null) {
      return null;
    }
    return (_subitems$get$ref$cur = (_subitems$get = subitems.get(itemId)) == null ? void 0 : _subitems$get.ref.current) != null ? _subitems$get$ref$cur : null;
  }, [subitems]);
  const useListParameters = {
    getInitialState: () => {
      var _defaultValue;
      return {
        highlightedValue: null,
        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],
        open: defaultOpen
      };
    },
    getItemId,
    controlledProps: controlledState,
    focusManagement: "DOM",
    getItemDomElement,
    itemComparer: areOptionsEqual,
    isItemDisabled,
    rootRef: handleListboxRef,
    onChange: handleSelectionChange,
    onHighlightChange: handleHighlightChange,
    onStateChange: handleStateChange,
    reducerActionContext: React65.useMemo(() => ({
      multiple
    }), [multiple]),
    items: optionValues,
    getItemAsString: stringifyOption,
    selectionMode: multiple ? "multiple" : "single",
    stateReducer: selectReducer,
    componentName
  };
  const {
    dispatch,
    getRootProps: getListboxRootProps,
    contextValue: listContextValue,
    state: {
      open,
      highlightedValue: highlightedOption,
      selectedValues: selectedOptions
    },
    rootRef: mergedListRootRef
  } = useList(useListParameters);
  const isInitiallyOpen = React65.useRef(open);
  useEnhancedEffect_default(() => {
    if (open && highlightedOption !== null) {
      var _getOptionByValue;
      const optionRef = (_getOptionByValue = getOptionByValue(highlightedOption)) == null ? void 0 : _getOptionByValue.ref;
      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {
        return;
      }
      if (!isInitiallyOpen.current) {
        optionRef.current.focus({
          preventScroll: true
        });
      }
      const listboxClientRect = listboxRef.current.getBoundingClientRect();
      const optionClientRect = optionRef.current.getBoundingClientRect();
      if (optionClientRect.top < listboxClientRect.top) {
        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;
      } else if (optionClientRect.bottom > listboxClientRect.bottom) {
        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;
      }
    }
  }, [open, highlightedOption, getOptionByValue]);
  const getOptionMetadata = React65.useCallback((optionValue) => getOptionByValue(optionValue), [getOptionByValue]);
  const createHandleButtonClick = (externalEventHandlers) => (event) => {
    var _externalEventHandler;
    externalEventHandlers == null || (_externalEventHandler = externalEventHandlers.onClick) == null || _externalEventHandler.call(externalEventHandlers, event);
    if (!event.defaultMuiPrevented) {
      const action = {
        type: SelectActionTypes.buttonClick,
        event
      };
      dispatch(action);
    }
  };
  const createHandleButtonKeyDown = (otherHandlers) => (event) => {
    var _otherHandlers$onKeyD;
    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
    if (event.defaultMuiPrevented) {
      return;
    }
    if (event.key === "ArrowDown" || event.key === "ArrowUp") {
      event.preventDefault();
      dispatch({
        type: ListActionTypes.keyDown,
        key: event.key,
        event
      });
    }
  };
  const getButtonOwnRootProps = (otherHandlers = {}) => ({
    onClick: createHandleButtonClick(otherHandlers),
    onKeyDown: createHandleButtonKeyDown(otherHandlers)
  });
  const getSelectTriggerProps = (otherHandlers = {}) => {
    return _extends({}, otherHandlers, getButtonOwnRootProps(otherHandlers), {
      role: "combobox",
      "aria-expanded": open,
      "aria-controls": listboxId
    });
  };
  const getButtonProps = (externalProps = {}) => {
    const externalEventHandlers = extractEventHandlers_default(externalProps);
    const combinedProps = combineHooksSlotProps(getSelectTriggerProps, getButtonRootProps);
    return _extends({}, externalProps, combinedProps(externalEventHandlers));
  };
  const createListboxHandleBlur = (otherHandlers) => (event) => {
    var _otherHandlers$onBlur, _listboxRef$current;
    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
    if (event.defaultMuiPrevented) {
      return;
    }
    if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(event.relatedTarget) || event.relatedTarget === buttonRef.current) {
      event.defaultMuiPrevented = true;
    }
  };
  const getOwnListboxHandlers = (otherHandlers = {}) => ({
    onBlur: createListboxHandleBlur(otherHandlers)
  });
  const getListboxProps = (externalProps = {}) => {
    const externalEventHandlers = extractEventHandlers_default(externalProps);
    const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListboxRootProps);
    return _extends({
      id: listboxId,
      role: "listbox",
      "aria-multiselectable": multiple ? "true" : void 0
    }, externalProps, getCombinedRootProps(externalEventHandlers));
  };
  React65.useDebugValue({
    selectedOptions,
    highlightedOption,
    open
  });
  const contextValue = React65.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);
  let selectValue;
  if (props.multiple) {
    selectValue = selectedOptions;
  } else {
    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;
  }
  let selectedOptionsMetadata;
  if (multiple) {
    selectedOptionsMetadata = selectValue.map((v) => getOptionMetadata(v)).filter((o) => o !== void 0);
  } else {
    var _getOptionMetadata;
    selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(selectValue)) != null ? _getOptionMetadata : null;
  }
  const createHandleHiddenInputChange = (externalEventHandlers) => (event) => {
    var _externalEventHandler2;
    externalEventHandlers == null || (_externalEventHandler2 = externalEventHandlers.onChange) == null || _externalEventHandler2.call(externalEventHandlers, event);
    if (event.defaultMuiPrevented) {
      return;
    }
    const option = options.get(event.target.value);
    if (event.target.value === "") {
      dispatch({
        type: ListActionTypes.clearSelection
      });
    } else if (option !== void 0) {
      dispatch({
        type: SelectActionTypes.browserAutoFill,
        item: option.value,
        event
      });
    }
  };
  const getHiddenInputProps = (externalProps = {}) => {
    const externalEventHandlers = extractEventHandlers_default(externalProps);
    return _extends({
      name,
      tabIndex: -1,
      "aria-hidden": true,
      required: required ? true : void 0,
      value: getSerializedValue(selectedOptionsMetadata),
      style: visuallyHidden_default
    }, externalProps, {
      onChange: createHandleHiddenInputChange(externalEventHandlers)
    });
  };
  return {
    buttonActive,
    buttonFocusVisible,
    buttonRef: mergedButtonRef,
    contextValue,
    disabled,
    dispatch,
    getButtonProps,
    getHiddenInputProps,
    getListboxProps,
    getOptionMetadata,
    listboxRef: mergedListRootRef,
    open,
    options: optionValues,
    value: selectValue,
    highlightedOption
  };
}

// node_modules/@mui/base/useSelect/SelectProvider.js
var React66 = __toESM(require_react());
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
function SelectProvider(props) {
  const {
    value,
    children
  } = props;
  const {
    dispatch,
    getItemIndex,
    getItemState,
    registerItem,
    totalSubitemCount
  } = value;
  const listContextValue = React66.useMemo(() => ({
    dispatch,
    getItemState,
    getItemIndex
  }), [dispatch, getItemIndex, getItemState]);
  const compoundComponentContextValue = React66.useMemo(() => ({
    getItemIndex,
    registerItem,
    totalSubitemCount
  }), [registerItem, getItemIndex, totalSubitemCount]);
  return (0, import_jsx_runtime30.jsx)(CompoundComponentContext.Provider, {
    value: compoundComponentContextValue,
    children: (0, import_jsx_runtime30.jsx)(ListContext.Provider, {
      value: listContextValue,
      children
    })
  });
}

// node_modules/@mui/base/Select/selectClasses.js
var COMPONENT_NAME14 = "Select";
function getSelectUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME14, slot);
}
var selectClasses = generateUtilityClasses4(COMPONENT_NAME14, ["root", "button", "listbox", "popup", "active", "expanded", "disabled", "focusVisible"]);

// node_modules/@mui/base/Select/Select.js
var import_jsx_runtime31 = __toESM(require_jsx_runtime());
var import_jsx_runtime32 = __toESM(require_jsx_runtime());
var _span;
var _excluded15 = ["areOptionsEqual", "autoComplete", "autoFocus", "children", "defaultValue", "defaultListboxOpen", "disabled", "getSerializedValue", "listboxId", "listboxOpen", "multiple", "name", "required", "onChange", "onListboxOpenChange", "getOptionAsString", "renderValue", "placeholder", "slotProps", "slots", "value"];
function defaultRenderValue(selectedOptions) {
  var _selectedOptions$labe;
  if (Array.isArray(selectedOptions)) {
    return (0, import_jsx_runtime31.jsx)(React67.Fragment, {
      children: selectedOptions.map((o) => o.label).join(", ")
    });
  }
  return (_selectedOptions$labe = selectedOptions == null ? void 0 : selectedOptions.label) != null ? _selectedOptions$labe : null;
}
function useUtilityClasses14(ownerState) {
  const {
    active,
    disabled,
    open,
    focusVisible
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", active && "active", open && "expanded"],
    listbox: ["listbox", disabled && "disabled"],
    popup: ["popup"]
  };
  return composeClasses2(slots, useClassNamesOverride(getSelectUtilityClass));
}
var Select = React67.forwardRef(function Select2(props, forwardedRef) {
  var _slots$root, _slots$listbox, _slots$popup, _ref, _renderValue;
  const {
    areOptionsEqual,
    autoComplete,
    autoFocus,
    children,
    defaultValue,
    defaultListboxOpen = false,
    disabled: disabledProp,
    getSerializedValue,
    listboxId,
    listboxOpen: listboxOpenProp,
    multiple = false,
    name,
    required = false,
    onChange,
    onListboxOpenChange,
    getOptionAsString = defaultOptionStringifier,
    renderValue: renderValueProp,
    placeholder,
    slotProps = {},
    slots = {},
    value: valueProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded15);
  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderValue;
  const [buttonDefined, setButtonDefined] = React67.useState(false);
  const buttonRef = React67.useRef(null);
  const listboxRef = React67.useRef(null);
  const Button5 = (_slots$root = slots.root) != null ? _slots$root : "button";
  const ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : "ul";
  const PopupComponent = (_slots$popup = slots.popup) != null ? _slots$popup : "div";
  const handleButtonRefChange = React67.useCallback((element) => {
    setButtonDefined(element != null);
  }, []);
  const handleButtonRef = useForkRef2(forwardedRef, buttonRef, handleButtonRefChange);
  React67.useEffect(() => {
    if (autoFocus) {
      buttonRef.current.focus();
    }
  }, [autoFocus]);
  const {
    buttonActive,
    buttonFocusVisible,
    contextValue,
    disabled,
    getButtonProps,
    getListboxProps,
    getHiddenInputProps,
    getOptionMetadata,
    value,
    open
  } = useSelect({
    name,
    required,
    getSerializedValue,
    areOptionsEqual,
    buttonRef: handleButtonRef,
    defaultOpen: defaultListboxOpen,
    defaultValue,
    disabled: disabledProp,
    listboxId,
    multiple,
    open: listboxOpenProp,
    onChange,
    onOpenChange: onListboxOpenChange,
    getOptionAsString,
    value: valueProp,
    componentName: "Select"
  });
  const ownerState = _extends({}, props, {
    active: buttonActive,
    defaultListboxOpen,
    disabled,
    focusVisible: buttonFocusVisible,
    open,
    multiple,
    renderValue,
    value
  });
  const classes = useUtilityClasses14(ownerState);
  const buttonProps = useSlotProps_default({
    elementType: Button5,
    getSlotProps: getButtonProps,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    ownerState,
    className: classes.root
  });
  const listboxProps = useSlotProps_default({
    elementType: ListboxRoot,
    getSlotProps: getListboxProps,
    externalSlotProps: slotProps.listbox,
    additionalProps: {
      ref: listboxRef
    },
    ownerState,
    className: classes.listbox
  });
  const popupProps = useSlotProps_default({
    elementType: PopupComponent,
    externalSlotProps: slotProps.popup,
    additionalProps: {
      anchor: buttonRef.current,
      keepMounted: true,
      open,
      placement: "bottom-start",
      role: void 0
    },
    ownerState,
    className: classes.popup
  });
  let selectedOptionsMetadata;
  if (multiple) {
    selectedOptionsMetadata = value.map((v) => getOptionMetadata(v)).filter((o) => o !== void 0);
  } else {
    var _getOptionMetadata;
    selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(value)) != null ? _getOptionMetadata : null;
  }
  return (0, import_jsx_runtime32.jsxs)(React67.Fragment, {
    children: [(0, import_jsx_runtime31.jsx)(Button5, _extends({}, buttonProps, {
      children: (_ref = (_renderValue = renderValue(selectedOptionsMetadata)) != null ? _renderValue : placeholder) != null ? _ref : (
        // fall back to a zero-width space to prevent layout shift
        // from https://github.com/mui/material-ui/pull/24563
        _span || (_span = (0, import_jsx_runtime31.jsx)("span", {
          className: "notranslate",
          children: "​"
        }))
      )
    })), buttonDefined && (0, import_jsx_runtime31.jsx)(Popup, _extends({
      slots: {
        root: PopupComponent
      }
    }, popupProps, {
      children: (0, import_jsx_runtime31.jsx)(ListboxRoot, _extends({}, listboxProps, {
        children: (0, import_jsx_runtime31.jsx)(SelectProvider, {
          value: contextValue,
          children
        })
      }))
    })), (0, import_jsx_runtime31.jsx)("input", _extends({}, getHiddenInputProps(), {
      autoComplete
    }))]
  });
});
true ? Select.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A function used to determine if two options' values are equal.
   * By default, reference equality is used.
   *
   * There is a performance impact when using the `areOptionsEqual` prop (proportional to the number of options).
   * Therefore, it's recommented to use the default reference equality comparison whenever possible.
   */
  areOptionsEqual: import_prop_types22.default.func,
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: import_prop_types22.default.string,
  /**
   * If `true`, the select element is focused during the first mount
   * @default false
   */
  autoFocus: import_prop_types22.default.bool,
  /**
   * @ignore
   */
  children: import_prop_types22.default.node,
  /**
   * @ignore
   */
  className: import_prop_types22.default.string,
  /**
   * If `true`, the select will be initially open.
   * @default false
   */
  defaultListboxOpen: import_prop_types22.default.bool,
  /**
   * The default selected value. Use when the component is not controlled.
   */
  defaultValue: import_prop_types22.default.any,
  /**
   * If `true`, the select is disabled.
   * @default false
   */
  disabled: import_prop_types22.default.bool,
  /**
   * A function used to convert the option label to a string.
   * It's useful when labels are elements and need to be converted to plain text
   * to enable navigation using character keys on a keyboard.
   *
   * @default defaultOptionStringifier
   */
  getOptionAsString: import_prop_types22.default.func,
  /**
   * A function to convert the currently selected value to a string.
   * Used to set a value of a hidden input associated with the select,
   * so that the selected value can be posted with a form.
   */
  getSerializedValue: import_prop_types22.default.func,
  /**
   * `id` attribute of the listbox element.
   */
  listboxId: import_prop_types22.default.string,
  /**
   * Controls the open state of the select's listbox.
   * @default undefined
   */
  listboxOpen: import_prop_types22.default.bool,
  /**
   * If `true`, selecting multiple values is allowed.
   * This affects the type of the `value`, `defaultValue`, and `onChange` props.
   *
   * @default false
   */
  multiple: import_prop_types22.default.bool,
  /**
   * Name of the element. For example used by the server to identify the fields in form submits.
   */
  name: import_prop_types22.default.string,
  /**
   * Callback fired when an option is selected.
   */
  onChange: import_prop_types22.default.func,
  /**
   * Callback fired when the component requests to be opened.
   * Use in controlled mode (see listboxOpen).
   */
  onListboxOpenChange: import_prop_types22.default.func,
  /**
   * Text to show when there is no selected value.
   */
  placeholder: import_prop_types22.default.node,
  /**
   * Function that customizes the rendering of the selected value.
   */
  renderValue: import_prop_types22.default.func,
  /**
   * If `true`, the Select cannot be empty when submitting form.
   * @default false
   */
  required: import_prop_types22.default.bool,
  /**
   * The props used for each slot inside the Input.
   * @default {}
   */
  slotProps: import_prop_types22.default.shape({
    listbox: import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.object]),
    popup: import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.object]),
    root: import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.object])
  }),
  /**
   * The components used for each slot inside the Select.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types22.default.shape({
    listbox: import_prop_types22.default.elementType,
    popup: import_prop_types22.default.elementType,
    root: import_prop_types22.default.elementType
  }),
  /**
   * The selected value.
   * Set to `null` to deselect all options.
   */
  value: import_prop_types22.default.any
} : void 0;

// node_modules/@mui/base/Slider/Slider.js
var React69 = __toESM(require_react());
var import_prop_types23 = __toESM(require_prop_types());

// node_modules/@mui/base/Slider/sliderClasses.js
var COMPONENT_NAME15 = "Slider";
function getSliderUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME15, slot);
}
var sliderClasses = generateUtilityClasses4(COMPONENT_NAME15, ["root", "active", "focusVisible", "disabled", "dragging", "marked", "vertical", "trackInverted", "trackFalse", "rail", "track", "mark", "markActive", "markLabel", "markLabelActive", "thumb"]);

// node_modules/@mui/base/useSlider/useSlider.js
var React68 = __toESM(require_react());
var INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
function asc(a, b) {
  return a - b;
}
function findClosest(values, currentValue) {
  var _values$reduce;
  const {
    index: closestIndex
  } = (_values$reduce = values.reduce((acc, value, index2) => {
    const distance = Math.abs(currentValue - value);
    if (acc === null || distance < acc.distance || distance === acc.distance) {
      return {
        distance,
        index: index2
      };
    }
    return acc;
  }, null)) != null ? _values$reduce : {};
  return closestIndex;
}
function trackFinger(event, touchId) {
  if (touchId.current !== void 0 && event.changedTouches) {
    const touchEvent = event;
    for (let i = 0; i < touchEvent.changedTouches.length; i += 1) {
      const touch = touchEvent.changedTouches[i];
      if (touch.identifier === touchId.current) {
        return {
          x: touch.clientX,
          y: touch.clientY
        };
      }
    }
    return false;
  }
  return {
    x: event.clientX,
    y: event.clientY
  };
}
function valueToPercent(value, min2, max2) {
  return (value - min2) * 100 / (max2 - min2);
}
function percentToValue(percent, min2, max2) {
  return (max2 - min2) * percent + min2;
}
function getDecimalPrecision(num) {
  if (Math.abs(num) < 1) {
    const parts = num.toExponential().split("e-");
    const matissaDecimalPart = parts[0].split(".")[1];
    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
  }
  const decimalPart = num.toString().split(".")[1];
  return decimalPart ? decimalPart.length : 0;
}
function roundValueToStep(value, step, min2) {
  const nearest = Math.round((value - min2) / step) * step + min2;
  return Number(nearest.toFixed(getDecimalPrecision(step)));
}
function setValueIndex({
  values,
  newValue,
  index: index2
}) {
  const output = values.slice();
  output[index2] = newValue;
  return output.sort(asc);
}
function focusThumb({
  sliderRef,
  activeIndex,
  setActive
}) {
  var _sliderRef$current, _doc$activeElement;
  const doc = ownerDocument(sliderRef.current);
  if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null || (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute("data-index")) !== activeIndex) {
    var _sliderRef$current2;
    (_sliderRef$current2 = sliderRef.current) == null || _sliderRef$current2.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
  }
  if (setActive) {
    setActive(activeIndex);
  }
}
function areValuesEqual(newValue, oldValue) {
  if (typeof newValue === "number" && typeof oldValue === "number") {
    return newValue === oldValue;
  }
  if (typeof newValue === "object" && typeof oldValue === "object") {
    return areArraysEqual(newValue, oldValue);
  }
  return false;
}
var axisProps = {
  horizontal: {
    offset: (percent) => ({
      left: `${percent}%`
    }),
    leap: (percent) => ({
      width: `${percent}%`
    })
  },
  "horizontal-reverse": {
    offset: (percent) => ({
      right: `${percent}%`
    }),
    leap: (percent) => ({
      width: `${percent}%`
    })
  },
  vertical: {
    offset: (percent) => ({
      bottom: `${percent}%`
    }),
    leap: (percent) => ({
      height: `${percent}%`
    })
  }
};
var Identity = (x) => x;
var cachedSupportsTouchActionNone;
function doesSupportTouchActionNone() {
  if (cachedSupportsTouchActionNone === void 0) {
    if (typeof CSS !== "undefined" && typeof CSS.supports === "function") {
      cachedSupportsTouchActionNone = CSS.supports("touch-action", "none");
    } else {
      cachedSupportsTouchActionNone = true;
    }
  }
  return cachedSupportsTouchActionNone;
}
function useSlider(parameters) {
  const {
    "aria-labelledby": ariaLabelledby,
    defaultValue,
    disabled = false,
    disableSwap = false,
    isRtl = false,
    marks: marksProp = false,
    max: max2 = 100,
    min: min2 = 0,
    name,
    onChange,
    onChangeCommitted,
    orientation = "horizontal",
    rootRef: ref,
    scale = Identity,
    step = 1,
    shiftStep = 10,
    tabIndex,
    value: valueProp
  } = parameters;
  const touchId = React68.useRef(void 0);
  const [active, setActive] = React68.useState(-1);
  const [open, setOpen] = React68.useState(-1);
  const [dragging, setDragging] = React68.useState(false);
  const moveCount = React68.useRef(0);
  const [valueDerived, setValueState] = useControlled2({
    controlled: valueProp,
    default: defaultValue != null ? defaultValue : min2,
    name: "Slider"
  });
  const handleChange = onChange && ((event, value, thumbIndex) => {
    const nativeEvent = event.nativeEvent || event;
    const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
    Object.defineProperty(clonedEvent, "target", {
      writable: true,
      value: {
        value,
        name
      }
    });
    onChange(clonedEvent, value, thumbIndex);
  });
  const range = Array.isArray(valueDerived);
  let values = range ? valueDerived.slice().sort(asc) : [valueDerived];
  values = values.map((value) => value == null ? min2 : clamp_default(value, min2, max2));
  const marks = marksProp === true && step !== null ? [...Array(Math.floor((max2 - min2) / step) + 1)].map((_5, index2) => ({
    value: min2 + step * index2
  })) : marksProp || [];
  const marksValues = marks.map((mark) => mark.value);
  const {
    isFocusVisibleRef,
    onBlur: handleBlurVisible,
    onFocus: handleFocusVisible,
    ref: focusVisibleRef
  } = useIsFocusVisible2();
  const [focusedThumbIndex, setFocusedThumbIndex] = React68.useState(-1);
  const sliderRef = React68.useRef(null);
  const handleFocusRef = useForkRef2(focusVisibleRef, sliderRef);
  const handleRef = useForkRef2(ref, handleFocusRef);
  const createHandleHiddenInputFocus = (otherHandlers) => (event) => {
    var _otherHandlers$onFocu;
    const index2 = Number(event.currentTarget.getAttribute("data-index"));
    handleFocusVisible(event);
    if (isFocusVisibleRef.current === true) {
      setFocusedThumbIndex(index2);
    }
    setOpen(index2);
    otherHandlers == null || (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);
  };
  const createHandleHiddenInputBlur = (otherHandlers) => (event) => {
    var _otherHandlers$onBlur;
    handleBlurVisible(event);
    if (isFocusVisibleRef.current === false) {
      setFocusedThumbIndex(-1);
    }
    setOpen(-1);
    otherHandlers == null || (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
  };
  const changeValue = (event, valueInput) => {
    const index2 = Number(event.currentTarget.getAttribute("data-index"));
    const value = values[index2];
    const marksIndex = marksValues.indexOf(value);
    let newValue = valueInput;
    if (marks && step == null) {
      const maxMarksValue = marksValues[marksValues.length - 1];
      if (newValue > maxMarksValue) {
        newValue = maxMarksValue;
      } else if (newValue < marksValues[0]) {
        newValue = marksValues[0];
      } else {
        newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
      }
    }
    newValue = clamp_default(newValue, min2, max2);
    if (range) {
      if (disableSwap) {
        newValue = clamp_default(newValue, values[index2 - 1] || -Infinity, values[index2 + 1] || Infinity);
      }
      const previousValue = newValue;
      newValue = setValueIndex({
        values,
        newValue,
        index: index2
      });
      let activeIndex = index2;
      if (!disableSwap) {
        activeIndex = newValue.indexOf(previousValue);
      }
      focusThumb({
        sliderRef,
        activeIndex
      });
    }
    setValueState(newValue);
    setFocusedThumbIndex(index2);
    if (handleChange && !areValuesEqual(newValue, valueDerived)) {
      handleChange(event, newValue, index2);
    }
    if (onChangeCommitted) {
      onChangeCommitted(event, newValue);
    }
  };
  const createHandleHiddenInputKeyDown = (otherHandlers) => (event) => {
    var _otherHandlers$onKeyD;
    if (step !== null) {
      const index2 = Number(event.currentTarget.getAttribute("data-index"));
      const value = values[index2];
      let newValue = null;
      if ((event.key === "ArrowLeft" || event.key === "ArrowDown") && event.shiftKey || event.key === "PageDown") {
        newValue = Math.max(value - shiftStep, min2);
      } else if ((event.key === "ArrowRight" || event.key === "ArrowUp") && event.shiftKey || event.key === "PageUp") {
        newValue = Math.min(value + shiftStep, max2);
      }
      if (newValue !== null) {
        changeValue(event, newValue);
        event.preventDefault();
      }
    }
    otherHandlers == null || (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
  };
  useEnhancedEffect_default(() => {
    if (disabled && sliderRef.current.contains(document.activeElement)) {
      var _document$activeEleme;
      (_document$activeEleme = document.activeElement) == null || _document$activeEleme.blur();
    }
  }, [disabled]);
  if (disabled && active !== -1) {
    setActive(-1);
  }
  if (disabled && focusedThumbIndex !== -1) {
    setFocusedThumbIndex(-1);
  }
  const createHandleHiddenInputChange = (otherHandlers) => (event) => {
    var _otherHandlers$onChan;
    (_otherHandlers$onChan = otherHandlers.onChange) == null || _otherHandlers$onChan.call(otherHandlers, event);
    changeValue(event, event.target.valueAsNumber);
  };
  const previousIndex = React68.useRef(void 0);
  let axis = orientation;
  if (isRtl && orientation === "horizontal") {
    axis += "-reverse";
  }
  const getFingerNewValue = ({
    finger,
    move = false
  }) => {
    const {
      current: slider
    } = sliderRef;
    const {
      width,
      height,
      bottom,
      left
    } = slider.getBoundingClientRect();
    let percent;
    if (axis.indexOf("vertical") === 0) {
      percent = (bottom - finger.y) / height;
    } else {
      percent = (finger.x - left) / width;
    }
    if (axis.indexOf("-reverse") !== -1) {
      percent = 1 - percent;
    }
    let newValue;
    newValue = percentToValue(percent, min2, max2);
    if (step) {
      newValue = roundValueToStep(newValue, step, min2);
    } else {
      const closestIndex = findClosest(marksValues, newValue);
      newValue = marksValues[closestIndex];
    }
    newValue = clamp_default(newValue, min2, max2);
    let activeIndex = 0;
    if (range) {
      if (!move) {
        activeIndex = findClosest(values, newValue);
      } else {
        activeIndex = previousIndex.current;
      }
      if (disableSwap) {
        newValue = clamp_default(newValue, values[activeIndex - 1] || -Infinity, values[activeIndex + 1] || Infinity);
      }
      const previousValue = newValue;
      newValue = setValueIndex({
        values,
        newValue,
        index: activeIndex
      });
      if (!(disableSwap && move)) {
        activeIndex = newValue.indexOf(previousValue);
        previousIndex.current = activeIndex;
      }
    }
    return {
      newValue,
      activeIndex
    };
  };
  const handleTouchMove = useEventCallback_default2((nativeEvent) => {
    const finger = trackFinger(nativeEvent, touchId);
    if (!finger) {
      return;
    }
    moveCount.current += 1;
    if (nativeEvent.type === "mousemove" && nativeEvent.buttons === 0) {
      handleTouchEnd(nativeEvent);
      return;
    }
    const {
      newValue,
      activeIndex
    } = getFingerNewValue({
      finger,
      move: true
    });
    focusThumb({
      sliderRef,
      activeIndex,
      setActive
    });
    setValueState(newValue);
    if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
      setDragging(true);
    }
    if (handleChange && !areValuesEqual(newValue, valueDerived)) {
      handleChange(nativeEvent, newValue, activeIndex);
    }
  });
  const handleTouchEnd = useEventCallback_default2((nativeEvent) => {
    const finger = trackFinger(nativeEvent, touchId);
    setDragging(false);
    if (!finger) {
      return;
    }
    const {
      newValue
    } = getFingerNewValue({
      finger,
      move: true
    });
    setActive(-1);
    if (nativeEvent.type === "touchend") {
      setOpen(-1);
    }
    if (onChangeCommitted) {
      onChangeCommitted(nativeEvent, newValue);
    }
    touchId.current = void 0;
    stopListening();
  });
  const handleTouchStart = useEventCallback_default2((nativeEvent) => {
    if (disabled) {
      return;
    }
    if (!doesSupportTouchActionNone()) {
      nativeEvent.preventDefault();
    }
    const touch = nativeEvent.changedTouches[0];
    if (touch != null) {
      touchId.current = touch.identifier;
    }
    const finger = trackFinger(nativeEvent, touchId);
    if (finger !== false) {
      const {
        newValue,
        activeIndex
      } = getFingerNewValue({
        finger
      });
      focusThumb({
        sliderRef,
        activeIndex,
        setActive
      });
      setValueState(newValue);
      if (handleChange && !areValuesEqual(newValue, valueDerived)) {
        handleChange(nativeEvent, newValue, activeIndex);
      }
    }
    moveCount.current = 0;
    const doc = ownerDocument(sliderRef.current);
    doc.addEventListener("touchmove", handleTouchMove, {
      passive: true
    });
    doc.addEventListener("touchend", handleTouchEnd, {
      passive: true
    });
  });
  const stopListening = React68.useCallback(() => {
    const doc = ownerDocument(sliderRef.current);
    doc.removeEventListener("mousemove", handleTouchMove);
    doc.removeEventListener("mouseup", handleTouchEnd);
    doc.removeEventListener("touchmove", handleTouchMove);
    doc.removeEventListener("touchend", handleTouchEnd);
  }, [handleTouchEnd, handleTouchMove]);
  React68.useEffect(() => {
    const {
      current: slider
    } = sliderRef;
    slider.addEventListener("touchstart", handleTouchStart, {
      passive: doesSupportTouchActionNone()
    });
    return () => {
      slider.removeEventListener("touchstart", handleTouchStart);
      stopListening();
    };
  }, [stopListening, handleTouchStart]);
  React68.useEffect(() => {
    if (disabled) {
      stopListening();
    }
  }, [disabled, stopListening]);
  const createHandleMouseDown = (otherHandlers) => (event) => {
    var _otherHandlers$onMous;
    (_otherHandlers$onMous = otherHandlers.onMouseDown) == null || _otherHandlers$onMous.call(otherHandlers, event);
    if (disabled) {
      return;
    }
    if (event.defaultPrevented) {
      return;
    }
    if (event.button !== 0) {
      return;
    }
    event.preventDefault();
    const finger = trackFinger(event, touchId);
    if (finger !== false) {
      const {
        newValue,
        activeIndex
      } = getFingerNewValue({
        finger
      });
      focusThumb({
        sliderRef,
        activeIndex,
        setActive
      });
      setValueState(newValue);
      if (handleChange && !areValuesEqual(newValue, valueDerived)) {
        handleChange(event, newValue, activeIndex);
      }
    }
    moveCount.current = 0;
    const doc = ownerDocument(sliderRef.current);
    doc.addEventListener("mousemove", handleTouchMove, {
      passive: true
    });
    doc.addEventListener("mouseup", handleTouchEnd);
  };
  const trackOffset = valueToPercent(range ? values[0] : min2, min2, max2);
  const trackLeap = valueToPercent(values[values.length - 1], min2, max2) - trackOffset;
  const getRootProps = (externalProps = {}) => {
    const externalHandlers = extractEventHandlers_default(externalProps);
    const ownEventHandlers = {
      onMouseDown: createHandleMouseDown(externalHandlers || {})
    };
    const mergedEventHandlers = _extends({}, externalHandlers, ownEventHandlers);
    return _extends({}, externalProps, {
      ref: handleRef
    }, mergedEventHandlers);
  };
  const createHandleMouseOver = (otherHandlers) => (event) => {
    var _otherHandlers$onMous2;
    (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null || _otherHandlers$onMous2.call(otherHandlers, event);
    const index2 = Number(event.currentTarget.getAttribute("data-index"));
    setOpen(index2);
  };
  const createHandleMouseLeave = (otherHandlers) => (event) => {
    var _otherHandlers$onMous3;
    (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null || _otherHandlers$onMous3.call(otherHandlers, event);
    setOpen(-1);
  };
  const getThumbProps = (externalProps = {}) => {
    const externalHandlers = extractEventHandlers_default(externalProps);
    const ownEventHandlers = {
      onMouseOver: createHandleMouseOver(externalHandlers || {}),
      onMouseLeave: createHandleMouseLeave(externalHandlers || {})
    };
    return _extends({}, externalProps, externalHandlers, ownEventHandlers);
  };
  const getThumbStyle = (index2) => {
    return {
      // So the non active thumb doesn't show its label on hover.
      pointerEvents: active !== -1 && active !== index2 ? "none" : void 0
    };
  };
  const getHiddenInputProps = (externalProps = {}) => {
    var _parameters$step;
    const externalHandlers = extractEventHandlers_default(externalProps);
    const ownEventHandlers = {
      onChange: createHandleHiddenInputChange(externalHandlers || {}),
      onFocus: createHandleHiddenInputFocus(externalHandlers || {}),
      onBlur: createHandleHiddenInputBlur(externalHandlers || {}),
      onKeyDown: createHandleHiddenInputKeyDown(externalHandlers || {})
    };
    const mergedEventHandlers = _extends({}, externalHandlers, ownEventHandlers);
    return _extends({
      tabIndex,
      "aria-labelledby": ariaLabelledby,
      "aria-orientation": orientation,
      "aria-valuemax": scale(max2),
      "aria-valuemin": scale(min2),
      name,
      type: "range",
      min: parameters.min,
      max: parameters.max,
      step: parameters.step === null && parameters.marks ? "any" : (_parameters$step = parameters.step) != null ? _parameters$step : void 0,
      disabled
    }, externalProps, mergedEventHandlers, {
      style: _extends({}, visuallyHidden_default, {
        direction: isRtl ? "rtl" : "ltr",
        // So that VoiceOver's focus indicator matches the thumb's dimensions
        width: "100%",
        height: "100%"
      })
    });
  };
  return {
    active,
    axis,
    axisProps,
    dragging,
    focusedThumbIndex,
    getHiddenInputProps,
    getRootProps,
    getThumbProps,
    marks,
    open,
    range,
    rootRef: handleRef,
    trackLeap,
    trackOffset,
    values,
    getThumbStyle
  };
}

// node_modules/@mui/base/Slider/Slider.js
var import_jsx_runtime33 = __toESM(require_jsx_runtime());
var import_jsx_runtime34 = __toESM(require_jsx_runtime());
var _excluded16 = ["aria-label", "aria-valuetext", "aria-labelledby", "className", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "orientation", "shiftStep", "scale", "step", "tabIndex", "track", "value", "valueLabelFormat", "isRtl", "defaultValue", "slotProps", "slots"];
function Identity2(x) {
  return x;
}
var useUtilityClasses15 = (ownerState) => {
  const {
    disabled,
    dragging,
    marked,
    orientation,
    track
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse"],
    rail: ["rail"],
    track: ["track"],
    mark: ["mark"],
    markActive: ["markActive"],
    markLabel: ["markLabel"],
    markLabelActive: ["markLabelActive"],
    valueLabel: ["valueLabel"],
    thumb: ["thumb", disabled && "disabled"],
    active: ["active"],
    disabled: ["disabled"],
    focusVisible: ["focusVisible"]
  };
  return composeClasses2(slots, useClassNamesOverride(getSliderUtilityClass));
};
var Slider = React69.forwardRef(function Slider2(props, forwardedRef) {
  var _slots$root, _slots$rail, _slots$track, _slots$thumb, _slots$mark, _slots$markLabel;
  const {
    "aria-label": ariaLabel,
    "aria-valuetext": ariaValuetext,
    "aria-labelledby": ariaLabelledby,
    className,
    disableSwap = false,
    disabled = false,
    getAriaLabel,
    getAriaValueText,
    marks: marksProp = false,
    max: max2 = 100,
    min: min2 = 0,
    orientation = "horizontal",
    shiftStep = 10,
    scale = Identity2,
    step = 1,
    track = "normal",
    valueLabelFormat = Identity2,
    isRtl = false,
    defaultValue,
    slotProps = {},
    slots = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded16);
  const partialOwnerState = _extends({}, props, {
    marks: marksProp,
    disabled,
    disableSwap,
    isRtl,
    defaultValue,
    max: max2,
    min: min2,
    orientation,
    scale,
    step,
    shiftStep,
    track,
    valueLabelFormat
  });
  const {
    axisProps: axisProps2,
    getRootProps,
    getHiddenInputProps,
    getThumbProps,
    active,
    axis,
    range,
    focusedThumbIndex,
    dragging,
    marks,
    values,
    trackOffset,
    trackLeap,
    getThumbStyle
  } = useSlider(_extends({}, partialOwnerState, {
    rootRef: forwardedRef
  }));
  const ownerState = _extends({}, partialOwnerState, {
    marked: marks.length > 0 && marks.some((mark) => mark.label),
    dragging,
    focusedThumbIndex,
    activeThumbIndex: active
  });
  const classes = useUtilityClasses15(ownerState);
  const Root = (_slots$root = slots.root) != null ? _slots$root : "span";
  const rootProps = useSlotProps_default({
    elementType: Root,
    getSlotProps: getRootProps,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    ownerState,
    className: [classes.root, className]
  });
  const Rail = (_slots$rail = slots.rail) != null ? _slots$rail : "span";
  const railProps = useSlotProps_default({
    elementType: Rail,
    externalSlotProps: slotProps.rail,
    ownerState,
    className: classes.rail
  });
  const Track = (_slots$track = slots.track) != null ? _slots$track : "span";
  const trackProps = useSlotProps_default({
    elementType: Track,
    externalSlotProps: slotProps.track,
    additionalProps: {
      style: _extends({}, axisProps2[axis].offset(trackOffset), axisProps2[axis].leap(trackLeap))
    },
    ownerState,
    className: classes.track
  });
  const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : "span";
  const thumbProps = useSlotProps_default({
    elementType: Thumb,
    getSlotProps: getThumbProps,
    externalSlotProps: slotProps.thumb,
    ownerState,
    skipResolvingSlotProps: true
  });
  const ValueLabel = slots.valueLabel;
  const valueLabelProps = useSlotProps_default({
    elementType: ValueLabel,
    externalSlotProps: slotProps.valueLabel,
    ownerState
  });
  const Mark = (_slots$mark = slots.mark) != null ? _slots$mark : "span";
  const markProps = useSlotProps_default({
    elementType: Mark,
    externalSlotProps: slotProps.mark,
    ownerState,
    className: classes.mark
  });
  const MarkLabel = (_slots$markLabel = slots.markLabel) != null ? _slots$markLabel : "span";
  const markLabelProps = useSlotProps_default({
    elementType: MarkLabel,
    externalSlotProps: slotProps.markLabel,
    ownerState
  });
  const Input5 = slots.input || "input";
  const inputProps = useSlotProps_default({
    elementType: Input5,
    getSlotProps: getHiddenInputProps,
    externalSlotProps: slotProps.input,
    ownerState
  });
  return (0, import_jsx_runtime34.jsxs)(Root, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime33.jsx)(Rail, _extends({}, railProps)), (0, import_jsx_runtime33.jsx)(Track, _extends({}, trackProps)), marks.filter((mark) => mark.value >= min2 && mark.value <= max2).map((mark, index2) => {
      const percent = valueToPercent(mark.value, min2, max2);
      const style = axisProps2[axis].offset(percent);
      let markActive;
      if (track === false) {
        markActive = values.indexOf(mark.value) !== -1;
      } else {
        markActive = track === "normal" && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === "inverted" && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
      }
      return (0, import_jsx_runtime34.jsxs)(React69.Fragment, {
        children: [(0, import_jsx_runtime33.jsx)(Mark, _extends({
          "data-index": index2
        }, markProps, !isHostComponent_default(Mark) && {
          markActive
        }, {
          style: _extends({}, style, markProps.style),
          className: clsx_default(markProps.className, markActive && classes.markActive)
        })), mark.label != null ? (0, import_jsx_runtime33.jsx)(MarkLabel, _extends({
          "aria-hidden": true,
          "data-index": index2
        }, markLabelProps, !isHostComponent_default(MarkLabel) && {
          markLabelActive: markActive
        }, {
          style: _extends({}, style, markLabelProps.style),
          className: clsx_default(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
          children: mark.label
        })) : null]
      }, index2);
    }), values.map((value, index2) => {
      const percent = valueToPercent(value, min2, max2);
      const style = axisProps2[axis].offset(percent);
      const resolvedSlotProps = resolveComponentProps_default(slotProps.thumb, ownerState, {
        index: index2,
        focused: focusedThumbIndex === index2,
        active: active === index2
      });
      return (0, import_jsx_runtime34.jsxs)(Thumb, _extends({
        "data-index": index2
      }, thumbProps, resolvedSlotProps, {
        className: clsx_default(classes.thumb, thumbProps.className, resolvedSlotProps == null ? void 0 : resolvedSlotProps.className, active === index2 && classes.active, focusedThumbIndex === index2 && classes.focusVisible),
        style: _extends({}, style, getThumbStyle(index2), thumbProps.style, resolvedSlotProps == null ? void 0 : resolvedSlotProps.style),
        children: [(0, import_jsx_runtime33.jsx)(Input5, _extends({
          "data-index": index2,
          "aria-label": getAriaLabel ? getAriaLabel(index2) : ariaLabel,
          "aria-valuenow": scale(value),
          "aria-labelledby": ariaLabelledby,
          "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index2) : ariaValuetext,
          value: values[index2]
        }, inputProps)), ValueLabel ? (0, import_jsx_runtime33.jsx)(ValueLabel, _extends({}, !isHostComponent_default(ValueLabel) && {
          valueLabelFormat,
          index: index2,
          disabled
        }, valueLabelProps, {
          children: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value), index2) : valueLabelFormat
        })) : null]
      }), index2);
    })]
  }));
});
true ? Slider.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The label of the slider.
   */
  "aria-label": chainPropTypes2(import_prop_types23.default.string, (props) => {
    const range = Array.isArray(props.value || props.defaultValue);
    if (range && props["aria-label"] != null) {
      return new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.");
    }
    return null;
  }),
  /**
   * The id of the element containing a label for the slider.
   */
  "aria-labelledby": import_prop_types23.default.string,
  /**
   * A string value that provides a user-friendly name for the current value of the slider.
   */
  "aria-valuetext": chainPropTypes2(import_prop_types23.default.string, (props) => {
    const range = Array.isArray(props.value || props.defaultValue);
    if (range && props["aria-valuetext"] != null) {
      return new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.");
    }
    return null;
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: import_prop_types23.default.oneOfType([import_prop_types23.default.arrayOf(import_prop_types23.default.number), import_prop_types23.default.number]),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types23.default.bool,
  /**
   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
   * @default false
   */
  disableSwap: import_prop_types23.default.bool,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
   * This is important for screen reader users.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */
  getAriaLabel: import_prop_types23.default.func,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
   * This is important for screen reader users.
   * @param {number} value The thumb label's value to format.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */
  getAriaValueText: import_prop_types23.default.func,
  /**
   * If `true` the Slider will be rendered right-to-left (with the lowest value on the right-hand side).
   * @default false
   */
  isRtl: import_prop_types23.default.bool,
  /**
   * Marks indicate predetermined values to which the user can move the slider.
   * If `true` the marks are spaced according the value of the `step` prop.
   * If an array, it should contain objects with `value` and an optional `label` keys.
   * @default false
   */
  marks: import_prop_types23.default.oneOfType([import_prop_types23.default.arrayOf(import_prop_types23.default.shape({
    label: import_prop_types23.default.node,
    value: import_prop_types23.default.number.isRequired
  })), import_prop_types23.default.bool]),
  /**
   * The maximum allowed value of the slider.
   * Should not be equal to min.
   * @default 100
   */
  max: import_prop_types23.default.number,
  /**
   * The minimum allowed value of the slider.
   * Should not be equal to max.
   * @default 0
   */
  min: import_prop_types23.default.number,
  /**
   * Name attribute of the hidden `input` element.
   */
  name: import_prop_types23.default.string,
  /**
   * Callback function that is fired when the slider's value changed.
   *
   * @param {Event} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   * @param {number} activeThumb Index of the currently moved thumb.
   */
  onChange: import_prop_types23.default.func,
  /**
   * Callback function that is fired when the `mouseup` is triggered.
   *
   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   */
  onChangeCommitted: import_prop_types23.default.func,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types23.default.oneOf(["horizontal", "vertical"]),
  /**
   * A transformation function, to change the scale of the slider.
   * @param {any} x
   * @returns {any}
   * @default function Identity(x) {
   *   return x;
   * }
   */
  scale: import_prop_types23.default.func,
  /**
   * The granularity with which the slider can step through values when using Page Up/Page Down or Shift + Arrow Up/Arrow Down.
   * @default 10
   */
  shiftStep: import_prop_types23.default.number,
  /**
   * The props used for each slot inside the Slider.
   * @default {}
   */
  slotProps: import_prop_types23.default.shape({
    input: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object]),
    mark: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object]),
    markLabel: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object]),
    rail: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object]),
    root: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object]),
    thumb: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object]),
    track: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object]),
    valueLabel: import_prop_types23.default.oneOfType([import_prop_types23.default.any, import_prop_types23.default.func])
  }),
  /**
   * The components used for each slot inside the Slider.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types23.default.shape({
    input: import_prop_types23.default.elementType,
    mark: import_prop_types23.default.elementType,
    markLabel: import_prop_types23.default.elementType,
    rail: import_prop_types23.default.elementType,
    root: import_prop_types23.default.elementType,
    thumb: import_prop_types23.default.elementType,
    track: import_prop_types23.default.elementType,
    valueLabel: import_prop_types23.default.elementType
  }),
  /**
   * The granularity with which the slider can step through values. (A "discrete" slider.)
   * The `min` prop serves as the origin for the valid values.
   * We recommend (max - min) to be evenly divisible by the step.
   *
   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
   * @default 1
   */
  step: import_prop_types23.default.number,
  /**
   * Tab index attribute of the hidden `input` element.
   */
  tabIndex: import_prop_types23.default.number,
  /**
   * The track presentation:
   *
   * - `normal` the track will render a bar representing the slider value.
   * - `inverted` the track will render a bar representing the remaining slider value.
   * - `false` the track will render without a bar.
   * @default 'normal'
   */
  track: import_prop_types23.default.oneOf(["inverted", "normal", false]),
  /**
   * The value of the slider.
   * For ranged sliders, provide an array with two values.
   */
  value: import_prop_types23.default.oneOfType([import_prop_types23.default.arrayOf(import_prop_types23.default.number), import_prop_types23.default.number]),
  /**
   * The format function the value label's value.
   *
   * When a function is provided, it should have the following signature:
   *
   * - {number} value The value label's value to format
   * - {number} index The value label's index to format
   * @param {any} x
   * @returns {any}
   * @default function Identity(x) {
   *   return x;
   * }
   */
  valueLabelFormat: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.string])
} : void 0;

// node_modules/@mui/base/Snackbar/Snackbar.js
var React71 = __toESM(require_react());
var import_prop_types24 = __toESM(require_prop_types());

// node_modules/@mui/base/Snackbar/snackbarClasses.js
var COMPONENT_NAME16 = "Snackbar";
function getSnackbarUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME16, slot);
}
var snackbarClasses = generateUtilityClasses4(COMPONENT_NAME16, ["root"]);

// node_modules/@mui/base/useSnackbar/useSnackbar.js
var React70 = __toESM(require_react());
function useSnackbar(parameters = {}) {
  const {
    autoHideDuration = null,
    disableWindowBlurListener = false,
    onClose,
    open,
    resumeHideDuration
  } = parameters;
  const timerAutoHide = useTimeout2();
  React70.useEffect(() => {
    if (!open) {
      return void 0;
    }
    function handleKeyDown3(nativeEvent) {
      if (!nativeEvent.defaultPrevented) {
        if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
          onClose == null || onClose(nativeEvent, "escapeKeyDown");
        }
      }
    }
    document.addEventListener("keydown", handleKeyDown3);
    return () => {
      document.removeEventListener("keydown", handleKeyDown3);
    };
  }, [open, onClose]);
  const handleClose = useEventCallback_default2((event, reason) => {
    onClose == null || onClose(event, reason);
  });
  const setAutoHideTimer = useEventCallback_default2((autoHideDurationParam) => {
    if (!onClose || autoHideDurationParam == null) {
      return;
    }
    timerAutoHide.start(autoHideDurationParam, () => {
      handleClose(null, "timeout");
    });
  });
  React70.useEffect(() => {
    if (open) {
      setAutoHideTimer(autoHideDuration);
    }
    return timerAutoHide.clear;
  }, [open, autoHideDuration, setAutoHideTimer, timerAutoHide]);
  const handleClickAway = (event) => {
    onClose == null || onClose(event, "clickaway");
  };
  const handlePause = timerAutoHide.clear;
  const handleResume = React70.useCallback(() => {
    if (autoHideDuration != null) {
      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
    }
  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);
  const createHandleBlur = (otherHandlers) => (event) => {
    const onBlurCallback = otherHandlers.onBlur;
    onBlurCallback == null || onBlurCallback(event);
    handleResume();
  };
  const createHandleFocus = (otherHandlers) => (event) => {
    const onFocusCallback = otherHandlers.onFocus;
    onFocusCallback == null || onFocusCallback(event);
    handlePause();
  };
  const createMouseEnter = (otherHandlers) => (event) => {
    const onMouseEnterCallback = otherHandlers.onMouseEnter;
    onMouseEnterCallback == null || onMouseEnterCallback(event);
    handlePause();
  };
  const createMouseLeave = (otherHandlers) => (event) => {
    const onMouseLeaveCallback = otherHandlers.onMouseLeave;
    onMouseLeaveCallback == null || onMouseLeaveCallback(event);
    handleResume();
  };
  React70.useEffect(() => {
    if (!disableWindowBlurListener && open) {
      window.addEventListener("focus", handleResume);
      window.addEventListener("blur", handlePause);
      return () => {
        window.removeEventListener("focus", handleResume);
        window.removeEventListener("blur", handlePause);
      };
    }
    return void 0;
  }, [disableWindowBlurListener, open, handleResume, handlePause]);
  const getRootProps = (externalProps = {}) => {
    const externalEventHandlers = _extends({}, extractEventHandlers_default(parameters), extractEventHandlers_default(externalProps));
    return _extends({
      // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.
      // See https://github.com/mui/material-ui/issues/29080
      role: "presentation"
    }, externalProps, externalEventHandlers, {
      onBlur: createHandleBlur(externalEventHandlers),
      onFocus: createHandleFocus(externalEventHandlers),
      onMouseEnter: createMouseEnter(externalEventHandlers),
      onMouseLeave: createMouseLeave(externalEventHandlers)
    });
  };
  return {
    getRootProps,
    onClickAway: handleClickAway
  };
}

// node_modules/@mui/base/Snackbar/Snackbar.js
var import_jsx_runtime35 = __toESM(require_jsx_runtime());
var _excluded17 = ["autoHideDuration", "children", "disableWindowBlurListener", "exited", "onBlur", "onClose", "onFocus", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "slotProps", "slots"];
var useUtilityClasses16 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses2(slots, useClassNamesOverride(getSnackbarUtilityClass));
};
var Snackbar = React71.forwardRef(function Snackbar2(props, forwardedRef) {
  const {
    autoHideDuration = null,
    children,
    disableWindowBlurListener = false,
    exited = true,
    onClose,
    open,
    resumeHideDuration,
    slotProps = {},
    slots = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded17);
  const classes = useUtilityClasses16();
  const {
    getRootProps,
    onClickAway
  } = useSnackbar(_extends({}, props, {
    autoHideDuration,
    disableWindowBlurListener,
    onClose,
    open,
    resumeHideDuration
  }));
  const ownerState = props;
  const Root = slots.root || "div";
  const rootProps = useSlotProps_default({
    elementType: Root,
    getSlotProps: getRootProps,
    externalForwardedProps: other,
    externalSlotProps: slotProps.root,
    additionalProps: {
      ref: forwardedRef
    },
    ownerState,
    className: classes.root
  });
  const clickAwayListenerProps = useSlotProps_default({
    elementType: ClickAwayListener,
    externalSlotProps: slotProps.clickAwayListener,
    additionalProps: {
      onClickAway
    },
    ownerState
  });
  delete clickAwayListenerProps.ownerState;
  if (!open && exited) {
    return null;
  }
  return (0, import_jsx_runtime35.jsx)(ClickAwayListener, _extends({}, clickAwayListenerProps, {
    children: (0, import_jsx_runtime35.jsx)(Root, _extends({}, rootProps, {
      children
    }))
  }));
});
true ? Snackbar.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The number of milliseconds to wait before automatically calling the
   * `onClose` function. `onClose` should then set the state of the `open`
   * prop to hide the Snackbar. This behavior is disabled by default with
   * the `null` value.
   * @default null
   */
  autoHideDuration: import_prop_types24.default.number,
  /**
   * @ignore
   */
  children: import_prop_types24.default.node,
  /**
   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
   * @default false
   */
  disableWindowBlurListener: import_prop_types24.default.bool,
  /**
   * The prop used to handle exited transition and unmount the component.
   * @default true
   */
  exited: import_prop_types24.default.bool,
  /**
   * Callback fired when the component requests to be closed.
   * Typically `onClose` is used to set state in the parent component,
   * which is used to control the `Snackbar` `open` prop.
   * The `reason` parameter can optionally be used to control the response to `onClose`,
   * for example ignoring `clickaway`.
   *
   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.
   * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`, or `"escapeKeyDown"`.
   */
  onClose: import_prop_types24.default.func,
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types24.default.bool,
  /**
   * The number of milliseconds to wait before dismissing after user interaction.
   * If `autoHideDuration` prop isn't specified, it does nothing.
   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
   * we default to `autoHideDuration / 2` ms.
   */
  resumeHideDuration: import_prop_types24.default.number,
  /**
   * The props used for each slot inside the Snackbar.
   * @default {}
   */
  slotProps: import_prop_types24.default.shape({
    clickAwayListener: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.shape({
      children: import_prop_types24.default.element.isRequired,
      disableReactTree: import_prop_types24.default.bool,
      mouseEvent: import_prop_types24.default.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", false]),
      onClickAway: import_prop_types24.default.func,
      touchEvent: import_prop_types24.default.oneOf(["onTouchEnd", "onTouchStart", false])
    })]),
    root: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object])
  }),
  /**
   * The components used for each slot inside the Snackbar.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types24.default.shape({
    root: import_prop_types24.default.elementType
  })
} : void 0;

// node_modules/@mui/base/Switch/Switch.js
var React73 = __toESM(require_react());
var import_prop_types25 = __toESM(require_prop_types());

// node_modules/@mui/base/useSwitch/useSwitch.js
var React72 = __toESM(require_react());
function useSwitch(props) {
  const {
    checked: checkedProp,
    defaultChecked,
    disabled,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible,
    readOnly,
    required
  } = props;
  const [checked, setCheckedState] = useControlled2({
    controlled: checkedProp,
    default: Boolean(defaultChecked),
    name: "Switch",
    state: "checked"
  });
  const createHandleInputChange = (otherProps) => (event) => {
    var _otherProps$onChange;
    if (event.nativeEvent.defaultPrevented) {
      return;
    }
    setCheckedState(event.target.checked);
    onChange == null || onChange(event);
    (_otherProps$onChange = otherProps.onChange) == null || _otherProps$onChange.call(otherProps, event);
  };
  const {
    isFocusVisibleRef,
    onBlur: handleBlurVisible,
    onFocus: handleFocusVisible,
    ref: focusVisibleRef
  } = useIsFocusVisible2();
  const [focusVisible, setFocusVisible] = React72.useState(false);
  if (disabled && focusVisible) {
    setFocusVisible(false);
  }
  React72.useEffect(() => {
    isFocusVisibleRef.current = focusVisible;
  }, [focusVisible, isFocusVisibleRef]);
  const inputRef = React72.useRef(null);
  const createHandleFocus = (otherProps) => (event) => {
    var _otherProps$onFocus;
    if (!inputRef.current) {
      inputRef.current = event.currentTarget;
    }
    handleFocusVisible(event);
    if (isFocusVisibleRef.current === true) {
      setFocusVisible(true);
      onFocusVisible == null || onFocusVisible(event);
    }
    onFocus == null || onFocus(event);
    (_otherProps$onFocus = otherProps.onFocus) == null || _otherProps$onFocus.call(otherProps, event);
  };
  const createHandleBlur = (otherProps) => (event) => {
    var _otherProps$onBlur;
    handleBlurVisible(event);
    if (isFocusVisibleRef.current === false) {
      setFocusVisible(false);
    }
    onBlur == null || onBlur(event);
    (_otherProps$onBlur = otherProps.onBlur) == null || _otherProps$onBlur.call(otherProps, event);
  };
  const handleInputRef = useForkRef2(focusVisibleRef, inputRef);
  const getInputProps = (otherProps = {}) => _extends({
    checked: checkedProp,
    defaultChecked,
    disabled,
    readOnly,
    ref: handleInputRef,
    required,
    type: "checkbox",
    role: "switch",
    "aria-checked": checkedProp
  }, otherProps, {
    onChange: createHandleInputChange(otherProps),
    onFocus: createHandleFocus(otherProps),
    onBlur: createHandleBlur(otherProps)
  });
  return {
    checked,
    disabled: Boolean(disabled),
    focusVisible,
    getInputProps,
    inputRef: handleInputRef,
    readOnly: Boolean(readOnly)
  };
}

// node_modules/@mui/base/Switch/switchClasses.js
var COMPONENT_NAME17 = "Switch";
function getSwitchUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME17, slot);
}
var switchClasses = generateUtilityClasses4(COMPONENT_NAME17, ["root", "input", "track", "thumb", "checked", "disabled", "focusVisible", "readOnly"]);

// node_modules/@mui/base/Switch/Switch.js
var import_jsx_runtime36 = __toESM(require_jsx_runtime());
var import_jsx_runtime37 = __toESM(require_jsx_runtime());
var _excluded18 = ["checked", "defaultChecked", "disabled", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required", "slotProps", "slots"];
var useUtilityClasses17 = (ownerState) => {
  const {
    checked,
    disabled,
    focusVisible,
    readOnly
  } = ownerState;
  const slots = {
    root: ["root", checked && "checked", disabled && "disabled", focusVisible && "focusVisible", readOnly && "readOnly"],
    thumb: ["thumb"],
    input: ["input"],
    track: ["track"]
  };
  return composeClasses2(slots, useClassNamesOverride(getSwitchUtilityClass));
};
var Switch = React73.forwardRef(function Switch2(props, forwardedRef) {
  var _slots$root, _slots$thumb, _slots$input, _slots$track;
  const {
    slotProps = {},
    slots = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded18);
  const {
    getInputProps,
    checked,
    disabled,
    focusVisible,
    readOnly
  } = useSwitch(props);
  const ownerState = _extends({}, props, {
    checked,
    disabled,
    focusVisible,
    readOnly
  });
  const classes = useUtilityClasses17(ownerState);
  const Root = (_slots$root = slots.root) != null ? _slots$root : "span";
  const rootProps = useSlotProps_default({
    elementType: Root,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      ref: forwardedRef
    },
    ownerState,
    className: classes.root
  });
  const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : "span";
  const thumbProps = useSlotProps_default({
    elementType: Thumb,
    externalSlotProps: slotProps.thumb,
    ownerState,
    className: classes.thumb
  });
  const Input5 = (_slots$input = slots.input) != null ? _slots$input : "input";
  const inputProps = useSlotProps_default({
    elementType: Input5,
    getSlotProps: getInputProps,
    externalSlotProps: slotProps.input,
    ownerState,
    className: classes.input
  });
  const Track = slots.track === null ? () => null : (_slots$track = slots.track) != null ? _slots$track : "span";
  const trackProps = useSlotProps_default({
    elementType: Track,
    externalSlotProps: slotProps.track,
    ownerState,
    className: classes.track
  });
  return (0, import_jsx_runtime37.jsxs)(Root, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime36.jsx)(Track, _extends({}, trackProps)), (0, import_jsx_runtime36.jsx)(Thumb, _extends({}, thumbProps)), (0, import_jsx_runtime36.jsx)(Input5, _extends({}, inputProps))]
  }));
});
true ? Switch.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the component is checked.
   */
  checked: import_prop_types25.default.bool,
  /**
   * Class name applied to the root element.
   */
  className: import_prop_types25.default.string,
  /**
   * The default checked state. Use when the component is not controlled.
   */
  defaultChecked: import_prop_types25.default.bool,
  /**
   * If `true`, the component is disabled.
   */
  disabled: import_prop_types25.default.bool,
  /**
   * @ignore
   */
  onBlur: import_prop_types25.default.func,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: import_prop_types25.default.func,
  /**
   * @ignore
   */
  onFocus: import_prop_types25.default.func,
  /**
   * @ignore
   */
  onFocusVisible: import_prop_types25.default.func,
  /**
   * If `true`, the component is read only.
   */
  readOnly: import_prop_types25.default.bool,
  /**
   * If `true`, the `input` element is required.
   */
  required: import_prop_types25.default.bool,
  /**
   * The props used for each slot inside the Switch.
   * @default {}
   */
  slotProps: import_prop_types25.default.shape({
    input: import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object]),
    root: import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object]),
    thumb: import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object]),
    track: import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object])
  }),
  /**
   * The components used for each slot inside the Switch.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types25.default.shape({
    input: import_prop_types25.default.elementType,
    root: import_prop_types25.default.elementType,
    thumb: import_prop_types25.default.elementType,
    track: import_prop_types25.default.oneOfType([import_prop_types25.default.elementType, import_prop_types25.default.oneOf([null])])
  })
} : void 0;

// node_modules/@mui/base/TablePagination/TablePagination.js
var React75 = __toESM(require_react());
var import_prop_types26 = __toESM(require_prop_types());

// node_modules/@mui/base/TablePagination/TablePaginationActions.js
var React74 = __toESM(require_react());
var import_jsx_runtime38 = __toESM(require_jsx_runtime());
var import_jsx_runtime39 = __toESM(require_jsx_runtime());
var _excluded19 = ["count", "getItemAriaLabel", "onPageChange", "page", "rowsPerPage", "showFirstButton", "showLastButton", "direction", "ownerState", "slotProps", "slots"];
var _span2;
var _span22;
var _span3;
var _span4;
function LastPageIconDefault() {
  return _span2 || (_span2 = (0, import_jsx_runtime38.jsx)("span", {
    children: "⇾|"
  }));
}
function FirstPageIconDefault() {
  return _span22 || (_span22 = (0, import_jsx_runtime38.jsx)("span", {
    children: "|⇽"
  }));
}
function NextPageIconDefault() {
  return _span3 || (_span3 = (0, import_jsx_runtime38.jsx)("span", {
    children: "⇾"
  }));
}
function BackPageIconDefault() {
  return _span4 || (_span4 = (0, import_jsx_runtime38.jsx)("span", {
    children: "⇽"
  }));
}
function defaultGetAriaLabel(type) {
  return `Go to ${type} page`;
}
var TablePaginationActions = React74.forwardRef(function TablePaginationActions2(props, forwardedRef) {
  var _slots$root, _slots$firstButton, _slots$lastButton, _slots$nextButton, _slots$backButton, _slots$lastPageIcon, _slots$firstPageIcon, _slots$nextPageIcon, _slots$backPageIcon;
  const {
    count,
    getItemAriaLabel = defaultGetAriaLabel,
    onPageChange,
    page,
    rowsPerPage,
    showFirstButton = false,
    showLastButton = false,
    direction,
    slotProps = {},
    slots = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);
  const ownerState = props;
  const handleFirstPageButtonClick = (event) => {
    onPageChange(event, 0);
  };
  const handleBackButtonClick = (event) => {
    onPageChange(event, page - 1);
  };
  const handleNextButtonClick = (event) => {
    onPageChange(event, page + 1);
  };
  const handleLastPageButtonClick = (event) => {
    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
  };
  const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
  const rootProps = useSlotProps_default({
    elementType: Root,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      ref: forwardedRef
    },
    ownerState
  });
  const FirstButton = (_slots$firstButton = slots.firstButton) != null ? _slots$firstButton : "button";
  const firstButtonProps = useSlotProps_default({
    elementType: FirstButton,
    externalSlotProps: slotProps.firstButton,
    additionalProps: {
      onClick: handleFirstPageButtonClick,
      disabled: page === 0,
      "aria-label": getItemAriaLabel("first", page),
      title: getItemAriaLabel("first", page)
    },
    ownerState
  });
  const LastButton = (_slots$lastButton = slots.lastButton) != null ? _slots$lastButton : "button";
  const lastButtonProps = useSlotProps_default({
    elementType: LastButton,
    externalSlotProps: slotProps.lastButton,
    additionalProps: {
      onClick: handleLastPageButtonClick,
      disabled: page >= Math.ceil(count / rowsPerPage) - 1,
      "aria-label": getItemAriaLabel("last", page),
      title: getItemAriaLabel("last", page)
    },
    ownerState
  });
  const NextButton = (_slots$nextButton = slots.nextButton) != null ? _slots$nextButton : "button";
  const nextButtonProps = useSlotProps_default({
    elementType: NextButton,
    externalSlotProps: slotProps.nextButton,
    additionalProps: {
      onClick: handleNextButtonClick,
      disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false,
      "aria-label": getItemAriaLabel("next", page),
      title: getItemAriaLabel("next", page)
    },
    ownerState
  });
  const BackButton = (_slots$backButton = slots.backButton) != null ? _slots$backButton : "button";
  const backButtonProps = useSlotProps_default({
    elementType: BackButton,
    externalSlotProps: slotProps.backButton,
    additionalProps: {
      onClick: handleBackButtonClick,
      disabled: page === 0,
      "aria-label": getItemAriaLabel("previous", page),
      title: getItemAriaLabel("previous", page)
    },
    ownerState
  });
  const LastPageIcon = (_slots$lastPageIcon = slots.lastPageIcon) != null ? _slots$lastPageIcon : LastPageIconDefault;
  const FirstPageIcon = (_slots$firstPageIcon = slots.firstPageIcon) != null ? _slots$firstPageIcon : FirstPageIconDefault;
  const NextPageIcon = (_slots$nextPageIcon = slots.nextPageIcon) != null ? _slots$nextPageIcon : NextPageIconDefault;
  const BackPageIcon = (_slots$backPageIcon = slots.backPageIcon) != null ? _slots$backPageIcon : BackPageIconDefault;
  return (0, import_jsx_runtime39.jsxs)(Root, _extends({}, rootProps, {
    children: [showFirstButton && (0, import_jsx_runtime38.jsx)(FirstButton, _extends({}, firstButtonProps, {
      children: direction === "rtl" ? (0, import_jsx_runtime38.jsx)(LastPageIcon, {}) : (0, import_jsx_runtime38.jsx)(FirstPageIcon, {})
    })), (0, import_jsx_runtime38.jsx)(BackButton, _extends({}, backButtonProps, {
      children: direction === "rtl" ? (0, import_jsx_runtime38.jsx)(NextPageIcon, {}) : (0, import_jsx_runtime38.jsx)(BackPageIcon, {})
    })), (0, import_jsx_runtime38.jsx)(NextButton, _extends({}, nextButtonProps, {
      children: direction === "rtl" ? (0, import_jsx_runtime38.jsx)(BackPageIcon, {}) : (0, import_jsx_runtime38.jsx)(NextPageIcon, {})
    })), showLastButton && (0, import_jsx_runtime38.jsx)(LastButton, _extends({}, lastButtonProps, {
      children: direction === "rtl" ? (0, import_jsx_runtime38.jsx)(FirstPageIcon, {}) : (0, import_jsx_runtime38.jsx)(LastPageIcon, {})
    }))]
  }));
});

// node_modules/@mui/base/TablePagination/tablePaginationClasses.js
var COMPONENT_NAME18 = "TablePagination";
function getTablePaginationUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME18, slot);
}
var tablePaginationClasses = generateUtilityClasses4(COMPONENT_NAME18, ["root", "toolbar", "spacer", "selectLabel", "selectRoot", "select", "selectIcon", "input", "menuItem", "displayedRows", "actions"]);

// node_modules/@mui/base/TablePagination/TablePagination.js
var import_jsx_runtime40 = __toESM(require_jsx_runtime());
var import_react2 = __toESM(require_react());
var import_jsx_runtime41 = __toESM(require_jsx_runtime());
var _excluded20 = ["colSpan", "count", "getItemAriaLabel", "labelDisplayedRows", "labelId", "labelRowsPerPage", "onPageChange", "onRowsPerPageChange", "page", "rowsPerPage", "rowsPerPageOptions", "selectId", "slotProps", "slots"];
function defaultLabelDisplayedRows({
  from,
  to,
  count
}) {
  return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
}
function defaultGetAriaLabel2(type) {
  return `Go to ${type} page`;
}
var useUtilityClasses18 = () => {
  const slots = {
    root: ["root"],
    toolbar: ["toolbar"],
    spacer: ["spacer"],
    selectLabel: ["selectLabel"],
    select: ["select"],
    input: ["input"],
    selectIcon: ["selectIcon"],
    menuItem: ["menuItem"],
    displayedRows: ["displayedRows"],
    actions: ["actions"]
  };
  return composeClasses2(slots, useClassNamesOverride(getTablePaginationUtilityClass));
};
var TablePagination = React75.forwardRef(function TablePagination2(props, forwardedRef) {
  var _slots$root, _slots$select, _slots$actions, _slots$menuItem, _slots$selectLabel, _slots$displayedRows, _slots$toolbar, _slots$spacer;
  const {
    colSpan: colSpanProp,
    count,
    getItemAriaLabel = defaultGetAriaLabel2,
    labelDisplayedRows = defaultLabelDisplayedRows,
    labelId: labelIdProp,
    labelRowsPerPage = "Rows per page:",
    onPageChange,
    onRowsPerPageChange,
    page,
    rowsPerPage,
    rowsPerPageOptions = [10, 25, 50, 100],
    selectId: selectIdProp,
    slotProps = {},
    slots = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);
  const ownerState = props;
  const classes = useUtilityClasses18();
  let colSpan;
  const Root = (_slots$root = slots.root) != null ? _slots$root : "td";
  if (Root === "td" || !isHostComponent_default(Root)) {
    colSpan = colSpanProp || 1e3;
  }
  const getLabelDisplayedRowsTo = () => {
    if (count === -1) {
      return (page + 1) * rowsPerPage;
    }
    return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);
  };
  const selectId = useId2(selectIdProp);
  const labelId = useId2(labelIdProp);
  const rootProps = useSlotProps_default({
    elementType: Root,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      colSpan,
      ref: forwardedRef
    },
    ownerState,
    className: classes.root
  });
  const Select5 = (_slots$select = slots.select) != null ? _slots$select : "select";
  const selectProps = useSlotProps_default({
    elementType: Select5,
    externalSlotProps: slotProps.select,
    additionalProps: {
      value: rowsPerPage,
      id: selectId,
      onChange: (event) => onRowsPerPageChange && onRowsPerPageChange(event),
      "aria-label": rowsPerPage.toString(),
      "aria-labelledby": [labelId, selectId].filter(Boolean).join(" ") || void 0
    },
    ownerState,
    className: classes.select
  });
  const Actions = (_slots$actions = slots.actions) != null ? _slots$actions : TablePaginationActions;
  const actionsProps = useSlotProps_default({
    elementType: Actions,
    externalSlotProps: slotProps.actions,
    additionalProps: {
      page,
      rowsPerPage,
      count,
      onPageChange,
      getItemAriaLabel
    },
    ownerState,
    className: classes.actions
  });
  const MenuItem6 = (_slots$menuItem = slots.menuItem) != null ? _slots$menuItem : "option";
  const menuItemProps = useSlotProps_default({
    elementType: MenuItem6,
    externalSlotProps: slotProps.menuItem,
    additionalProps: {
      value: void 0
    },
    ownerState,
    className: classes.menuItem
  });
  const SelectLabel = (_slots$selectLabel = slots.selectLabel) != null ? _slots$selectLabel : "p";
  const selectLabelProps = useSlotProps_default({
    elementType: SelectLabel,
    externalSlotProps: slotProps.selectLabel,
    additionalProps: {
      id: labelId
    },
    ownerState,
    className: classes.selectLabel
  });
  const DisplayedRows = (_slots$displayedRows = slots.displayedRows) != null ? _slots$displayedRows : "p";
  const displayedRowsProps = useSlotProps_default({
    elementType: DisplayedRows,
    externalSlotProps: slotProps.displayedRows,
    ownerState,
    className: classes.displayedRows
  });
  const Toolbar = (_slots$toolbar = slots.toolbar) != null ? _slots$toolbar : "div";
  const toolbarProps = useSlotProps_default({
    elementType: Toolbar,
    externalSlotProps: slotProps.toolbar,
    ownerState,
    className: classes.toolbar
  });
  const Spacer = (_slots$spacer = slots.spacer) != null ? _slots$spacer : "div";
  const spacerProps = useSlotProps_default({
    elementType: Spacer,
    externalSlotProps: slotProps.spacer,
    ownerState,
    className: classes.spacer
  });
  return (0, import_jsx_runtime40.jsx)(Root, _extends({}, rootProps, {
    children: (0, import_jsx_runtime41.jsxs)(Toolbar, _extends({}, toolbarProps, {
      children: [(0, import_jsx_runtime40.jsx)(Spacer, _extends({}, spacerProps)), rowsPerPageOptions.length > 1 && (0, import_jsx_runtime40.jsx)(SelectLabel, _extends({}, selectLabelProps, {
        children: labelRowsPerPage
      })), rowsPerPageOptions.length > 1 && (0, import_jsx_runtime40.jsx)(Select5, _extends({}, selectProps, {
        children: rowsPerPageOptions.map((rowsPerPageOption) => (0, import_react2.createElement)(MenuItem6, _extends({}, menuItemProps, {
          key: typeof rowsPerPageOption !== "number" && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,
          value: typeof rowsPerPageOption !== "number" && rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
        }), typeof rowsPerPageOption !== "number" && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))
      })), (0, import_jsx_runtime40.jsx)(DisplayedRows, _extends({}, displayedRowsProps, {
        children: labelDisplayedRows({
          from: count === 0 ? 0 : page * rowsPerPage + 1,
          to: getLabelDisplayedRowsTo(),
          count: count === -1 ? -1 : count,
          page
        })
      })), (0, import_jsx_runtime40.jsx)(Actions, _extends({}, actionsProps))]
    }))
  }));
});
true ? TablePagination.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  colSpan: import_prop_types26.default.number,
  /**
   * The total number of rows.
   *
   * To enable server side pagination for an unknown number of items, provide -1.
   */
  count: import_prop_types26.default.number.isRequired,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
   * This is important for screen reader users.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').
   * @returns {string}
   * @default function defaultGetAriaLabel(type: ItemAriaLabelType) {
   *   return `Go to ${type} page`;
   * }
   */
  getItemAriaLabel: import_prop_types26.default.func,
  /**
   * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`
   * object.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default function defaultLabelDisplayedRows({ from, to, count }: LabelDisplayedRowsArgs) {
   *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
   * }
   */
  labelDisplayedRows: import_prop_types26.default.func,
  /**
   * Id of the label element within the pagination.
   */
  labelId: import_prop_types26.default.string,
  /**
   * Customize the rows per page label.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Rows per page:'
   */
  labelRowsPerPage: import_prop_types26.default.node,
  /**
   * Callback fired when the page is changed.
   *
   * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.
   * @param {number} page The page selected.
   */
  onPageChange: import_prop_types26.default.func.isRequired,
  /**
   * Callback fired when the number of rows per page is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   */
  onRowsPerPageChange: import_prop_types26.default.func,
  /**
   * The zero-based index of the current page.
   */
  page: chainPropTypes2(integerPropType_default2.isRequired, (props) => {
    const {
      count,
      page,
      rowsPerPage
    } = props;
    if (count === -1) {
      return null;
    }
    const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);
    if (page < 0 || page > newLastPage) {
      return new Error(`MUI: The page prop of a TablePagination is out of range (0 to ${newLastPage}, but page is ${page}).`);
    }
    return null;
  }),
  /**
   * The number of rows per page.
   *
   * Set -1 to display all the rows.
   */
  rowsPerPage: integerPropType_default2.isRequired,
  /**
   * Customizes the options of the rows per page select field. If less than two options are
   * available, no select field will be displayed.
   * Use -1 for the value with a custom label to show all the rows.
   * @default [10, 25, 50, 100]
   */
  rowsPerPageOptions: import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.shape({
    label: import_prop_types26.default.string.isRequired,
    value: import_prop_types26.default.number.isRequired
  })]).isRequired),
  /**
   * Id of the select element within the pagination.
   */
  selectId: import_prop_types26.default.string,
  /**
   * The props used for each slot inside the TablePagination.
   * @default {}
   */
  slotProps: import_prop_types26.default.shape({
    actions: import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object]),
    displayedRows: import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object]),
    menuItem: import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object]),
    root: import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object]),
    select: import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object]),
    selectLabel: import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object]),
    spacer: import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object]),
    toolbar: import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object])
  }),
  /**
   * The components used for each slot inside the TablePagination.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types26.default.shape({
    actions: import_prop_types26.default.elementType,
    displayedRows: import_prop_types26.default.elementType,
    menuItem: import_prop_types26.default.elementType,
    root: import_prop_types26.default.elementType,
    select: import_prop_types26.default.elementType,
    selectLabel: import_prop_types26.default.elementType,
    spacer: import_prop_types26.default.elementType,
    toolbar: import_prop_types26.default.elementType
  })
} : void 0;

// node_modules/@mui/base/TabPanel/TabPanel.js
var React81 = __toESM(require_react());
var import_prop_types28 = __toESM(require_prop_types());

// node_modules/@mui/base/TabPanel/tabPanelClasses.js
var COMPONENT_NAME19 = "TabPanel";
function getTabPanelUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME19, slot);
}
var tabPanelClasses = generateUtilityClasses4(COMPONENT_NAME19, ["root", "hidden"]);

// node_modules/@mui/base/useTabPanel/useTabPanel.js
var React80 = __toESM(require_react());

// node_modules/@mui/base/Tabs/Tabs.js
var React79 = __toESM(require_react());
var import_prop_types27 = __toESM(require_prop_types());

// node_modules/@mui/base/Tabs/tabsClasses.js
var COMPONENT_NAME20 = "Tabs";
function getTabsUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME20, slot);
}
var tabsClasses = generateUtilityClasses4(COMPONENT_NAME20, ["root", "horizontal", "vertical"]);

// node_modules/@mui/base/useTabs/useTabs.js
var React76 = __toESM(require_react());
function useTabs(parameters) {
  const {
    value: valueProp,
    defaultValue,
    onChange,
    orientation = "horizontal",
    direction = "ltr",
    selectionFollowsFocus = false
  } = parameters;
  const [value, setValue] = useControlled2({
    controlled: valueProp,
    default: defaultValue,
    name: "Tabs",
    state: "value"
  });
  const onSelected = React76.useCallback((event, newValue) => {
    setValue(newValue);
    onChange == null || onChange(event, newValue);
  }, [onChange, setValue]);
  const {
    subitems: tabPanels,
    contextValue: compoundComponentContextValue
  } = useCompoundParent();
  const tabIdLookup = React76.useRef(() => void 0);
  const getTabPanelId = React76.useCallback((tabValue) => {
    var _tabPanels$get;
    return (_tabPanels$get = tabPanels.get(tabValue)) == null ? void 0 : _tabPanels$get.id;
  }, [tabPanels]);
  const getTabId = React76.useCallback((tabPanelId) => {
    return tabIdLookup.current(tabPanelId);
  }, []);
  const registerTabIdLookup = React76.useCallback((lookupFunction) => {
    tabIdLookup.current = lookupFunction;
  }, []);
  return {
    contextValue: _extends({
      direction,
      getTabId,
      getTabPanelId,
      onSelected,
      orientation,
      registerTabIdLookup,
      selectionFollowsFocus,
      value
    }, compoundComponentContextValue)
  };
}

// node_modules/@mui/base/useTabs/TabsProvider.js
var React78 = __toESM(require_react());

// node_modules/@mui/base/Tabs/TabsContext.js
var React77 = __toESM(require_react());
var TabsContext = React77.createContext(null);
if (true) {
  TabsContext.displayName = "TabsContext";
}
function useTabsContext() {
  const context = React77.useContext(TabsContext);
  if (context == null) {
    throw new Error("No TabsContext provided");
  }
  return context;
}

// node_modules/@mui/base/useTabs/TabsProvider.js
var import_jsx_runtime42 = __toESM(require_jsx_runtime());
function TabsProvider(props) {
  const {
    value: valueProp,
    children
  } = props;
  const {
    direction,
    getItemIndex,
    onSelected,
    orientation,
    registerItem,
    registerTabIdLookup,
    selectionFollowsFocus,
    totalSubitemCount,
    value,
    getTabId,
    getTabPanelId
  } = valueProp;
  const compoundComponentContextValue = React78.useMemo(() => ({
    getItemIndex,
    registerItem,
    totalSubitemCount
  }), [registerItem, getItemIndex, totalSubitemCount]);
  const tabsContextValue = React78.useMemo(() => ({
    direction,
    getTabId,
    getTabPanelId,
    onSelected,
    orientation,
    registerTabIdLookup,
    selectionFollowsFocus,
    value
  }), [direction, getTabId, getTabPanelId, onSelected, orientation, registerTabIdLookup, selectionFollowsFocus, value]);
  return (0, import_jsx_runtime42.jsx)(CompoundComponentContext.Provider, {
    value: compoundComponentContextValue,
    children: (0, import_jsx_runtime42.jsx)(TabsContext.Provider, {
      value: tabsContextValue,
      children
    })
  });
}

// node_modules/@mui/base/Tabs/Tabs.js
var import_jsx_runtime43 = __toESM(require_jsx_runtime());
var _excluded21 = ["children", "value", "defaultValue", "orientation", "direction", "onChange", "selectionFollowsFocus", "slotProps", "slots"];
var useUtilityClasses19 = (ownerState) => {
  const {
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation]
  };
  return composeClasses2(slots, useClassNamesOverride(getTabsUtilityClass));
};
var Tabs = React79.forwardRef(function Tabs2(props, forwardedRef) {
  var _slots$root;
  const {
    children,
    orientation = "horizontal",
    direction = "ltr",
    slotProps = {},
    slots = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded21);
  const ownerState = _extends({}, props, {
    orientation,
    direction
  });
  const {
    contextValue
  } = useTabs(ownerState);
  const classes = useUtilityClasses19(ownerState);
  const TabsRoot2 = (_slots$root = slots.root) != null ? _slots$root : "div";
  const tabsRootProps = useSlotProps_default({
    elementType: TabsRoot2,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      ref: forwardedRef
    },
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime43.jsx)(TabsRoot2, _extends({}, tabsRootProps, {
    children: (0, import_jsx_runtime43.jsx)(TabsProvider, {
      value: contextValue,
      children
    })
  }));
});
true ? Tabs.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types27.default.node,
  /**
   * @ignore
   */
  className: import_prop_types27.default.string,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: import_prop_types27.default.oneOfType([import_prop_types27.default.number, import_prop_types27.default.string]),
  /**
   * The direction of the text.
   * @default 'ltr'
   */
  direction: import_prop_types27.default.oneOf(["ltr", "rtl"]),
  /**
   * Callback invoked when new value is being set.
   */
  onChange: import_prop_types27.default.func,
  /**
   * The component orientation (layout flow direction).
   * @default 'horizontal'
   */
  orientation: import_prop_types27.default.oneOf(["horizontal", "vertical"]),
  /**
   * If `true` the selected tab changes on focus. Otherwise it only
   * changes on activation.
   */
  selectionFollowsFocus: import_prop_types27.default.bool,
  /**
   * The props used for each slot inside the Tabs.
   * @default {}
   */
  slotProps: import_prop_types27.default.shape({
    root: import_prop_types27.default.oneOfType([import_prop_types27.default.func, import_prop_types27.default.object])
  }),
  /**
   * The components used for each slot inside the Tabs.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types27.default.shape({
    root: import_prop_types27.default.elementType
  }),
  /**
   * The value of the currently selected `Tab`.
   * If you don't want any selected `Tab`, you can set this prop to `null`.
   */
  value: import_prop_types27.default.oneOfType([import_prop_types27.default.number, import_prop_types27.default.string])
} : void 0;

// node_modules/@mui/base/useTabPanel/useTabPanel.js
function tabPanelValueGenerator(otherTabPanelValues) {
  return otherTabPanelValues.size;
}
function useTabPanel(parameters) {
  const {
    value: valueParam,
    id: idParam,
    rootRef: externalRef
  } = parameters;
  const context = useTabsContext();
  if (context === null) {
    throw new Error("No TabContext provided");
  }
  const {
    value: selectedTabValue,
    getTabId
  } = context;
  const id = useId2(idParam);
  const ref = React80.useRef(null);
  const handleRef = useForkRef2(ref, externalRef);
  const metadata = React80.useMemo(() => ({
    id,
    ref
  }), [id]);
  const {
    id: value
  } = useCompoundItem(valueParam != null ? valueParam : tabPanelValueGenerator, metadata);
  const hidden = value !== selectedTabValue;
  const correspondingTabId = value !== void 0 ? getTabId(value) : void 0;
  const getRootProps = (externalProps = {}) => {
    return _extends({
      "aria-labelledby": correspondingTabId != null ? correspondingTabId : void 0,
      hidden,
      id: id != null ? id : void 0
    }, externalProps, {
      ref: handleRef
    });
  };
  return {
    hidden,
    getRootProps,
    rootRef: handleRef
  };
}

// node_modules/@mui/base/TabPanel/TabPanel.js
var import_jsx_runtime44 = __toESM(require_jsx_runtime());
var _excluded23 = ["children", "value", "slotProps", "slots"];
var useUtilityClasses20 = (ownerState) => {
  const {
    hidden
  } = ownerState;
  const slots = {
    root: ["root", hidden && "hidden"]
  };
  return composeClasses2(slots, useClassNamesOverride(getTabPanelUtilityClass));
};
var TabPanel = React81.forwardRef(function TabPanel2(props, forwardedRef) {
  var _slots$root;
  const {
    children,
    slotProps = {},
    slots = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded23);
  const {
    hidden,
    getRootProps
  } = useTabPanel(props);
  const ownerState = _extends({}, props, {
    hidden
  });
  const classes = useUtilityClasses20(ownerState);
  const TabPanelRoot2 = (_slots$root = slots.root) != null ? _slots$root : "div";
  const tabPanelRootProps = useSlotProps_default({
    elementType: TabPanelRoot2,
    getSlotProps: getRootProps,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      role: "tabpanel",
      ref: forwardedRef
    },
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime44.jsx)(TabPanelRoot2, _extends({}, tabPanelRootProps, {
    children: !hidden && children
  }));
});
true ? TabPanel.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types28.default.node,
  /**
   * @ignore
   */
  className: import_prop_types28.default.string,
  /**
   * The props used for each slot inside the TabPanel.
   * @default {}
   */
  slotProps: import_prop_types28.default.shape({
    root: import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object])
  }),
  /**
   * The components used for each slot inside the TabPanel.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types28.default.shape({
    root: import_prop_types28.default.elementType
  }),
  /**
   * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.
   * If not provided, it will fall back to the index of the panel.
   * It is recommended to explicitly provide it, as it's required for the tab panel to be rendered on the server.
   */
  value: import_prop_types28.default.oneOfType([import_prop_types28.default.number, import_prop_types28.default.string])
} : void 0;

// node_modules/@mui/base/TabsList/TabsList.js
var React84 = __toESM(require_react());
var import_prop_types29 = __toESM(require_prop_types());

// node_modules/@mui/base/TabsList/tabsListClasses.js
var COMPONENT_NAME21 = "TabsList";
function getTabsListUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME21, slot);
}
var tabsListClasses = generateUtilityClasses4(COMPONENT_NAME21, ["root", "horizontal", "vertical"]);

// node_modules/@mui/base/useTabsList/useTabsList.js
var React82 = __toESM(require_react());

// node_modules/@mui/base/useTabsList/useTabsList.types.js
var TabsListActionTypes = {
  valueChange: "valueChange"
};

// node_modules/@mui/base/useTabsList/tabsListReducer.js
function tabsListReducer(state, action) {
  if (action.type === TabsListActionTypes.valueChange) {
    return _extends({}, state, {
      highlightedValue: action.value
    });
  }
  const newState = listReducer(state, action);
  const {
    context: {
      selectionFollowsFocus
    }
  } = action;
  if (action.type === ListActionTypes.itemsChange) {
    if (newState.selectedValues.length > 0) {
      return _extends({}, newState, {
        highlightedValue: newState.selectedValues[0]
      });
    }
    moveHighlight(null, "reset", action.context);
  }
  if (selectionFollowsFocus && newState.highlightedValue != null) {
    return _extends({}, newState, {
      selectedValues: [newState.highlightedValue]
    });
  }
  return newState;
}

// node_modules/@mui/base/useTabsList/useTabsList.js
function useTabsList(parameters) {
  var _selectedValues$;
  const {
    rootRef: externalRef
  } = parameters;
  const {
    direction = "ltr",
    onSelected,
    orientation = "horizontal",
    value,
    registerTabIdLookup,
    selectionFollowsFocus
  } = useTabsContext();
  const {
    subitems,
    contextValue: compoundComponentContextValue
  } = useCompoundParent();
  const tabIdLookup = React82.useCallback((tabValue) => {
    var _subitems$get;
    return (_subitems$get = subitems.get(tabValue)) == null ? void 0 : _subitems$get.id;
  }, [subitems]);
  registerTabIdLookup(tabIdLookup);
  const subitemKeys = React82.useMemo(() => Array.from(subitems.keys()), [subitems]);
  const getTabElement = React82.useCallback((tabValue) => {
    var _subitems$get$ref$cur, _subitems$get2;
    if (tabValue == null) {
      return null;
    }
    return (_subitems$get$ref$cur = (_subitems$get2 = subitems.get(tabValue)) == null ? void 0 : _subitems$get2.ref.current) != null ? _subitems$get$ref$cur : null;
  }, [subitems]);
  const isRtl = direction === "rtl";
  let listOrientation;
  if (orientation === "vertical") {
    listOrientation = "vertical";
  } else {
    listOrientation = isRtl ? "horizontal-rtl" : "horizontal-ltr";
  }
  const handleChange = React82.useCallback((event, newValue) => {
    var _newValue$;
    onSelected(event, (_newValue$ = newValue[0]) != null ? _newValue$ : null);
  }, [onSelected]);
  const controlledProps = React82.useMemo(() => {
    if (value === void 0) {
      return {};
    }
    return value != null ? {
      selectedValues: [value]
    } : {
      selectedValues: []
    };
  }, [value]);
  const isItemDisabled = React82.useCallback((item) => {
    var _subitems$get$disable, _subitems$get3;
    return (_subitems$get$disable = (_subitems$get3 = subitems.get(item)) == null ? void 0 : _subitems$get3.disabled) != null ? _subitems$get$disable : false;
  }, [subitems]);
  const {
    contextValue: listContextValue,
    dispatch,
    getRootProps: getListboxRootProps,
    state: {
      highlightedValue,
      selectedValues
    },
    rootRef: mergedRootRef
  } = useList({
    controlledProps,
    disabledItemsFocusable: !selectionFollowsFocus,
    focusManagement: "DOM",
    getItemDomElement: getTabElement,
    isItemDisabled,
    items: subitemKeys,
    rootRef: externalRef,
    onChange: handleChange,
    orientation: listOrientation,
    reducerActionContext: React82.useMemo(() => ({
      selectionFollowsFocus: selectionFollowsFocus || false
    }), [selectionFollowsFocus]),
    selectionMode: "single",
    stateReducer: tabsListReducer
  });
  React82.useEffect(() => {
    if (value === void 0) {
      return;
    }
    if (value != null) {
      dispatch({
        type: TabsListActionTypes.valueChange,
        value
      });
    }
  }, [dispatch, value]);
  const getRootProps = (externalProps = {}) => {
    return _extends({}, externalProps, getListboxRootProps(externalProps), {
      "aria-orientation": orientation === "vertical" ? "vertical" : void 0,
      role: "tablist"
    });
  };
  const contextValue = React82.useMemo(() => _extends({}, compoundComponentContextValue, listContextValue), [compoundComponentContextValue, listContextValue]);
  return {
    contextValue,
    dispatch,
    getRootProps,
    highlightedValue,
    isRtl,
    orientation,
    rootRef: mergedRootRef,
    selectedValue: (_selectedValues$ = selectedValues[0]) != null ? _selectedValues$ : null
  };
}

// node_modules/@mui/base/useTabsList/TabsListProvider.js
var React83 = __toESM(require_react());
var import_jsx_runtime45 = __toESM(require_jsx_runtime());
function TabsListProvider(props) {
  const {
    value,
    children
  } = props;
  const {
    dispatch,
    getItemIndex,
    getItemState,
    registerItem,
    totalSubitemCount
  } = value;
  const listContextValue = React83.useMemo(() => ({
    dispatch,
    getItemState,
    getItemIndex
  }), [dispatch, getItemIndex, getItemState]);
  const compoundComponentContextValue = React83.useMemo(() => ({
    getItemIndex,
    registerItem,
    totalSubitemCount
  }), [registerItem, getItemIndex, totalSubitemCount]);
  return (0, import_jsx_runtime45.jsx)(CompoundComponentContext.Provider, {
    value: compoundComponentContextValue,
    children: (0, import_jsx_runtime45.jsx)(ListContext.Provider, {
      value: listContextValue,
      children
    })
  });
}

// node_modules/@mui/base/TabsList/TabsList.js
var import_jsx_runtime46 = __toESM(require_jsx_runtime());
var _excluded24 = ["children", "slotProps", "slots"];
var useUtilityClasses21 = (ownerState) => {
  const {
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation]
  };
  return composeClasses2(slots, useClassNamesOverride(getTabsListUtilityClass));
};
var TabsList = React84.forwardRef(function TabsList2(props, forwardedRef) {
  var _slots$root;
  const {
    children,
    slotProps = {},
    slots = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded24);
  const {
    isRtl,
    orientation,
    getRootProps,
    contextValue
  } = useTabsList({
    rootRef: forwardedRef
  });
  const ownerState = _extends({}, props, {
    isRtl,
    orientation
  });
  const classes = useUtilityClasses21(ownerState);
  const TabsListRoot = (_slots$root = slots.root) != null ? _slots$root : "div";
  const tabsListRootProps = useSlotProps_default({
    elementType: TabsListRoot,
    getSlotProps: getRootProps,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime46.jsx)(TabsListProvider, {
    value: contextValue,
    children: (0, import_jsx_runtime46.jsx)(TabsListRoot, _extends({}, tabsListRootProps, {
      children
    }))
  });
});
true ? TabsList.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types29.default.node,
  /**
   * @ignore
   */
  className: import_prop_types29.default.string,
  /**
   * The props used for each slot inside the TabsList.
   * @default {}
   */
  slotProps: import_prop_types29.default.shape({
    root: import_prop_types29.default.oneOfType([import_prop_types29.default.func, import_prop_types29.default.object])
  }),
  /**
   * The components used for each slot inside the TabsList.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types29.default.shape({
    root: import_prop_types29.default.elementType
  })
} : void 0;

// node_modules/@mui/base/Tab/Tab.js
var React86 = __toESM(require_react());
var import_prop_types30 = __toESM(require_prop_types());

// node_modules/@mui/base/Tab/tabClasses.js
var COMPONENT_NAME22 = "Tab";
function getTabUtilityClass(slot) {
  return generateUtilityClass4(COMPONENT_NAME22, slot);
}
var tabClasses = generateUtilityClasses4(COMPONENT_NAME22, ["root", "selected", "disabled"]);

// node_modules/@mui/base/useTab/useTab.js
var React85 = __toESM(require_react());
function tabValueGenerator(otherTabValues) {
  return otherTabValues.size;
}
function useTab(parameters) {
  const {
    value: valueParam,
    rootRef: externalRef,
    disabled = false,
    id: idParam
  } = parameters;
  const tabRef = React85.useRef(null);
  const id = useId2(idParam);
  const {
    value: selectedValue,
    selectionFollowsFocus,
    getTabPanelId
  } = useTabsContext();
  const tabMetadata = React85.useMemo(() => ({
    disabled,
    ref: tabRef,
    id
  }), [disabled, tabRef, id]);
  const {
    id: value,
    index: index2,
    totalItemCount: totalTabsCount
  } = useCompoundItem(valueParam != null ? valueParam : tabValueGenerator, tabMetadata);
  const {
    getRootProps: getTabProps,
    highlighted,
    selected
  } = useListItem({
    item: value
  });
  const {
    getRootProps: getButtonProps,
    rootRef: buttonRefHandler,
    active,
    focusVisible,
    setFocusVisible
  } = useButton({
    disabled,
    focusableWhenDisabled: !selectionFollowsFocus,
    type: "button"
  });
  const handleRef = useForkRef2(tabRef, externalRef, buttonRefHandler);
  const tabPanelId = value !== void 0 ? getTabPanelId(value) : void 0;
  const getRootProps = (externalProps = {}) => {
    const externalEventHandlers = extractEventHandlers_default(externalProps);
    const getCombinedRootProps = combineHooksSlotProps(getTabProps, getButtonProps);
    return _extends({}, externalProps, getCombinedRootProps(externalEventHandlers), {
      role: "tab",
      "aria-controls": tabPanelId,
      "aria-selected": selected,
      id,
      ref: handleRef
    });
  };
  return {
    getRootProps,
    active,
    focusVisible,
    highlighted,
    index: index2,
    rootRef: handleRef,
    // the `selected` state isn't set on the server (it relies on effects to be calculated),
    // so we fall back to checking the `value` prop with the selectedValue from the TabsContext
    selected: selected || value === selectedValue,
    setFocusVisible,
    totalTabsCount
  };
}

// node_modules/@mui/base/Tab/Tab.js
var import_jsx_runtime47 = __toESM(require_jsx_runtime());
var _excluded25 = ["action", "children", "disabled", "onChange", "onClick", "onFocus", "slotProps", "slots", "value"];
var useUtilityClasses22 = (ownerState) => {
  const {
    selected,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", selected && "selected", disabled && "disabled"]
  };
  return composeClasses2(slots, useClassNamesOverride(getTabUtilityClass));
};
var Tab = React86.forwardRef(function Tab2(props, forwardedRef) {
  var _slots$root;
  const {
    children,
    disabled = false,
    slotProps = {},
    slots = {},
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded25);
  const tabRef = React86.useRef(null);
  const handleRef = useForkRef2(tabRef, forwardedRef);
  const {
    active,
    highlighted,
    selected,
    getRootProps
  } = useTab(_extends({}, props, {
    rootRef: handleRef,
    value
  }));
  const ownerState = _extends({}, props, {
    active,
    disabled,
    highlighted,
    selected
  });
  const classes = useUtilityClasses22(ownerState);
  const TabRoot2 = (_slots$root = slots.root) != null ? _slots$root : "button";
  const tabRootProps = useSlotProps_default({
    elementType: TabRoot2,
    getSlotProps: getRootProps,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      ref: forwardedRef
    },
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime47.jsx)(TabRoot2, _extends({}, tabRootProps, {
    children
  }));
});
true ? Tab.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */
  action: import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.shape({
    current: import_prop_types30.default.shape({
      focusVisible: import_prop_types30.default.func.isRequired
    })
  })]),
  /**
   * @ignore
   */
  children: import_prop_types30.default.node,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types30.default.bool,
  /**
   * Callback invoked when new value is being set.
   */
  onChange: import_prop_types30.default.func,
  /**
   * The props used for each slot inside the Tab.
   * @default {}
   */
  slotProps: import_prop_types30.default.shape({
    root: import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.object])
  }),
  /**
   * The components used for each slot inside the Tab.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types30.default.shape({
    root: import_prop_types30.default.elementType
  }),
  /**
   * You can provide your own value. Otherwise, it falls back to the child position index.
   */
  value: import_prop_types30.default.oneOfType([import_prop_types30.default.number, import_prop_types30.default.string])
} : void 0;

// node_modules/@mui/base/TextareaAutosize/TextareaAutosize.js
var React87 = __toESM(require_react());
var import_prop_types31 = __toESM(require_prop_types());
var import_jsx_runtime48 = __toESM(require_jsx_runtime());
var import_jsx_runtime49 = __toESM(require_jsx_runtime());
var _excluded26 = ["onChange", "maxRows", "minRows", "style", "value"];
function getStyleValue(value) {
  return parseInt(value, 10) || 0;
}
var styles = {
  shadow: {
    // Visibility needed to hide the extra text area on iPads
    visibility: "hidden",
    // Remove from the content flow
    position: "absolute",
    // Ignore the scrollbar width
    overflow: "hidden",
    height: 0,
    top: 0,
    left: 0,
    // Create a new layer, increase the isolation of the computed values
    transform: "translateZ(0)"
  }
};
function isEmpty(obj) {
  return obj === void 0 || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflowing;
}
var TextareaAutosize = React87.forwardRef(function TextareaAutosize2(props, forwardedRef) {
  const {
    onChange,
    maxRows,
    minRows = 1,
    style,
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded26);
  const {
    current: isControlled
  } = React87.useRef(value != null);
  const inputRef = React87.useRef(null);
  const handleRef = useForkRef2(forwardedRef, inputRef);
  const heightRef = React87.useRef(null);
  const shadowRef = React87.useRef(null);
  const calculateTextareaStyles = React87.useCallback(() => {
    const input = inputRef.current;
    const containerWindow = ownerWindow(input);
    const computedStyle = containerWindow.getComputedStyle(input);
    if (computedStyle.width === "0px") {
      return {
        outerHeightStyle: 0,
        overflowing: false
      };
    }
    const inputShallow = shadowRef.current;
    inputShallow.style.width = computedStyle.width;
    inputShallow.value = input.value || props.placeholder || "x";
    if (inputShallow.value.slice(-1) === "\n") {
      inputShallow.value += " ";
    }
    const boxSizing = computedStyle.boxSizing;
    const padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);
    const border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);
    const innerHeight = inputShallow.scrollHeight;
    inputShallow.value = "x";
    const singleRowHeight = inputShallow.scrollHeight;
    let outerHeight = innerHeight;
    if (minRows) {
      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
    }
    if (maxRows) {
      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
    }
    outerHeight = Math.max(outerHeight, singleRowHeight);
    const outerHeightStyle = outerHeight + (boxSizing === "border-box" ? padding + border : 0);
    const overflowing = Math.abs(outerHeight - innerHeight) <= 1;
    return {
      outerHeightStyle,
      overflowing
    };
  }, [maxRows, minRows, props.placeholder]);
  const syncHeight = React87.useCallback(() => {
    const textareaStyles = calculateTextareaStyles();
    if (isEmpty(textareaStyles)) {
      return;
    }
    const outerHeightStyle = textareaStyles.outerHeightStyle;
    const input = inputRef.current;
    if (heightRef.current !== outerHeightStyle) {
      heightRef.current = outerHeightStyle;
      input.style.height = `${outerHeightStyle}px`;
    }
    input.style.overflow = textareaStyles.overflowing ? "hidden" : "";
  }, [calculateTextareaStyles]);
  useEnhancedEffect_default(() => {
    const handleResize = () => {
      syncHeight();
    };
    let rAF;
    const rAFHandleResize = () => {
      cancelAnimationFrame(rAF);
      rAF = requestAnimationFrame(() => {
        handleResize();
      });
    };
    const debounceHandleResize = debounce(handleResize);
    const input = inputRef.current;
    const containerWindow = ownerWindow(input);
    containerWindow.addEventListener("resize", debounceHandleResize);
    let resizeObserver;
    if (typeof ResizeObserver !== "undefined") {
      resizeObserver = new ResizeObserver(false ? rAFHandleResize : handleResize);
      resizeObserver.observe(input);
    }
    return () => {
      debounceHandleResize.clear();
      cancelAnimationFrame(rAF);
      containerWindow.removeEventListener("resize", debounceHandleResize);
      if (resizeObserver) {
        resizeObserver.disconnect();
      }
    };
  }, [calculateTextareaStyles, syncHeight]);
  useEnhancedEffect_default(() => {
    syncHeight();
  });
  const handleChange = (event) => {
    if (!isControlled) {
      syncHeight();
    }
    if (onChange) {
      onChange(event);
    }
  };
  return (0, import_jsx_runtime49.jsxs)(React87.Fragment, {
    children: [(0, import_jsx_runtime48.jsx)("textarea", _extends({
      value,
      onChange: handleChange,
      ref: handleRef,
      rows: minRows,
      style
    }, other)), (0, import_jsx_runtime48.jsx)("textarea", {
      "aria-hidden": true,
      className: props.className,
      readOnly: true,
      ref: shadowRef,
      tabIndex: -1,
      style: _extends({}, styles.shadow, style, {
        paddingTop: 0,
        paddingBottom: 0
      })
    })]
  });
});
true ? TextareaAutosize.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  className: import_prop_types31.default.string,
  /**
   * Maximum number of rows to display.
   */
  maxRows: import_prop_types31.default.oneOfType([import_prop_types31.default.number, import_prop_types31.default.string]),
  /**
   * Minimum number of rows to display.
   * @default 1
   */
  minRows: import_prop_types31.default.oneOfType([import_prop_types31.default.number, import_prop_types31.default.string]),
  /**
   * @ignore
   */
  onChange: import_prop_types31.default.func,
  /**
   * @ignore
   */
  placeholder: import_prop_types31.default.string,
  /**
   * @ignore
   */
  style: import_prop_types31.default.object,
  /**
   * @ignore
   */
  value: import_prop_types31.default.oneOfType([import_prop_types31.default.arrayOf(import_prop_types31.default.string), import_prop_types31.default.number, import_prop_types31.default.string])
} : void 0;

// node_modules/@mui/base/Transitions/CssAnimation.js
var React88 = __toESM(require_react());
var import_prop_types32 = __toESM(require_prop_types());
var import_jsx_runtime50 = __toESM(require_jsx_runtime());
var _excluded27 = ["children", "className", "enterAnimationName", "enterClassName", "exitAnimationName", "exitClassName"];
function CssAnimation(props) {
  const {
    children,
    className,
    enterAnimationName,
    enterClassName,
    exitAnimationName,
    exitClassName
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded27);
  const {
    requestedEnter,
    onExited
  } = useTransitionStateManager();
  const hasExited = React88.useRef(true);
  React88.useEffect(() => {
    if (requestedEnter && hasExited.current) {
      hasExited.current = false;
    }
  }, [requestedEnter]);
  const handleAnimationEnd = React88.useCallback((event) => {
    if (event.animationName === exitAnimationName) {
      onExited();
      hasExited.current = true;
    } else if (event.animationName === enterAnimationName) {
      hasExited.current = false;
    }
  }, [onExited, exitAnimationName, enterAnimationName]);
  return (0, import_jsx_runtime50.jsx)("div", _extends({
    onAnimationEnd: handleAnimationEnd,
    className: clsx_default(className, requestedEnter ? enterClassName : exitClassName)
  }, other, {
    children
  }));
}
true ? CssAnimation.propTypes = {
  children: import_prop_types32.default.node,
  className: import_prop_types32.default.string,
  enterAnimationName: import_prop_types32.default.string,
  enterClassName: import_prop_types32.default.string,
  exitAnimationName: import_prop_types32.default.string,
  exitClassName: import_prop_types32.default.string
} : void 0;

// node_modules/@mui/base/Transitions/CssTransition.js
var React89 = __toESM(require_react());
var import_prop_types33 = __toESM(require_prop_types());
var import_jsx_runtime51 = __toESM(require_jsx_runtime());
var _excluded28 = ["children", "className", "lastTransitionedPropertyOnExit", "enterClassName", "exitClassName"];
var CssTransition = React89.forwardRef(function CssTransition2(props, forwardedRef) {
  const {
    children,
    className,
    lastTransitionedPropertyOnExit,
    enterClassName,
    exitClassName
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded28);
  const {
    requestedEnter,
    onExited
  } = useTransitionStateManager();
  const [isEntering, setIsEntering] = React89.useState(false);
  React89.useEffect(() => {
    if (requestedEnter) {
      requestAnimationFrame(() => {
        setIsEntering(true);
      });
    } else {
      setIsEntering(false);
    }
  }, [requestedEnter]);
  const handleTransitionEnd = React89.useCallback((event) => {
    if (!requestedEnter && (lastTransitionedPropertyOnExit == null || event.propertyName === lastTransitionedPropertyOnExit)) {
      onExited();
    }
  }, [onExited, requestedEnter, lastTransitionedPropertyOnExit]);
  return (0, import_jsx_runtime51.jsx)("div", _extends({
    onTransitionEnd: handleTransitionEnd,
    className: clsx_default(className, isEntering ? enterClassName : exitClassName)
  }, other, {
    ref: forwardedRef,
    children
  }));
});
true ? CssTransition.propTypes = {
  children: import_prop_types33.default.node,
  className: import_prop_types33.default.string,
  enterClassName: import_prop_types33.default.string,
  exitClassName: import_prop_types33.default.string,
  lastTransitionedPropertyOnEnter: import_prop_types33.default.string,
  lastTransitionedPropertyOnExit: import_prop_types33.default.string
} : void 0;

// node_modules/@mui/base/useAutocomplete/useAutocomplete.js
var React90 = __toESM(require_react());
function stripDiacritics(string) {
  return typeof string.normalize !== "undefined" ? string.normalize("NFD").replace(/[\u0300-\u036f]/g, "") : string;
}
function createFilterOptions(config = {}) {
  const {
    ignoreAccents = true,
    ignoreCase = true,
    limit,
    matchFrom = "any",
    stringify,
    trim = false
  } = config;
  return (options, {
    inputValue,
    getOptionLabel
  }) => {
    let input = trim ? inputValue.trim() : inputValue;
    if (ignoreCase) {
      input = input.toLowerCase();
    }
    if (ignoreAccents) {
      input = stripDiacritics(input);
    }
    const filteredOptions = !input ? options : options.filter((option) => {
      let candidate = (stringify || getOptionLabel)(option);
      if (ignoreCase) {
        candidate = candidate.toLowerCase();
      }
      if (ignoreAccents) {
        candidate = stripDiacritics(candidate);
      }
      return matchFrom === "start" ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
    });
    return typeof limit === "number" ? filteredOptions.slice(0, limit) : filteredOptions;
  };
}
function findIndex(array, comp) {
  for (let i = 0; i < array.length; i += 1) {
    if (comp(array[i])) {
      return i;
    }
  }
  return -1;
}
var defaultFilterOptions = createFilterOptions();
var pageSize = 5;
var defaultIsActiveElementInListbox = (listboxRef) => {
  var _listboxRef$current$p;
  return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));
};
var MULTIPLE_DEFAULT_VALUE = [];
function useAutocomplete(props) {
  const {
    // eslint-disable-next-line @typescript-eslint/naming-convention
    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,
    // eslint-disable-next-line @typescript-eslint/naming-convention
    unstable_classNamePrefix = "Mui",
    autoComplete = false,
    autoHighlight = false,
    autoSelect = false,
    blurOnSelect = false,
    clearOnBlur = !props.freeSolo,
    clearOnEscape = false,
    componentName = "useAutocomplete",
    defaultValue = props.multiple ? MULTIPLE_DEFAULT_VALUE : null,
    disableClearable = false,
    disableCloseOnSelect = false,
    disabled: disabledProp,
    disabledItemsFocusable = false,
    disableListWrap = false,
    filterOptions = defaultFilterOptions,
    filterSelectedOptions = false,
    freeSolo = false,
    getOptionDisabled,
    getOptionKey,
    getOptionLabel: getOptionLabelProp = (option) => {
      var _option$label;
      return (_option$label = option.label) != null ? _option$label : option;
    },
    groupBy,
    handleHomeEndKeys = !props.freeSolo,
    id: idProp,
    includeInputInList = false,
    inputValue: inputValueProp,
    isOptionEqualToValue = (option, value2) => option === value2,
    multiple = false,
    onChange,
    onClose,
    onHighlightChange,
    onInputChange,
    onOpen,
    open: openProp,
    openOnFocus = false,
    options,
    readOnly = false,
    selectOnFocus = !props.freeSolo,
    value: valueProp
  } = props;
  const id = useId2(idProp);
  let getOptionLabel = getOptionLabelProp;
  getOptionLabel = (option) => {
    const optionLabel = getOptionLabelProp(option);
    if (typeof optionLabel !== "string") {
      if (true) {
        const erroneousReturn = optionLabel === void 0 ? "undefined" : `${typeof optionLabel} (${optionLabel})`;
        console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
      }
      return String(optionLabel);
    }
    return optionLabel;
  };
  const ignoreFocus = React90.useRef(false);
  const firstFocus = React90.useRef(true);
  const inputRef = React90.useRef(null);
  const listboxRef = React90.useRef(null);
  const [anchorEl, setAnchorEl] = React90.useState(null);
  const [focusedTag, setFocusedTag] = React90.useState(-1);
  const defaultHighlighted = autoHighlight ? 0 : -1;
  const highlightedIndexRef = React90.useRef(defaultHighlighted);
  const [value, setValueState] = useControlled2({
    controlled: valueProp,
    default: defaultValue,
    name: componentName
  });
  const [inputValue, setInputValueState] = useControlled2({
    controlled: inputValueProp,
    default: "",
    name: componentName,
    state: "inputValue"
  });
  const [focused, setFocused] = React90.useState(false);
  const resetInputValue = React90.useCallback((event, newValue) => {
    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;
    if (!isOptionSelected && !clearOnBlur) {
      return;
    }
    let newInputValue;
    if (multiple) {
      newInputValue = "";
    } else if (newValue == null) {
      newInputValue = "";
    } else {
      const optionLabel = getOptionLabel(newValue);
      newInputValue = typeof optionLabel === "string" ? optionLabel : "";
    }
    if (inputValue === newInputValue) {
      return;
    }
    setInputValueState(newInputValue);
    if (onInputChange) {
      onInputChange(event, newInputValue, "reset");
    }
  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
  const [open, setOpenState] = useControlled2({
    controlled: openProp,
    default: false,
    name: componentName,
    state: "open"
  });
  const [inputPristine, setInputPristine] = React90.useState(true);
  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
  const popupOpen = open && !readOnly;
  const filteredOptions = popupOpen ? filterOptions(
    options.filter((option) => {
      if (filterSelectedOptions && (multiple ? value : [value]).some((value2) => value2 !== null && isOptionEqualToValue(option, value2))) {
        return false;
      }
      return true;
    }),
    // we use the empty string to manipulate `filterOptions` to not filter any options
    // i.e. the filter predicate always returns true
    {
      inputValue: inputValueIsSelectedValue && inputPristine ? "" : inputValue,
      getOptionLabel
    }
  ) : [];
  const previousProps = usePreviousProps_default2({
    filteredOptions,
    value,
    inputValue
  });
  React90.useEffect(() => {
    const valueChange = value !== previousProps.value;
    if (focused && !valueChange) {
      return;
    }
    if (freeSolo && !valueChange) {
      return;
    }
    resetInputValue(null, value);
  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);
  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
  if (true) {
    if (value !== null && !freeSolo && options.length > 0) {
      const missingValue = (multiple ? value : [value]).filter((value2) => !options.some((option) => isOptionEqualToValue(option, value2)));
      if (missingValue.length > 0) {
        console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`, "You can use the `isOptionEqualToValue` prop to customize the equality test."].join("\n"));
      }
    }
  }
  const focusTag = useEventCallback_default2((tagToFocus) => {
    if (tagToFocus === -1) {
      inputRef.current.focus();
    } else {
      anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
    }
  });
  React90.useEffect(() => {
    if (multiple && focusedTag > value.length - 1) {
      setFocusedTag(-1);
      focusTag(-1);
    }
  }, [value, multiple, focusedTag, focusTag]);
  function validOptionIndex(index2, direction) {
    if (!listboxRef.current || index2 < 0 || index2 >= filteredOptions.length) {
      return -1;
    }
    let nextFocus = index2;
    while (true) {
      const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`);
      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute("aria-disabled") === "true";
      if (option && option.hasAttribute("tabindex") && !nextFocusDisabled) {
        return nextFocus;
      }
      if (direction === "next") {
        nextFocus = (nextFocus + 1) % filteredOptions.length;
      } else {
        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;
      }
      if (nextFocus === index2) {
        return -1;
      }
    }
  }
  const setHighlightedIndex = useEventCallback_default2(({
    event,
    index: index2,
    reason = "auto"
  }) => {
    highlightedIndexRef.current = index2;
    if (index2 === -1) {
      inputRef.current.removeAttribute("aria-activedescendant");
    } else {
      inputRef.current.setAttribute("aria-activedescendant", `${id}-option-${index2}`);
    }
    if (onHighlightChange) {
      onHighlightChange(event, index2 === -1 ? null : filteredOptions[index2], reason);
    }
    if (!listboxRef.current) {
      return;
    }
    const prev = listboxRef.current.querySelector(`[role="option"].${unstable_classNamePrefix}-focused`);
    if (prev) {
      prev.classList.remove(`${unstable_classNamePrefix}-focused`);
      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);
    }
    let listboxNode = listboxRef.current;
    if (listboxRef.current.getAttribute("role") !== "listbox") {
      listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]');
    }
    if (!listboxNode) {
      return;
    }
    if (index2 === -1) {
      listboxNode.scrollTop = 0;
      return;
    }
    const option = listboxRef.current.querySelector(`[data-option-index="${index2}"]`);
    if (!option) {
      return;
    }
    option.classList.add(`${unstable_classNamePrefix}-focused`);
    if (reason === "keyboard") {
      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);
    }
    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== "mouse" && reason !== "touch") {
      const element = option;
      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
      const elementBottom = element.offsetTop + element.offsetHeight;
      if (elementBottom > scrollBottom) {
        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
      }
    }
  });
  const changeHighlightedIndex = useEventCallback_default2(({
    event,
    diff,
    direction = "next",
    reason = "auto"
  }) => {
    if (!popupOpen) {
      return;
    }
    const getNextIndex = () => {
      const maxIndex = filteredOptions.length - 1;
      if (diff === "reset") {
        return defaultHighlighted;
      }
      if (diff === "start") {
        return 0;
      }
      if (diff === "end") {
        return maxIndex;
      }
      const newIndex = highlightedIndexRef.current + diff;
      if (newIndex < 0) {
        if (newIndex === -1 && includeInputInList) {
          return -1;
        }
        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
          return 0;
        }
        return maxIndex;
      }
      if (newIndex > maxIndex) {
        if (newIndex === maxIndex + 1 && includeInputInList) {
          return -1;
        }
        if (disableListWrap || Math.abs(diff) > 1) {
          return maxIndex;
        }
        return 0;
      }
      return newIndex;
    };
    const nextIndex = validOptionIndex(getNextIndex(), direction);
    setHighlightedIndex({
      index: nextIndex,
      reason,
      event
    });
    if (autoComplete && diff !== "reset") {
      if (nextIndex === -1) {
        inputRef.current.value = inputValue;
      } else {
        const option = getOptionLabel(filteredOptions[nextIndex]);
        inputRef.current.value = option;
        const index2 = option.toLowerCase().indexOf(inputValue.toLowerCase());
        if (index2 === 0 && inputValue.length > 0) {
          inputRef.current.setSelectionRange(inputValue.length, option.length);
        }
      }
    }
  });
  const getPreviousHighlightedOptionIndex = () => {
    const isSameValue = (value1, value2) => {
      const label1 = value1 ? getOptionLabel(value1) : "";
      const label2 = value2 ? getOptionLabel(value2) : "";
      return label1 === label2;
    };
    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {
      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];
      if (previousHighlightedOption) {
        return findIndex(filteredOptions, (option) => {
          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);
        });
      }
    }
    return -1;
  };
  const syncHighlightedIndex = React90.useCallback(() => {
    if (!popupOpen) {
      return;
    }
    const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();
    if (previousHighlightedOptionIndex !== -1) {
      highlightedIndexRef.current = previousHighlightedOptionIndex;
      return;
    }
    const valueItem = multiple ? value[0] : value;
    if (filteredOptions.length === 0 || valueItem == null) {
      changeHighlightedIndex({
        diff: "reset"
      });
      return;
    }
    if (!listboxRef.current) {
      return;
    }
    if (valueItem != null) {
      const currentOption = filteredOptions[highlightedIndexRef.current];
      if (multiple && currentOption && findIndex(value, (val) => isOptionEqualToValue(currentOption, val)) !== -1) {
        return;
      }
      const itemIndex = findIndex(filteredOptions, (optionItem) => isOptionEqualToValue(optionItem, valueItem));
      if (itemIndex === -1) {
        changeHighlightedIndex({
          diff: "reset"
        });
      } else {
        setHighlightedIndex({
          index: itemIndex
        });
      }
      return;
    }
    if (highlightedIndexRef.current >= filteredOptions.length - 1) {
      setHighlightedIndex({
        index: filteredOptions.length - 1
      });
      return;
    }
    setHighlightedIndex({
      index: highlightedIndexRef.current
    });
  }, [
    // Only sync the highlighted index when the option switch between empty and not
    filteredOptions.length,
    // Don't sync the highlighted index with the value when multiple
    // eslint-disable-next-line react-hooks/exhaustive-deps
    multiple ? false : value,
    filterSelectedOptions,
    changeHighlightedIndex,
    setHighlightedIndex,
    popupOpen,
    inputValue,
    multiple
  ]);
  const handleListboxRef = useEventCallback_default2((node) => {
    setRef(listboxRef, node);
    if (!node) {
      return;
    }
    syncHighlightedIndex();
  });
  if (true) {
    React90.useEffect(() => {
      if (!inputRef.current || inputRef.current.nodeName !== "INPUT") {
        if (inputRef.current && inputRef.current.nodeName === "TEXTAREA") {
          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join("\n"));
        } else {
          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, "", componentName === "useAutocomplete" ? "Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed." : "Make sure you have customized the input component correctly."].join("\n"));
        }
      }
    }, [componentName]);
  }
  React90.useEffect(() => {
    syncHighlightedIndex();
  }, [syncHighlightedIndex]);
  const handleOpen = (event) => {
    if (open) {
      return;
    }
    setOpenState(true);
    setInputPristine(true);
    if (onOpen) {
      onOpen(event);
    }
  };
  const handleClose = (event, reason) => {
    if (!open) {
      return;
    }
    setOpenState(false);
    if (onClose) {
      onClose(event, reason);
    }
  };
  const handleValue = (event, newValue, reason, details) => {
    if (multiple) {
      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {
        return;
      }
    } else if (value === newValue) {
      return;
    }
    if (onChange) {
      onChange(event, newValue, reason, details);
    }
    setValueState(newValue);
  };
  const isTouch = React90.useRef(false);
  const selectNewValue = (event, option, reasonProp = "selectOption", origin = "options") => {
    let reason = reasonProp;
    let newValue = option;
    if (multiple) {
      newValue = Array.isArray(value) ? value.slice() : [];
      if (true) {
        const matches = newValue.filter((val) => isOptionEqualToValue(option, val));
        if (matches.length > 1) {
          console.error([`MUI: The \`isOptionEqualToValue\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join("\n"));
        }
      }
      const itemIndex = findIndex(newValue, (valueItem) => isOptionEqualToValue(option, valueItem));
      if (itemIndex === -1) {
        newValue.push(option);
      } else if (origin !== "freeSolo") {
        newValue.splice(itemIndex, 1);
        reason = "removeOption";
      }
    }
    resetInputValue(event, newValue);
    handleValue(event, newValue, reason, {
      option
    });
    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {
      handleClose(event, reason);
    }
    if (blurOnSelect === true || blurOnSelect === "touch" && isTouch.current || blurOnSelect === "mouse" && !isTouch.current) {
      inputRef.current.blur();
    }
  };
  function validTagIndex(index2, direction) {
    if (index2 === -1) {
      return -1;
    }
    let nextFocus = index2;
    while (true) {
      if (direction === "next" && nextFocus === value.length || direction === "previous" && nextFocus === -1) {
        return -1;
      }
      const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`);
      if (!option || !option.hasAttribute("tabindex") || option.disabled || option.getAttribute("aria-disabled") === "true") {
        nextFocus += direction === "next" ? 1 : -1;
      } else {
        return nextFocus;
      }
    }
  }
  const handleFocusTag = (event, direction) => {
    if (!multiple) {
      return;
    }
    if (inputValue === "") {
      handleClose(event, "toggleInput");
    }
    let nextTag = focusedTag;
    if (focusedTag === -1) {
      if (inputValue === "" && direction === "previous") {
        nextTag = value.length - 1;
      }
    } else {
      nextTag += direction === "next" ? 1 : -1;
      if (nextTag < 0) {
        nextTag = 0;
      }
      if (nextTag === value.length) {
        nextTag = -1;
      }
    }
    nextTag = validTagIndex(nextTag, direction);
    setFocusedTag(nextTag);
    focusTag(nextTag);
  };
  const handleClear = (event) => {
    ignoreFocus.current = true;
    setInputValueState("");
    if (onInputChange) {
      onInputChange(event, "", "clear");
    }
    handleValue(event, multiple ? [] : null, "clear");
  };
  const handleKeyDown3 = (other) => (event) => {
    if (other.onKeyDown) {
      other.onKeyDown(event);
    }
    if (event.defaultMuiPrevented) {
      return;
    }
    if (focusedTag !== -1 && ["ArrowLeft", "ArrowRight"].indexOf(event.key) === -1) {
      setFocusedTag(-1);
      focusTag(-1);
    }
    if (event.which !== 229) {
      switch (event.key) {
        case "Home":
          if (popupOpen && handleHomeEndKeys) {
            event.preventDefault();
            changeHighlightedIndex({
              diff: "start",
              direction: "next",
              reason: "keyboard",
              event
            });
          }
          break;
        case "End":
          if (popupOpen && handleHomeEndKeys) {
            event.preventDefault();
            changeHighlightedIndex({
              diff: "end",
              direction: "previous",
              reason: "keyboard",
              event
            });
          }
          break;
        case "PageUp":
          event.preventDefault();
          changeHighlightedIndex({
            diff: -pageSize,
            direction: "previous",
            reason: "keyboard",
            event
          });
          handleOpen(event);
          break;
        case "PageDown":
          event.preventDefault();
          changeHighlightedIndex({
            diff: pageSize,
            direction: "next",
            reason: "keyboard",
            event
          });
          handleOpen(event);
          break;
        case "ArrowDown":
          event.preventDefault();
          changeHighlightedIndex({
            diff: 1,
            direction: "next",
            reason: "keyboard",
            event
          });
          handleOpen(event);
          break;
        case "ArrowUp":
          event.preventDefault();
          changeHighlightedIndex({
            diff: -1,
            direction: "previous",
            reason: "keyboard",
            event
          });
          handleOpen(event);
          break;
        case "ArrowLeft":
          handleFocusTag(event, "previous");
          break;
        case "ArrowRight":
          handleFocusTag(event, "next");
          break;
        case "Enter":
          if (highlightedIndexRef.current !== -1 && popupOpen) {
            const option = filteredOptions[highlightedIndexRef.current];
            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
            event.preventDefault();
            if (disabled) {
              return;
            }
            selectNewValue(event, option, "selectOption");
            if (autoComplete) {
              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
            }
          } else if (freeSolo && inputValue !== "" && inputValueIsSelectedValue === false) {
            if (multiple) {
              event.preventDefault();
            }
            selectNewValue(event, inputValue, "createOption", "freeSolo");
          }
          break;
        case "Escape":
          if (popupOpen) {
            event.preventDefault();
            event.stopPropagation();
            handleClose(event, "escape");
          } else if (clearOnEscape && (inputValue !== "" || multiple && value.length > 0)) {
            event.preventDefault();
            event.stopPropagation();
            handleClear(event);
          }
          break;
        case "Backspace":
          if (multiple && !readOnly && inputValue === "" && value.length > 0) {
            const index2 = focusedTag === -1 ? value.length - 1 : focusedTag;
            const newValue = value.slice();
            newValue.splice(index2, 1);
            handleValue(event, newValue, "removeOption", {
              option: value[index2]
            });
          }
          break;
        case "Delete":
          if (multiple && !readOnly && inputValue === "" && value.length > 0 && focusedTag !== -1) {
            const index2 = focusedTag;
            const newValue = value.slice();
            newValue.splice(index2, 1);
            handleValue(event, newValue, "removeOption", {
              option: value[index2]
            });
          }
          break;
        default:
      }
    }
  };
  const handleFocus = (event) => {
    setFocused(true);
    if (openOnFocus && !ignoreFocus.current) {
      handleOpen(event);
    }
  };
  const handleBlur2 = (event) => {
    if (unstable_isActiveElementInListbox(listboxRef)) {
      inputRef.current.focus();
      return;
    }
    setFocused(false);
    firstFocus.current = true;
    ignoreFocus.current = false;
    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
      selectNewValue(event, filteredOptions[highlightedIndexRef.current], "blur");
    } else if (autoSelect && freeSolo && inputValue !== "") {
      selectNewValue(event, inputValue, "blur", "freeSolo");
    } else if (clearOnBlur) {
      resetInputValue(event, value);
    }
    handleClose(event, "blur");
  };
  const handleInputChange2 = (event) => {
    const newValue = event.target.value;
    if (inputValue !== newValue) {
      setInputValueState(newValue);
      setInputPristine(false);
      if (onInputChange) {
        onInputChange(event, newValue, "input");
      }
    }
    if (newValue === "") {
      if (!disableClearable && !multiple) {
        handleValue(event, null, "clear");
      }
    } else {
      handleOpen(event);
    }
  };
  const handleOptionMouseMove = (event) => {
    const index2 = Number(event.currentTarget.getAttribute("data-option-index"));
    if (highlightedIndexRef.current !== index2) {
      setHighlightedIndex({
        event,
        index: index2,
        reason: "mouse"
      });
    }
  };
  const handleOptionTouchStart = (event) => {
    setHighlightedIndex({
      event,
      index: Number(event.currentTarget.getAttribute("data-option-index")),
      reason: "touch"
    });
    isTouch.current = true;
  };
  const handleOptionClick = (event) => {
    const index2 = Number(event.currentTarget.getAttribute("data-option-index"));
    selectNewValue(event, filteredOptions[index2], "selectOption");
    isTouch.current = false;
  };
  const handleTagDelete = (index2) => (event) => {
    const newValue = value.slice();
    newValue.splice(index2, 1);
    handleValue(event, newValue, "removeOption", {
      option: value[index2]
    });
  };
  const handlePopupIndicator = (event) => {
    if (open) {
      handleClose(event, "toggleInput");
    } else {
      handleOpen(event);
    }
  };
  const handleMouseDown = (event) => {
    if (!event.currentTarget.contains(event.target)) {
      return;
    }
    if (event.target.getAttribute("id") !== id) {
      event.preventDefault();
    }
  };
  const handleClick = (event) => {
    if (!event.currentTarget.contains(event.target)) {
      return;
    }
    inputRef.current.focus();
    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
      inputRef.current.select();
    }
    firstFocus.current = false;
  };
  const handleInputMouseDown = (event) => {
    if (!disabledProp && (inputValue === "" || !open)) {
      handlePopupIndicator(event);
    }
  };
  let dirty = freeSolo && inputValue.length > 0;
  dirty = dirty || (multiple ? value.length > 0 : value !== null);
  let groupedOptions = filteredOptions;
  if (groupBy) {
    const indexBy = /* @__PURE__ */ new Map();
    let warn = false;
    groupedOptions = filteredOptions.reduce((acc, option, index2) => {
      const group = groupBy(option);
      if (acc.length > 0 && acc[acc.length - 1].group === group) {
        acc[acc.length - 1].options.push(option);
      } else {
        if (true) {
          if (indexBy.get(group) && !warn) {
            console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, "You can solve the issue by sorting the options with the output of `groupBy`.");
            warn = true;
          }
          indexBy.set(group, true);
        }
        acc.push({
          key: index2,
          index: index2,
          group,
          options: [option]
        });
      }
      return acc;
    }, []);
  }
  if (disabledProp && focused) {
    handleBlur2();
  }
  return {
    getRootProps: (other = {}) => _extends({
      "aria-owns": listboxAvailable ? `${id}-listbox` : null
    }, other, {
      onKeyDown: handleKeyDown3(other),
      onMouseDown: handleMouseDown,
      onClick: handleClick
    }),
    getInputLabelProps: () => ({
      id: `${id}-label`,
      htmlFor: id
    }),
    getInputProps: () => ({
      id,
      value: inputValue,
      onBlur: handleBlur2,
      onFocus: handleFocus,
      onChange: handleInputChange2,
      onMouseDown: handleInputMouseDown,
      // if open then this is handled imperatively so don't let react override
      // only have an opinion about this when closed
      "aria-activedescendant": popupOpen ? "" : null,
      "aria-autocomplete": autoComplete ? "both" : "list",
      "aria-controls": listboxAvailable ? `${id}-listbox` : void 0,
      "aria-expanded": listboxAvailable,
      // Disable browser's suggestion that might overlap with the popup.
      // Handle autocomplete but not autofill.
      autoComplete: "off",
      ref: inputRef,
      autoCapitalize: "none",
      spellCheck: "false",
      role: "combobox",
      disabled: disabledProp
    }),
    getClearProps: () => ({
      tabIndex: -1,
      type: "button",
      onClick: handleClear
    }),
    getPopupIndicatorProps: () => ({
      tabIndex: -1,
      type: "button",
      onClick: handlePopupIndicator
    }),
    getTagProps: ({
      index: index2
    }) => _extends({
      key: index2,
      "data-tag-index": index2,
      tabIndex: -1
    }, !readOnly && {
      onDelete: handleTagDelete(index2)
    }),
    getListboxProps: () => ({
      role: "listbox",
      id: `${id}-listbox`,
      "aria-labelledby": `${id}-label`,
      ref: handleListboxRef,
      onMouseDown: (event) => {
        event.preventDefault();
      }
    }),
    getOptionProps: ({
      index: index2,
      option
    }) => {
      var _getOptionKey;
      const selected = (multiple ? value : [value]).some((value2) => value2 != null && isOptionEqualToValue(option, value2));
      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
      return {
        key: (_getOptionKey = getOptionKey == null ? void 0 : getOptionKey(option)) != null ? _getOptionKey : getOptionLabel(option),
        tabIndex: -1,
        role: "option",
        id: `${id}-option-${index2}`,
        onMouseMove: handleOptionMouseMove,
        onClick: handleOptionClick,
        onTouchStart: handleOptionTouchStart,
        "data-option-index": index2,
        "aria-disabled": disabled,
        "aria-selected": selected
      };
    },
    id,
    inputValue,
    value,
    dirty,
    expanded: popupOpen && anchorEl,
    popupOpen,
    focused: focused || focusedTag !== -1,
    anchorEl,
    setAnchorEl,
    focusedTag,
    groupedOptions
  };
}

// node_modules/@mui/joy/Accordion/accordionClasses.js
function getAccordionUtilityClass(slot) {
  return generateUtilityClass2("MuiAccordion", slot);
}
var accordionClasses = generateUtilityClasses2("MuiAccordion", ["root", "expanded", "disabled"]);
var accordionClasses_default = accordionClasses;

// node_modules/@mui/joy/utils/useSlot.js
var _excluded29 = ["className", "elementType", "ownerState", "externalForwardedProps", "getSlotOwnerState", "internalForwardedProps"];
var _excluded210 = ["component", "slots", "slotProps"];
var _excluded32 = ["component"];
function useSlot(name, parameters) {
  const {
    className,
    elementType: initialElementType,
    ownerState,
    externalForwardedProps,
    getSlotOwnerState,
    internalForwardedProps
  } = parameters, useSlotPropsParams = _objectWithoutPropertiesLoose(parameters, _excluded29);
  const {
    component: rootComponent,
    slots = {
      [name]: void 0
    },
    slotProps = {
      [name]: void 0
    }
  } = externalForwardedProps, other = _objectWithoutPropertiesLoose(externalForwardedProps, _excluded210);
  const elementType = slots[name] || initialElementType;
  const resolvedComponentsProps = resolveComponentProps_default(slotProps[name], ownerState);
  const _mergeSlotProps = mergeSlotProps_default(_extends({
    className
  }, useSlotPropsParams, {
    externalForwardedProps: name === "root" ? other : void 0,
    externalSlotProps: resolvedComponentsProps
  })), {
    props: {
      component: slotComponent
    },
    internalRef
  } = _mergeSlotProps, mergedProps = _objectWithoutPropertiesLoose(_mergeSlotProps.props, _excluded32);
  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, parameters.ref);
  const slotOwnerState = getSlotOwnerState ? getSlotOwnerState(mergedProps) : {};
  const finalOwnerState = _extends({}, ownerState, slotOwnerState);
  const LeafComponent = name === "root" ? slotComponent || rootComponent : slotComponent;
  const props = appendOwnerState_default(elementType, _extends({}, name === "root" && !rootComponent && !slots[name] && internalForwardedProps, name !== "root" && !slots[name] && internalForwardedProps, mergedProps, LeafComponent && {
    as: LeafComponent
  }, {
    ref
  }), finalOwnerState);
  Object.keys(slotOwnerState).forEach((propName) => {
    delete props[propName];
  });
  return [elementType, props];
}

// node_modules/@mui/joy/Accordion/AccordionContext.js
var React91 = __toESM(require_react());
var AccordionContext = React91.createContext({});
if (true) {
  AccordionContext.displayName = "AccordionContext";
}
var AccordionContext_default = AccordionContext;

// node_modules/@mui/joy/ListItem/ListItem.js
var React98 = __toESM(require_react());
var import_prop_types34 = __toESM(require_prop_types());

// node_modules/@mui/joy/ListItem/listItemClasses.js
function getListItemUtilityClass(slot) {
  return generateUtilityClass2("MuiListItem", slot);
}
var listItemClasses = generateUtilityClasses2("MuiListItem", ["root", "startAction", "endAction", "nested", "nesting", "sticky", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var listItemClasses_default = listItemClasses;

// node_modules/@mui/joy/List/NestedListContext.js
var React92 = __toESM(require_react());
var NestedListContext = React92.createContext(false);
if (true) {
  NestedListContext.displayName = "NestedListContext";
}
var NestedListContext_default = NestedListContext;

// node_modules/@mui/joy/List/RowListContext.js
var React93 = __toESM(require_react());
var RowListContext = React93.createContext(false);
if (true) {
  RowListContext.displayName = "RowListContext";
}
var RowListContext_default = RowListContext;

// node_modules/@mui/joy/List/WrapListContext.js
var React94 = __toESM(require_react());
var WrapListContext = React94.createContext(false);
if (true) {
  WrapListContext.displayName = "WrapListContext";
}
var WrapListContext_default = WrapListContext;

// node_modules/@mui/joy/List/ComponentListContext.js
var React95 = __toESM(require_react());
var ComponentListContext = React95.createContext(void 0);
if (true) {
  ComponentListContext.displayName = "ComponentListContext";
}
var ComponentListContext_default = ComponentListContext;

// node_modules/@mui/joy/ListSubheader/ListSubheaderContext.js
var React96 = __toESM(require_react());
var ListSubheaderContext = React96.createContext(void 0);
if (true) {
  ListSubheaderContext.displayName = "ListSubheaderContext";
}
var ListSubheaderContext_default = ListSubheaderContext;

// node_modules/@mui/joy/List/GroupListContext.js
var React97 = __toESM(require_react());
var GroupListContext = React97.createContext(void 0);
if (true) {
  GroupListContext.displayName = "GroupListContext";
}
var GroupListContext_default = GroupListContext;

// node_modules/@mui/joy/ListItem/ListItem.js
var import_jsx_runtime52 = __toESM(require_jsx_runtime());
var import_jsx_runtime53 = __toESM(require_jsx_runtime());
var _excluded30 = ["component", "className", "children", "nested", "sticky", "variant", "color", "startAction", "endAction", "role", "slots", "slotProps"];
var useUtilityClasses23 = (ownerState) => {
  const {
    sticky,
    nested,
    nesting,
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", nested && "nested", nesting && "nesting", sticky && "sticky", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`],
    startAction: ["startAction"],
    endAction: ["endAction"]
  };
  return composeClasses2(slots, getListItemUtilityClass, {});
};
var StyledListItem = styled_default("li")(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return [
    !ownerState.nested && {
      // add negative margin to ListItemButton equal to this ListItem padding
      "--ListItemButton-marginInline": `calc(-1 * var(--ListItem-paddingLeft)) calc(-1 * var(--ListItem-paddingRight))`,
      "--ListItemButton-marginBlock": "calc(-1 * var(--ListItem-paddingY))",
      alignItems: "center",
      gap: "var(--ListItem-gap)",
      marginInline: "var(--ListItem-marginInline)"
    },
    ownerState.nested && {
      // add negative margin to NestedList equal to this ListItem padding
      "--NestedList-marginRight": "calc(-1 * var(--ListItem-paddingRight))",
      "--NestedList-marginLeft": "calc(-1 * var(--ListItem-paddingLeft))",
      "--NestedListItem-paddingLeft": `calc(var(--ListItem-paddingLeft) + var(--List-nestedInsetStart))`,
      // add negative margin to ListItem, ListItemButton to make them start from the edge.
      "--ListItemButton-marginBlock": "0px",
      "--ListItemButton-marginInline": "calc(-1 * var(--ListItem-paddingLeft)) calc(-1 * var(--ListItem-paddingRight))",
      "--ListItem-marginInline": "calc(-1 * var(--ListItem-paddingLeft)) calc(-1 * var(--ListItem-paddingRight))",
      flexDirection: "column"
    },
    // Base styles
    _extends({
      // Integration with control elements, for example Checkbox, Radio.
      "--unstable_actionRadius": "calc(var(--ListItem-radius) - var(--variant-borderWidth, 0px))"
    }, ownerState.startAction && {
      "--unstable_startActionWidth": "2rem"
      // to add sufficient padding-left on ListItemButton
    }, ownerState.endAction && {
      "--unstable_endActionWidth": "2.5rem"
      // to add sufficient padding-right on ListItemButton
    }, {
      boxSizing: "border-box",
      borderRadius: "var(--ListItem-radius)",
      display: "var(--_ListItem-display)",
      "&:not([hidden])": {
        "--_ListItem-display": "var(--_List-markerDisplay, flex)"
      },
      flex: "none",
      // prevent children from shrinking when the List's height is limited.
      listStyleType: "var(--_List-markerType, disc)",
      position: "relative",
      paddingBlockStart: ownerState.nested ? 0 : "var(--ListItem-paddingY)",
      paddingBlockEnd: ownerState.nested ? 0 : "var(--ListItem-paddingY)",
      paddingInlineStart: "var(--ListItem-paddingLeft)",
      paddingInlineEnd: "var(--ListItem-paddingRight)"
    }, ownerState["data-first-child"] === void 0 && _extends({}, ownerState.row ? {
      marginInlineStart: "var(--List-gap)"
    } : {
      marginBlockStart: "var(--List-gap)"
    }), ownerState.row && ownerState.wrap && {
      marginInlineStart: "var(--List-gap)",
      marginBlockStart: "var(--List-gap)"
    }, {
      minBlockSize: "var(--ListItem-minHeight)"
    }, ownerState.sticky && {
      // sticky in list item can be found in grouped options
      position: "sticky",
      top: "var(--ListItem-stickyTop, 0px)",
      // integration with Menu and Select.
      zIndex: 1,
      background: `var(--ListItem-stickyBackground, ${theme.vars.palette.background.body})`
    }, {
      [`.${listItemClasses_default.nested} > &`]: {
        "--_ListItem-display": "flex"
      }
    }),
    (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]
  ];
});
var ListItemRoot = styled_default(StyledListItem, {
  name: "JoyListItem",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({});
var ListItemStartAction = styled_default("div", {
  name: "JoyListItem",
  slot: "StartAction",
  overridesResolver: (props, styles2) => styles2.startAction
})(({
  ownerState
}) => ({
  display: "inherit",
  position: "absolute",
  top: ownerState.nested ? "calc(var(--ListItem-minHeight) / 2)" : "50%",
  left: 0,
  transform: "translate(var(--ListItem-startActionTranslateX), -50%)",
  zIndex: 1
  // to stay on top of ListItemButton (default `position: relative`).
}));
var ListItemEndAction = styled_default("div", {
  name: "JoyListItem",
  slot: "StartAction",
  overridesResolver: (props, styles2) => styles2.startAction
})(({
  ownerState
}) => ({
  display: "inherit",
  position: "absolute",
  top: ownerState.nested ? "calc(var(--ListItem-minHeight) / 2)" : "50%",
  right: 0,
  transform: "translate(var(--ListItem-endActionTranslateX), -50%)"
}));
var ListItem = React98.forwardRef(function ListItem2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyListItem"
  });
  const group = React98.useContext(GroupListContext_default);
  const listComponent = React98.useContext(ComponentListContext_default);
  const row = React98.useContext(RowListContext_default);
  const wrap = React98.useContext(WrapListContext_default);
  const nesting = React98.useContext(NestedListContext_default);
  const {
    component: componentProp,
    className,
    children,
    nested = false,
    sticky = false,
    variant = "plain",
    color = "neutral",
    startAction,
    endAction,
    role: roleProp,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded30);
  const [subheaderId, setSubheaderId] = React98.useState("");
  const [listElement, listRole] = (listComponent == null ? void 0 : listComponent.split(":")) || ["", ""];
  const component = componentProp || (listElement && !listElement.match(/^(ul|ol|menu)$/) ? "div" : void 0);
  let role = group === "menu" ? "none" : void 0;
  if (listComponent) {
    role = {
      menu: "none",
      menubar: "none",
      group: "presentation"
    }[listRole];
  }
  if (roleProp) {
    role = roleProp;
  }
  const ownerState = _extends({}, props, {
    sticky,
    startAction,
    endAction,
    row,
    wrap,
    variant,
    color,
    nesting,
    nested,
    component,
    role
  });
  const classes = useUtilityClasses23(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    additionalProps: {
      role
    },
    ref,
    className: clsx_default(classes.root, className),
    elementType: ListItemRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotStartAction, startActionProps] = useSlot("startAction", {
    className: classes.startAction,
    elementType: ListItemStartAction,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndAction, endActionProps] = useSlot("endAction", {
    className: classes.endAction,
    elementType: ListItemEndAction,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime52.jsx)(ListSubheaderContext_default.Provider, {
    value: setSubheaderId,
    children: (0, import_jsx_runtime52.jsx)(NestedListContext_default.Provider, {
      value: nested ? subheaderId || true : false,
      children: (0, import_jsx_runtime53.jsxs)(SlotRoot, _extends({}, rootProps, {
        children: [startAction && (0, import_jsx_runtime52.jsx)(SlotStartAction, _extends({}, startActionProps, {
          children: startAction
        })), React98.Children.map(children, (child, index2) => {
          var _child$props;
          return React98.isValidElement(child) ? React98.cloneElement(child, _extends({}, index2 === 0 && {
            "data-first-child": ""
          }, isMuiElement(child, ["ListItem"]) && {
            // The ListItem of ListItem should not be 'li'
            component: ((_child$props = child.props) == null ? void 0 : _child$props.component) || "div"
          })) : child;
        }), endAction && (0, import_jsx_runtime52.jsx)(SlotEndAction, _extends({}, endActionProps, {
          children: endAction
        }))]
      }))
    })
  });
});
true ? ListItem.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types34.default.node,
  /**
   * @ignore
   */
  className: import_prop_types34.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types34.default.oneOfType([import_prop_types34.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types34.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types34.default.elementType,
  /**
   * The element to display at the end of ListItem.
   */
  endAction: import_prop_types34.default.node,
  /**
   * If `true`, the component can contain NestedList.
   * @default false
   */
  nested: import_prop_types34.default.bool,
  /**
   * @ignore
   */
  role: import_prop_types34.default.string,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types34.default.shape({
    endAction: import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object]),
    root: import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object]),
    startAction: import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types34.default.shape({
    endAction: import_prop_types34.default.elementType,
    root: import_prop_types34.default.elementType,
    startAction: import_prop_types34.default.elementType
  }),
  /**
   * The element to display at the start of ListItem.
   */
  startAction: import_prop_types34.default.node,
  /**
   * If `true`, the component has sticky position (with top = 0).
   * @default false
   */
  sticky: import_prop_types34.default.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types34.default.oneOfType([import_prop_types34.default.arrayOf(import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object, import_prop_types34.default.bool])), import_prop_types34.default.func, import_prop_types34.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types34.default.oneOfType([import_prop_types34.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types34.default.string])
} : void 0;
ListItem.muiName = "ListItem";
var ListItem_default = ListItem;

// node_modules/@mui/joy/AccordionDetails/accordionDetailsClasses.js
function getAccordionDetailsUtilityClass(slot) {
  return generateUtilityClass2("MuiAccordionDetails", slot);
}
var accordionDetailsClasses = generateUtilityClasses2("MuiAccordionDetails", ["root", "content", "expanded"]);
var accordionDetailsClasses_default = accordionDetailsClasses;

// node_modules/@mui/joy/Accordion/Accordion.js
var import_jsx_runtime54 = __toESM(require_jsx_runtime());
var _excluded31 = ["accordionId", "component", "color", "children", "defaultExpanded", "disabled", "expanded", "onChange", "variant", "slots", "slotProps"];
var useUtilityClasses24 = (ownerState) => {
  const {
    variant,
    color,
    expanded,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", expanded && "expanded", disabled && "disabled", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`]
  };
  return composeClasses2(slots, getAccordionUtilityClass, {});
};
var AccordionRoot = styled_default(StyledListItem, {
  name: "JoyAccordion",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({
  borderBottom: "var(--Accordion-borderBottom)",
  "&[data-first-child]": {
    "--ListItem-radius": "var(--unstable_List-childRadius) var(--unstable_List-childRadius) 0 0"
  },
  "&[data-last-child]": {
    "--ListItem-radius": "0 0 var(--unstable_List-childRadius) var(--unstable_List-childRadius)",
    '& [aria-expanded="true"]': {
      "--ListItem-radius": "0"
    },
    [`& .${accordionDetailsClasses_default.root}`]: {
      "--AccordionDetails-radius": "0 0 var(--unstable_List-childRadius) var(--unstable_List-childRadius)"
    }
  },
  "&:not([data-first-child]):not([data-last-child])": {
    "--ListItem-radius": "0"
  }
});
var Accordion = React99.forwardRef(function Accordion2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyAccordion"
  });
  const {
    accordionId: idOverride,
    component = "div",
    color = "neutral",
    children,
    defaultExpanded = false,
    disabled = false,
    expanded: expandedProp,
    onChange,
    variant = "plain",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded31);
  const accordionId = useId(idOverride);
  const [expanded, setExpandedState] = useControlled({
    controlled: expandedProp,
    default: defaultExpanded,
    name: "Accordion",
    state: "expanded"
  });
  const handleChange = React99.useCallback((event) => {
    setExpandedState(!expanded);
    if (onChange) {
      onChange(event, !expanded);
    }
  }, [expanded, onChange, setExpandedState]);
  const contextValue = React99.useMemo(() => ({
    accordionId,
    expanded,
    disabled,
    toggle: handleChange
  }), [accordionId, expanded, disabled, handleChange]);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const ownerState = _extends({}, props, {
    component,
    color,
    variant,
    expanded,
    disabled,
    nested: true
    // for the ListItem styles
  });
  const classes = useUtilityClasses24(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: AccordionRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime54.jsx)(AccordionContext_default.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime54.jsx)(SlotRoot, _extends({}, rootProps, {
      children: React99.Children.map(children, (child, index2) => React99.isValidElement(child) && index2 === 0 ? React99.cloneElement(child, {
        // @ts-ignore: to let ListItem knows when to apply margin(Inline|Block)Start
        "data-first-child": ""
      }) : child)
    }))
  });
});
true ? Accordion.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The id to be used in the AccordionDetails which is controlled by the AccordionSummary.
   * If not provided, the id is autogenerated.
   */
  accordionId: import_prop_types35.default.string,
  /**
   * Used to render icon or text elements inside the Accordion if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types35.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types35.default.oneOf(["danger", "neutral", "primary", "success", "warning"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types35.default.elementType,
  /**
   * If `true`, expands the accordion by default.
   * @default false
   */
  defaultExpanded: import_prop_types35.default.bool,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types35.default.bool,
  /**
   * If `true`, expands the accordion, otherwise collapse it.
   * Setting this prop enables control over the accordion.
   */
  expanded: import_prop_types35.default.bool,
  /**
   * Callback fired when the expand/collapse state is changed.
   *
   * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
   * @param {boolean} expanded The `expanded` state of the accordion.
   */
  onChange: import_prop_types35.default.func,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types35.default.shape({
    root: import_prop_types35.default.oneOfType([import_prop_types35.default.func, import_prop_types35.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types35.default.shape({
    root: import_prop_types35.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types35.default.oneOfType([import_prop_types35.default.arrayOf(import_prop_types35.default.oneOfType([import_prop_types35.default.func, import_prop_types35.default.object, import_prop_types35.default.bool])), import_prop_types35.default.func, import_prop_types35.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types35.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var Accordion_default = Accordion;

// node_modules/@mui/joy/AccordionDetails/AccordionDetails.js
var React100 = __toESM(require_react());
var import_prop_types36 = __toESM(require_prop_types());
var import_jsx_runtime55 = __toESM(require_jsx_runtime());
var _excluded33 = ["component", "children", "color", "variant", "slots", "slotProps"];
var useUtilityClasses25 = (ownerState) => {
  const {
    expanded
  } = ownerState;
  const slots = {
    root: ["root", expanded && "expanded"],
    content: ["content", expanded && "expanded"]
  };
  return composeClasses2(slots, getAccordionDetailsUtilityClass, {});
};
var AccordionDetailsRoot = styled_default("div", {
  name: "JoyAccordionDetails",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants;
  return _extends({
    overflow: "hidden",
    borderRadius: "var(--AccordionDetails-radius)",
    display: "grid",
    gridTemplateRows: "1fr",
    marginInline: "calc(-1 * var(--ListItem-paddingLeft)) calc(-1 * var(--ListItem-paddingRight))",
    transition: "var(--AccordionDetails-transition)"
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    [`&:not(.${accordionDetailsClasses_default.expanded})`]: {
      gridTemplateRows: "0fr"
    }
  });
});
var AccordionDetailsContent = styled_default("div", {
  name: "JoyAccordionDetails",
  slot: "Content",
  overridesResolver: (props, styles2) => styles2.root
})({
  display: "flex",
  flexDirection: "column",
  overflow: "hidden",
  // required for user-provided transition to work
  // Need to apply padding to content rather than root because the overflow.
  // Otherwise, the focus ring of the children can be cut off.
  paddingInlineStart: "var(--ListItem-paddingLeft)",
  paddingInlineEnd: "var(--ListItem-paddingRight)",
  paddingBlockStart: "calc(var(--ListItem-paddingY) / 2)",
  paddingBlockEnd: "calc(2.5 * var(--ListItem-paddingY))",
  transition: "var(--AccordionDetails-transition)",
  [`&:not(.${accordionDetailsClasses_default.expanded})`]: {
    paddingBlock: 0
  }
});
var AccordionDetails = React100.forwardRef(function AccordionDetails2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyAccordionDetails"
  });
  const {
    component = "div",
    children,
    color = "neutral",
    variant = "plain",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded33);
  const {
    accordionId,
    expanded = false
  } = React100.useContext(AccordionContext_default);
  const rootRef = React100.useRef(null);
  const handleRef = useForkRef(rootRef, ref);
  React100.useEffect(() => {
    if (rootRef.current) {
      const elements = rootRef.current.querySelectorAll('a, button, input, textarea, select, details, [tabindex]:not([tabindex="-1"])');
      elements.forEach((elm) => {
        if (expanded) {
          const prevTabIndex = elm.getAttribute("data-prev-tabindex");
          const currentTabIndex = elm.getAttribute("tabindex");
          if (currentTabIndex && prevTabIndex) {
            elm.setAttribute("tabindex", prevTabIndex);
            elm.removeAttribute("data-prev-tabindex");
          }
          if (!prevTabIndex && !currentTabIndex) {
            elm.removeAttribute("tabindex");
          }
        } else {
          elm.setAttribute("data-prev-tabindex", elm.getAttribute("tabindex") || "");
          elm.setAttribute("tabindex", "-1");
        }
      });
    }
  }, [expanded]);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const ownerState = _extends({}, props, {
    component,
    color,
    variant,
    expanded,
    nesting: true
    // for the List styles
  });
  const classes = useUtilityClasses25(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref: handleRef,
    className: classes.root,
    elementType: AccordionDetailsRoot,
    externalForwardedProps,
    additionalProps: {
      id: `${accordionId}-details`,
      "aria-labelledby": `${accordionId}-summary`,
      role: "region",
      hidden: expanded ? void 0 : true
    },
    ownerState
  });
  const [SlotContent, contentProps] = useSlot("content", {
    className: classes.content,
    elementType: AccordionDetailsContent,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime55.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime55.jsx)(SlotContent, _extends({}, contentProps, {
      children
    }))
  }));
});
true ? AccordionDetails.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the AccordionDetails if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types36.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types36.default.oneOf(["danger", "neutral", "primary", "success", "warning"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types36.default.elementType,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types36.default.shape({
    content: import_prop_types36.default.oneOfType([import_prop_types36.default.func, import_prop_types36.default.object]),
    root: import_prop_types36.default.oneOfType([import_prop_types36.default.func, import_prop_types36.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types36.default.shape({
    content: import_prop_types36.default.elementType,
    root: import_prop_types36.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types36.default.oneOfType([import_prop_types36.default.arrayOf(import_prop_types36.default.oneOfType([import_prop_types36.default.func, import_prop_types36.default.object, import_prop_types36.default.bool])), import_prop_types36.default.func, import_prop_types36.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types36.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var AccordionDetails_default = AccordionDetails;

// node_modules/@mui/joy/AccordionGroup/AccordionGroup.js
var React104 = __toESM(require_react());
var import_prop_types38 = __toESM(require_prop_types());

// node_modules/@mui/joy/AccordionGroup/accordionGroupClasses.js
function getAccordionGroupUtilityClass(slot) {
  return generateUtilityClass2("MuiAccordionGroup", slot);
}
var accordionGroupClasses = generateUtilityClasses2("MuiAccordionGroup", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var accordionGroupClasses_default = accordionGroupClasses;

// node_modules/@mui/joy/List/ListProvider.js
var React101 = __toESM(require_react());
var import_jsx_runtime56 = __toESM(require_jsx_runtime());
var scopedVariables = {
  "--NestedList-marginRight": "0px",
  "--NestedList-marginLeft": "0px",
  "--NestedListItem-paddingLeft": "var(--ListItem-paddingX)",
  // reset ListItem, ListItemButton negative margin (caused by NestedListItem)
  "--ListItemButton-marginBlock": "0px",
  "--ListItemButton-marginInline": "0px",
  "--ListItem-marginBlock": "0px",
  "--ListItem-marginInline": "0px"
};
function ListProvider(props) {
  const {
    children,
    nested,
    row = false,
    wrap = false
  } = props;
  const baseProviders = (0, import_jsx_runtime56.jsx)(RowListContext_default.Provider, {
    value: row,
    children: (0, import_jsx_runtime56.jsx)(WrapListContext_default.Provider, {
      value: wrap,
      children: React101.Children.map(children, (child, index2) => React101.isValidElement(child) ? React101.cloneElement(child, _extends({}, index2 === 0 && {
        "data-first-child": ""
      }, index2 === React101.Children.count(children) - 1 && {
        "data-last-child": ""
      })) : child)
    })
  });
  if (nested === void 0) {
    return baseProviders;
  }
  return (0, import_jsx_runtime56.jsx)(NestedListContext_default.Provider, {
    value: nested,
    children: baseProviders
  });
}
var ListProvider_default = ListProvider;

// node_modules/@mui/joy/List/List.js
var React103 = __toESM(require_react());
var import_prop_types37 = __toESM(require_prop_types());

// node_modules/@mui/joy/styles/styleUtils.js
var resolveSxValue = ({
  theme,
  ownerState
}, keys) => {
  let sxObject = {};
  function resolveSx(sxProp) {
    if (typeof sxProp === "function") {
      const result = sxProp(theme);
      resolveSx(result);
    } else if (Array.isArray(sxProp)) {
      sxProp.forEach((sxItem) => {
        if (typeof sxItem !== "boolean") {
          resolveSx(sxItem);
        }
      });
    } else if (typeof sxProp === "object") {
      sxObject = _extends({}, sxObject, sxProp);
    }
  }
  if (ownerState.sx) {
    resolveSx(ownerState.sx);
    keys.forEach((key) => {
      const value = sxObject[key];
      if (typeof value === "string" || typeof value === "number") {
        if (key === "borderRadius") {
          if (typeof value === "number") {
            sxObject[key] = `${value}px`;
          } else {
            var _theme$vars;
            sxObject[key] = ((_theme$vars = theme.vars) == null ? void 0 : _theme$vars.radius[value]) || value;
          }
        } else if (["p", "padding", "m", "margin"].indexOf(key) !== -1 && typeof value === "number") {
          sxObject[key] = theme.spacing(value);
        } else {
          sxObject[key] = value;
        }
      } else if (typeof value === "function") {
        sxObject[key] = value(theme);
      } else {
        sxObject[key] = void 0;
      }
    });
  }
  return sxObject;
};

// node_modules/@mui/joy/List/listClasses.js
function getListUtilityClass(slot) {
  return generateUtilityClass2("MuiList", slot);
}
var listClasses = generateUtilityClasses2("MuiList", ["root", "nesting", "scoped", "sizeSm", "sizeMd", "sizeLg", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "horizontal", "vertical"]);
var listClasses_default = listClasses;

// node_modules/@mui/joy/RadioGroup/RadioGroupContext.js
var React102 = __toESM(require_react());
var RadioGroupContext = React102.createContext(void 0);
if (true) {
  RadioGroupContext.displayName = "RadioGroupContext";
}
var RadioGroupContext_default = RadioGroupContext;

// node_modules/@mui/joy/List/List.js
var import_jsx_runtime57 = __toESM(require_jsx_runtime());
var _excluded34 = ["component", "className", "children", "size", "orientation", "wrap", "variant", "color", "role", "slots", "slotProps"];
var useUtilityClasses26 = (ownerState) => {
  const {
    variant,
    color,
    size: size3,
    nesting,
    orientation,
    instanceSize
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, !instanceSize && !nesting && size3 && `size${capitalize(size3)}`, instanceSize && `size${capitalize(instanceSize)}`, nesting && "nesting"]
  };
  return composeClasses2(slots, getListUtilityClass, {});
};
var StyledList = styled_default("ul")(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const {
    p,
    padding,
    borderRadius
  } = resolveSxValue({
    theme,
    ownerState
  }, ["p", "padding", "borderRadius"]);
  function applySizeVars(size3) {
    if (size3 === "sm") {
      return {
        "--ListDivider-gap": "0.25rem",
        "--ListItem-minHeight": "2rem",
        "--ListItem-paddingY": "3px",
        "--ListItem-paddingX": ownerState.marker ? "3px" : "0.5rem",
        "--ListItem-gap": "0.5rem",
        "--ListItemDecorator-size": ownerState.orientation === "horizontal" ? "1.5rem" : "2rem",
        "--Icon-fontSize": theme.vars.fontSize.lg
      };
    }
    if (size3 === "md") {
      return {
        "--ListDivider-gap": "0.375rem",
        "--ListItem-minHeight": "2.25rem",
        "--ListItem-paddingY": "0.25rem",
        "--ListItem-paddingX": ownerState.marker ? "0.25rem" : "0.75rem",
        "--ListItem-gap": "0.625rem",
        "--ListItemDecorator-size": ownerState.orientation === "horizontal" ? "1.75rem" : "2.5rem",
        "--Icon-fontSize": theme.vars.fontSize.xl
      };
    }
    if (size3 === "lg") {
      return {
        "--ListDivider-gap": "0.5rem",
        "--ListItem-minHeight": "2.75rem",
        "--ListItem-paddingY": "0.375rem",
        "--ListItem-paddingX": ownerState.marker ? "0.5rem" : "1rem",
        "--ListItem-gap": "0.75rem",
        "--ListItemDecorator-size": ownerState.orientation === "horizontal" ? "2.25rem" : "3rem",
        "--Icon-fontSize": theme.vars.fontSize.xl2
      };
    }
    return {};
  }
  return [ownerState.nesting && _extends({}, applySizeVars(ownerState.instanceSize), {
    "--ListItem-paddingRight": "var(--ListItem-paddingX)",
    "--ListItem-paddingLeft": "var(--NestedListItem-paddingLeft)",
    // reset ListItem, ListItemButton negative margin (caused by NestedListItem)
    "--ListItemButton-marginBlock": "0px",
    "--ListItemButton-marginInline": "0px",
    "--ListItem-marginBlock": "0px",
    "--ListItem-marginInline": "0px",
    padding: 0
  }, ownerState.marker && {
    paddingInlineStart: "calc(3ch - var(--_List-markerDeduct, 0px))"
    // the width of the marker
  }, {
    marginInlineStart: "var(--NestedList-marginLeft)",
    marginInlineEnd: "var(--NestedList-marginRight)",
    marginBlockStart: "var(--List-gap)",
    marginBlockEnd: "initial"
    // reset user agent stylesheet.
  }), !ownerState.nesting && _extends({}, applySizeVars(ownerState.size), {
    "--List-gap": "0px",
    "--List-nestedInsetStart": "0px",
    "--ListItem-paddingLeft": "var(--ListItem-paddingX)",
    "--ListItem-paddingRight": "var(--ListItem-paddingX)"
  }, ownerState.marker && {
    "--_List-markerDeduct": "1ch"
  }, {
    // Automatic radius adjustment kicks in only if '--List-padding' and '--List-radius' are provided.
    "--unstable_List-childRadius": "calc(max(var(--List-radius) - var(--List-padding), min(var(--List-padding) / 2, var(--List-radius) / 2)) - var(--variant-borderWidth, 0px))",
    "--ListItem-radius": "var(--unstable_List-childRadius)",
    // by default, The ListItem & ListItemButton use automatic radius adjustment based on the parent List.
    "--ListItem-startActionTranslateX": "calc(0.5 * var(--ListItem-paddingLeft))",
    "--ListItem-endActionTranslateX": "calc(-0.5 * var(--ListItem-paddingRight))",
    margin: "initial"
  }, theme.typography[`body-${ownerState.size}`], ownerState.orientation === "horizontal" ? _extends({}, ownerState.wrap ? {
    padding: "var(--List-padding)",
    // Fallback is not needed for row-wrap List
    marginInlineStart: "calc(-1 * var(--List-gap))",
    marginBlockStart: "calc(-1 * var(--List-gap))"
  } : {
    paddingInline: "var(--List-padding, var(--ListDivider-gap))",
    paddingBlock: "var(--List-padding)"
  }) : {
    paddingBlock: "var(--List-padding, var(--ListDivider-gap))",
    paddingInline: "var(--List-padding)"
  }, ownerState.marker && {
    paddingInlineStart: "3ch"
    // the width of the marker
  }), _extends({
    boxSizing: "border-box",
    borderRadius: "var(--List-radius)",
    listStyle: "none",
    display: "flex",
    flexDirection: ownerState.orientation === "horizontal" ? "row" : "column"
  }, ownerState.wrap && {
    flexWrap: "wrap"
  }, ownerState.marker && {
    "--_List-markerDisplay": "list-item",
    "--_List-markerType": ownerState.marker,
    lineHeight: "calc(var(--ListItem-minHeight) - 2 * var(--ListItem-paddingY))"
  }, {
    flexGrow: 1,
    position: "relative"
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    "--unstable_List-borderWidth": "var(--variant-borderWidth, 0px)"
  }, borderRadius !== void 0 && {
    "--List-radius": borderRadius
  }, p !== void 0 && {
    "--List-padding": p
  }, padding !== void 0 && {
    "--List-padding": padding
  })];
});
var ListRoot = styled_default(StyledList, {
  name: "JoyList",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({});
var List = React103.forwardRef(function List2(inProps, ref) {
  var _inProps$size;
  const nesting = React103.useContext(NestedListContext_default);
  const group = React103.useContext(GroupListContext_default);
  const radioGroupContext = React103.useContext(RadioGroupContext_default);
  const props = useThemeProps2({
    props: inProps,
    name: "JoyList"
  });
  const {
    component,
    className,
    children,
    size: sizeProp,
    orientation = "vertical",
    wrap = false,
    variant = "plain",
    color = "neutral",
    role: roleProp,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded34);
  const size3 = sizeProp || ((_inProps$size = inProps.size) != null ? _inProps$size : "md");
  let role;
  if (group) {
    role = "group";
  }
  if (radioGroupContext) {
    role = "presentation";
  }
  if (roleProp) {
    role = roleProp;
  }
  const ownerState = _extends({}, props, {
    instanceSize: inProps.size,
    size: size3,
    nesting,
    orientation,
    wrap,
    variant,
    color,
    role
  });
  const classes = useUtilityClasses26(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: ListRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      as: component,
      role,
      "aria-labelledby": typeof nesting === "string" ? nesting : void 0
    }
  });
  return (0, import_jsx_runtime57.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime57.jsx)(ComponentListContext_default.Provider, {
      value: `${typeof component === "string" ? component : ""}:${role || ""}`,
      children: (0, import_jsx_runtime57.jsx)(ListProvider_default, {
        row: orientation === "horizontal",
        wrap,
        children
      })
    })
  }));
});
true ? List.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types37.default.node,
  /**
   * @ignore
   */
  className: import_prop_types37.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types37.default.oneOfType([import_prop_types37.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types37.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types37.default.elementType,
  /**
   * The marker (such as a disc, character, or custom counter style) of the list items.
   * When this prop is specified, the List Item changes the CSS display to `list-item` in order to apply the marker.
   *
   * To see all available options, check out the [MDN list-style-type page](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type).
   */
  marker: import_prop_types37.default.string,
  /**
   * The component orientation.
   * @default 'vertical'
   */
  orientation: import_prop_types37.default.oneOf(["horizontal", "vertical"]),
  /**
   * @ignore
   */
  role: import_prop_types37.default.string,
  /**
   * The size of the component (affect other nested list* components).
   * @default 'md'
   */
  size: import_prop_types37.default.oneOfType([import_prop_types37.default.oneOf(["sm", "md", "lg"]), import_prop_types37.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types37.default.shape({
    root: import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types37.default.shape({
    root: import_prop_types37.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types37.default.oneOfType([import_prop_types37.default.arrayOf(import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.object, import_prop_types37.default.bool])), import_prop_types37.default.func, import_prop_types37.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types37.default.oneOfType([import_prop_types37.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types37.default.string]),
  /**
   * Only for horizontal list.
   * If `true`, the list sets the flex-wrap to "wrap" and adjust margin to have gap-like behavior (will move to `gap` in the future).
   *
   * @default false
   */
  wrap: import_prop_types37.default.bool
} : void 0;
var List_default = List;

// node_modules/@mui/joy/AccordionGroup/AccordionGroup.js
var import_jsx_runtime58 = __toESM(require_jsx_runtime());
var _excluded35 = ["component", "color", "children", "disableDivider", "variant", "transition", "size", "slots", "slotProps"];
var useUtilityClasses27 = (ownerState) => {
  const {
    variant,
    color,
    size: size3
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`]
  };
  return composeClasses2(slots, getAccordionGroupUtilityClass, {});
};
var AccordionGroupRoot = styled_default(StyledList, {
  name: "JoyAccordionGroup",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  let transition = {};
  if (ownerState.transition) {
    if (typeof ownerState.transition === "string") {
      transition = {
        "--AccordionDetails-transition": `grid-template-rows ${ownerState.transition}, padding-block ${ownerState.transition}`
      };
    }
    if (typeof ownerState.transition === "object") {
      transition = {
        "--AccordionDetails-transition": `grid-template-rows ${ownerState.transition.initial}, padding-block ${ownerState.transition.initial}`,
        [`& .${accordionDetailsClasses_default.root}.${accordionDetailsClasses_default.expanded}`]: {
          "--AccordionDetails-transition": `grid-template-rows ${ownerState.transition.expanded}, padding-block ${ownerState.transition.expanded}`
        }
      };
    }
  }
  return _extends({
    "--List-padding": "0px",
    "--ListDivider-gap": "0px"
  }, transition, !ownerState.disableDivider && {
    [`& .${accordionClasses_default.root}:not([data-last-child])`]: {
      "--Accordion-borderBottom": `1px solid ${theme.vars.palette.divider}`
    }
  });
});
var AccordionGroup = React104.forwardRef(function AccordionGroup2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyAccordionGroup"
  });
  const {
    component = "div",
    color = "neutral",
    children,
    disableDivider = false,
    variant = "plain",
    transition = "0.2s ease",
    size: size3 = "md",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded35);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const ownerState = _extends({}, props, {
    component,
    color,
    disableDivider,
    variant,
    transition,
    size: size3
  });
  const classes = useUtilityClasses27(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: AccordionGroupRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime58.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime58.jsx)(ListProvider_default, {
      children
    })
  }));
});
true ? AccordionGroup.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the AccordionGroup if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types38.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types38.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types38.default.elementType,
  /**
   * If `true`, the divider between accordions will be hidden.
   * @default false
   */
  disableDivider: import_prop_types38.default.bool,
  /**
   * The size of the component (affect other nested list* components).
   * @default 'md'
   */
  size: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["sm", "md", "lg"]), import_prop_types38.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types38.default.shape({
    root: import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types38.default.shape({
    root: import_prop_types38.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
  /**
   * The CSS transition for the Accordion details.
   * @default '0.2s ease'
   */
  transition: import_prop_types38.default.oneOfType([import_prop_types38.default.shape({
    expanded: import_prop_types38.default.string.isRequired,
    initial: import_prop_types38.default.string.isRequired
  }), import_prop_types38.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types38.default.string])
} : void 0;
var AccordionGroup_default = AccordionGroup;

// node_modules/@mui/joy/AccordionSummary/AccordionSummary.js
var React110 = __toESM(require_react());
var import_prop_types41 = __toESM(require_prop_types());

// node_modules/@mui/joy/AccordionSummary/accordionSummaryClasses.js
function getAccordionSummaryUtilityClass(slot) {
  return generateUtilityClass2("MuiAccordionSummary", slot);
}
var accordionSummaryClasses = generateUtilityClasses2("MuiAccordionSummary", ["root", "button", "indicator", "disabled", "expanded"]);
var accordionSummaryClasses_default = accordionSummaryClasses;

// node_modules/@mui/joy/ListItemButton/ListItemButton.js
var React106 = __toESM(require_react());
var import_prop_types39 = __toESM(require_prop_types());

// node_modules/@mui/joy/ListItemButton/listItemButtonClasses.js
function getListItemButtonUtilityClass(slot) {
  return generateUtilityClass2("MuiListItemButton", slot);
}
var listItemButtonClasses = generateUtilityClasses2("MuiListItemButton", ["root", "horizontal", "vertical", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "focusVisible", "disabled", "selected", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var listItemButtonClasses_default = listItemButtonClasses;

// node_modules/@mui/joy/ListItemButton/ListItemButtonOrientationContext.js
var React105 = __toESM(require_react());
var ListItemButtonOrientationContext = React105.createContext("horizontal");
if (true) {
  ListItemButtonOrientationContext.displayName = "ListItemButtonOrientationContext";
}
var ListItemButtonOrientationContext_default = ListItemButtonOrientationContext;

// node_modules/@mui/joy/ListItemButton/ListItemButton.js
var import_jsx_runtime59 = __toESM(require_jsx_runtime());
var _excluded36 = ["children", "className", "action", "component", "orientation", "role", "selected", "color", "variant", "slots", "slotProps"];
var useUtilityClasses28 = (ownerState) => {
  const {
    color,
    disabled,
    focusVisible,
    focusVisibleClassName,
    selected,
    variant
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", color && `color${capitalize(color)}`, selected && "selected", variant && `variant${capitalize(variant)}`]
  };
  const composedClasses = composeClasses2(slots, getListItemButtonUtilityClass, {});
  if (focusVisible && focusVisibleClassName) {
    composedClasses.root += ` ${focusVisibleClassName}`;
  }
  return composedClasses;
};
var StyledListItemButton = styled_default("div")(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants2, _theme$variants3, _theme$variants4, _theme$variants5, _theme$variants6;
  return _extends({
    "--Icon-margin": "initial",
    // reset the icon's margin.
    "--Icon-color": ownerState.color !== "neutral" || ownerState.variant === "solid" ? "currentColor" : theme.vars.palette.text.icon,
    WebkitTapHighlightColor: "transparent",
    boxSizing: "border-box",
    position: "relative",
    font: "inherit",
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
    alignSelf: "stretch",
    // always stretch itself to fill the parent (List|ListItem)
    gap: "var(--ListItem-gap)"
  }, ownerState.orientation === "vertical" && {
    flexDirection: "column",
    justifyContent: "center"
  }, {
    textAlign: "initial",
    textDecoration: "initial",
    // reset native anchor tag
    backgroundColor: "initial",
    // reset button background
    cursor: "pointer",
    // In some cases, ListItemButton is a child of ListItem so the margin needs to be controlled by the ListItem. The value is negative to account for the ListItem's padding
    marginInline: "var(--ListItemButton-marginInline)",
    marginBlock: "var(--ListItemButton-marginBlock)"
  }, ownerState["data-first-child"] === void 0 && {
    marginInlineStart: ownerState.row ? "var(--List-gap)" : void 0,
    marginBlockStart: ownerState.row ? void 0 : "var(--List-gap)"
  }, {
    // account for the border width, so that all of the ListItemButtons content aligned horizontally
    paddingBlock: "calc(var(--ListItem-paddingY) - var(--variant-borderWidth, 0px))",
    // account for the border width, so that all of the ListItemButtons content aligned vertically
    paddingInlineStart: "calc(var(--ListItem-paddingLeft) + var(--ListItem-startActionWidth, var(--unstable_startActionWidth, 0px)))",
    // --internal variable makes it possible to customize the actionWidth from the top List
    paddingInlineEnd: "calc(var(--ListItem-paddingRight) + var(--ListItem-endActionWidth, var(--unstable_endActionWidth, 0px)))",
    // --internal variable makes it possible to customize the actionWidth from the top List
    minBlockSize: "var(--ListItem-minHeight)",
    border: "1px solid transparent",
    // use `transparent` as a placeholder to prevent the button from jumping when switching to `outlined` variant
    borderRadius: "var(--ListItem-radius)",
    flex: "var(--unstable_ListItem-flex, none)",
    // prevent children from shrinking when the List's height is limited.
    fontSize: "inherit",
    // prevent user agent style when component="button"
    lineHeight: "inherit",
    // prevent user agent style when component="button"
    minInlineSize: 0,
    [theme.focus.selector]: _extends({}, theme.focus.default, {
      zIndex: 1
      // to be above of the next element. For example, the first Tab item should be above the second so that the outline is above the second Tab.
    })
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    "&:active": (_theme$variants2 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants2[ownerState.color],
    [`.${listItemClasses_default.root} > &`]: {
      "--unstable_ListItem-flex": "1 0 0%"
      // grow to fill the available space of ListItem
    },
    [`&.${listItemButtonClasses_default.selected}`]: _extends({}, (_theme$variants3 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants3[ownerState.color], {
      "--Icon-color": "currentColor"
    }),
    [`&:not(.${listItemButtonClasses_default.selected}, [aria-selected="true"])`]: {
      "&:hover": (_theme$variants4 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants4[ownerState.color],
      "&:active": (_theme$variants5 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants5[ownerState.color]
    },
    [`&.${listItemButtonClasses_default.disabled}`]: _extends({}, (_theme$variants6 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants6[ownerState.color])
  });
});
var ListItemButtonRoot = styled_default(StyledListItemButton, {
  name: "JoyListItemButton",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  ownerState,
  theme
}) => _extends({}, !ownerState.row && {
  [`&.${listItemButtonClasses_default.selected}`]: {
    fontWeight: theme.vars.fontWeight.md
  }
}));
var ListItemButton = React106.forwardRef(function ListItemButton2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyListItemButton"
  });
  const row = React106.useContext(RowListContext_default);
  const {
    children,
    className,
    action,
    component = "div",
    orientation = "horizontal",
    role,
    selected = false,
    color = "neutral",
    variant = "plain",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded36);
  const buttonRef = React106.useRef(null);
  const handleRef = useForkRef(buttonRef, ref);
  const {
    focusVisible,
    setFocusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    rootRef: handleRef
  }));
  React106.useImperativeHandle(action, () => ({
    focusVisible: () => {
      var _buttonRef$current;
      setFocusVisible(true);
      (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();
    }
  }), [setFocusVisible]);
  const ownerState = _extends({}, props, {
    component,
    color,
    focusVisible,
    orientation,
    row,
    selected,
    variant
  });
  const classes = useUtilityClasses28(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: ListItemButtonRoot,
    externalForwardedProps,
    ownerState,
    getSlotProps: getRootProps
  });
  return (0, import_jsx_runtime59.jsx)(ListItemButtonOrientationContext_default.Provider, {
    value: orientation,
    children: (0, import_jsx_runtime59.jsx)(SlotRoot, _extends({}, rootProps, {
      role: role != null ? role : rootProps.role,
      children
    }))
  });
});
true ? ListItemButton.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */
  action: import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.shape({
    current: import_prop_types39.default.shape({
      focusVisible: import_prop_types39.default.func.isRequired
    })
  })]),
  /**
   * If `true`, the list item is focused during the first mount.
   * Focus will also be triggered if the value changes from false to true.
   * @default false
   */
  autoFocus: import_prop_types39.default.bool,
  /**
   * The content of the component.
   */
  children: import_prop_types39.default.node,
  /**
   * @ignore
   */
  className: import_prop_types39.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types39.default.oneOfType([import_prop_types39.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types39.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types39.default.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types39.default.bool,
  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: import_prop_types39.default.string,
  /**
   * The content direction flow.
   * @default 'horizontal'
   */
  orientation: import_prop_types39.default.oneOf(["horizontal", "vertical"]),
  /**
   * @ignore
   */
  role: import_prop_types39.default.string,
  /**
   * If `true`, the component is selected.
   * @default false
   */
  selected: import_prop_types39.default.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types39.default.shape({
    root: import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types39.default.shape({
    root: import_prop_types39.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types39.default.oneOfType([import_prop_types39.default.arrayOf(import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.object, import_prop_types39.default.bool])), import_prop_types39.default.func, import_prop_types39.default.object]),
  /**
   * @default 0
   */
  tabIndex: import_prop_types39.default.number,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types39.default.oneOfType([import_prop_types39.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types39.default.string])
} : void 0;
var ListItemButton_default = ListItemButton;

// node_modules/@mui/joy/internal/svg-icons/KeyboardArrowDown.js
var React109 = __toESM(require_react());

// node_modules/@mui/joy/utils/createSvgIcon.js
var React108 = __toESM(require_react());

// node_modules/@mui/joy/SvgIcon/SvgIcon.js
var import_prop_types40 = __toESM(require_prop_types());
var React107 = __toESM(require_react());

// node_modules/@mui/joy/SvgIcon/svgIconClasses.js
function getSvgIconUtilityClass(slot) {
  return generateUtilityClass2("MuiSvgIcon", slot);
}
var svgIconClasses = generateUtilityClasses2("MuiSvgIcon", ["root", "colorInherit", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "fontSizeInherit", "fontSizeXs", "fontSizeSm", "fontSizeMd", "fontSizeLg", "fontSizeXl", "fontSizeXl2", "fontSizeXl3", "fontSizeXl4", "sizeSm", "sizeMd", "sizeLg"]);
var svgIconClasses_default = svgIconClasses;

// node_modules/@mui/joy/SvgIcon/SvgIcon.js
var import_jsx_runtime60 = __toESM(require_jsx_runtime());
var import_jsx_runtime61 = __toESM(require_jsx_runtime());
var _excluded37 = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox", "size", "slots", "slotProps"];
var useUtilityClasses29 = (ownerState) => {
  const {
    color,
    size: size3,
    fontSize
  } = ownerState;
  const slots = {
    root: ["root", color && color !== "inherit" && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`, fontSize && `fontSize${capitalize(fontSize)}`]
  };
  return composeClasses2(slots, getSvgIconUtilityClass, {});
};
var sizeMap = {
  sm: "xl",
  md: "xl2",
  lg: "xl3"
};
var SvgIconRoot = styled_default("svg", {
  name: "JoySvgIcon",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$palette;
  return _extends({}, ownerState.instanceSize && {
    "--Icon-fontSize": theme.vars.fontSize[sizeMap[ownerState.instanceSize]]
  }, ownerState.instanceFontSize && ownerState.instanceFontSize !== "inherit" && {
    "--Icon-fontSize": theme.vars.fontSize[ownerState.instanceFontSize]
  }, {
    userSelect: "none",
    margin: "var(--Icon-margin)",
    width: "1em",
    height: "1em",
    display: "inline-block",
    // the <svg> will define the property that has `currentColor`
    // for example heroicons uses fill="none" and stroke="currentColor"
    fill: ownerState.hasSvgAsChild ? void 0 : "currentColor",
    flexShrink: 0,
    fontSize: `var(--Icon-fontSize, ${theme.vars.fontSize[sizeMap[ownerState.size]] || "unset"})`
  }, ownerState.fontSize && ownerState.fontSize !== "inherit" && {
    fontSize: `var(--Icon-fontSize, ${theme.fontSize[ownerState.fontSize]})`
  }, !ownerState.htmlColor && _extends({
    color: `var(--Icon-color, ${theme.vars.palette.text.icon})`
  }, ownerState.color === "inherit" && {
    color: "inherit"
  }, ownerState.color !== "inherit" && theme.vars.palette[ownerState.color] && {
    color: `rgba(${(_theme$vars$palette = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette.mainChannel} / 1)`
  }));
});
var SvgIcon = React107.forwardRef(function SvgIcon2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoySvgIcon"
  });
  const {
    children,
    className,
    color,
    component = "svg",
    fontSize,
    htmlColor,
    inheritViewBox = false,
    titleAccess,
    viewBox = "0 0 24 24",
    size: size3 = "md",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded37);
  const hasSvgAsChild = React107.isValidElement(children) && children.type === "svg";
  const ownerState = _extends({}, props, {
    color,
    component,
    size: size3,
    instanceSize: inProps.size,
    fontSize,
    instanceFontSize: inProps.fontSize,
    inheritViewBox,
    viewBox,
    hasSvgAsChild
  });
  const classes = useUtilityClasses29(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: SvgIconRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: _extends({
      color: htmlColor,
      focusable: false
    }, titleAccess && {
      role: "img"
    }, !titleAccess && {
      "aria-hidden": true
    }, !inheritViewBox && {
      viewBox
    }, hasSvgAsChild && children.props)
  });
  return (0, import_jsx_runtime61.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [hasSvgAsChild ? children.props.children : children, titleAccess ? (0, import_jsx_runtime60.jsx)("title", {
      children: titleAccess
    }) : null]
  }));
});
true ? SvgIcon.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Node passed into the SVG element.
   */
  children: import_prop_types40.default.node,
  /**
   * @ignore
   */
  className: import_prop_types40.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
   */
  color: import_prop_types40.default.oneOfType([import_prop_types40.default.oneOf(["danger", "inherit", "neutral", "primary", "success", "warning"]), import_prop_types40.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types40.default.elementType,
  /**
   * The theme's fontSize applied to the icon that will override the `size` prop.
   * Use this prop when you want to use a specific font-size from the theme.
   */
  fontSize: import_prop_types40.default.oneOfType([import_prop_types40.default.oneOf(["inherit", "lg", "md", "sm", "xl", "xl2", "xl3", "xl4", "xs"]), import_prop_types40.default.string]),
  /**
   * Applies a color attribute to the SVG element.
   */
  htmlColor: import_prop_types40.default.string,
  /**
   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
   * prop will be ignored.
   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
   * `component`'s viewBox to the root node.
   * @default false
   */
  inheritViewBox: import_prop_types40.default.bool,
  /**
   * The shape-rendering attribute. The behavior of the different options is described on the
   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
   * If you are having issues with blurry icons you should investigate this prop.
   */
  shapeRendering: import_prop_types40.default.string,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types40.default.oneOfType([import_prop_types40.default.oneOf(["sm", "md", "lg"]), import_prop_types40.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types40.default.shape({
    root: import_prop_types40.default.oneOfType([import_prop_types40.default.func, import_prop_types40.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types40.default.shape({
    root: import_prop_types40.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types40.default.oneOfType([import_prop_types40.default.arrayOf(import_prop_types40.default.oneOfType([import_prop_types40.default.func, import_prop_types40.default.object, import_prop_types40.default.bool])), import_prop_types40.default.func, import_prop_types40.default.object]),
  /**
   * Provides a human-readable title for the element that contains it.
   * https://www.w3.org/TR/SVG-access/#Equivalent
   */
  titleAccess: import_prop_types40.default.string,
  /**
   * Allows you to redefine what the coordinates without units mean inside an SVG element.
   * For example, if the SVG element is 500 (width) by 200 (height),
   * and you pass viewBox="0 0 50 20",
   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
   * to bottom right (50,20) and each unit will be worth 10px.
   * @default '0 0 24 24'
   */
  viewBox: import_prop_types40.default.string
} : void 0;
var SvgIcon_default = SvgIcon;

// node_modules/@mui/joy/utils/createSvgIcon.js
var import_jsx_runtime62 = __toESM(require_jsx_runtime());
function createSvgIcon(path, displayName) {
  function Component(props, ref) {
    return (0, import_jsx_runtime62.jsx)(SvgIcon_default, _extends({
      "data-testid": `${displayName}Icon`,
      ref
    }, props, {
      children: path
    }));
  }
  if (true) {
    Component.displayName = `${displayName}Icon`;
  }
  Component.muiName = SvgIcon_default.muiName;
  return React108.memo(React108.forwardRef(Component));
}

// node_modules/@mui/joy/internal/svg-icons/KeyboardArrowDown.js
var import_jsx_runtime63 = __toESM(require_jsx_runtime());
var KeyboardArrowDown_default = createSvgIcon((0, import_jsx_runtime63.jsx)("path", {
  d: "M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"
}), "KeyboardArrowDown");

// node_modules/@mui/joy/AccordionSummary/AccordionSummary.js
var import_jsx_runtime64 = __toESM(require_jsx_runtime());
var import_jsx_runtime65 = __toESM(require_jsx_runtime());
var _KeyboardArrowDown;
var _excluded38 = ["component", "color", "children", "indicator", "variant", "slots", "slotProps"];
var useUtilityClasses30 = (ownerState) => {
  const {
    disabled,
    expanded
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", expanded && "expanded"],
    button: ["button", disabled && "disabled", expanded && "expanded"],
    indicator: ["indicator", disabled && "disabled", expanded && "expanded"]
  };
  return composeClasses2(slots, getAccordionSummaryUtilityClass, {});
};
var AccordionSummaryRoot = styled_default(StyledListItem, {
  name: "JoyAccordionSummary",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme
}) => ({
  fontWeight: theme.vars.fontWeight.md,
  gap: "calc(var(--ListItem-paddingX, 0.75rem) + 0.25rem)",
  [`&.${accordionSummaryClasses_default.expanded}`]: {
    "--Icon-color": "currentColor"
  }
}));
var AccordionSummaryButton = styled_default(StyledListItemButton, {
  name: "JoyAccordionSummary",
  slot: "Button",
  overridesResolver: (props, styles2) => styles2.button
})({
  gap: "inherit",
  fontWeight: "inherit",
  justifyContent: "space-between",
  font: "inherit",
  "&:focus-visible": {
    zIndex: 1
    // to make the focus ring appear above the next Accordion.
  },
  [`.${accordionSummaryClasses_default.root} &`]: {
    "--unstable_ListItem-flex": "1 0 0%"
    // grow to fill the available space of ListItem
  }
});
var AccordionSummaryIndicator = styled_default("span", {
  name: "JoyAccordionSummary",
  slot: "Indicator",
  overridesResolver: (props, styles2) => styles2.indicator
})({
  display: "inline-flex",
  [`&.${accordionSummaryClasses_default.expanded}`]: {
    transform: "rotate(180deg)"
  }
});
var AccordionSummary = React110.forwardRef(function AccordionSummary2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyAccordionSummary"
  });
  const {
    component = "div",
    color = "neutral",
    children,
    indicator = _KeyboardArrowDown || (_KeyboardArrowDown = (0, import_jsx_runtime64.jsx)(KeyboardArrowDown_default, {})),
    variant = "plain",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded38);
  const {
    accordionId,
    disabled = false,
    expanded = false,
    toggle
  } = React110.useContext(AccordionContext_default);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const ownerState = _extends({}, props, {
    component,
    color,
    disabled,
    expanded,
    variant
  });
  const handleClick = (event) => {
    if (toggle) {
      toggle(event);
    }
    if (typeof slotProps.button === "function") {
      var _slotProps$button, _slotProps$button$onC;
      (_slotProps$button = slotProps.button(ownerState)) == null || (_slotProps$button$onC = _slotProps$button.onClick) == null || _slotProps$button$onC.call(_slotProps$button, event);
    } else {
      var _slotProps$button2, _slotProps$button2$on;
      (_slotProps$button2 = slotProps.button) == null || (_slotProps$button2$on = _slotProps$button2.onClick) == null || _slotProps$button2$on.call(_slotProps$button2, event);
    }
  };
  const classes = useUtilityClasses30(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: AccordionSummaryRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotButton, buttonProps] = useSlot("button", {
    ref,
    className: classes.button,
    elementType: AccordionSummaryButton,
    externalForwardedProps,
    additionalProps: {
      component: "button",
      id: `${accordionId}-summary`,
      "aria-expanded": expanded ? "true" : "false",
      "aria-controls": `${accordionId}-details`,
      disabled,
      type: "button",
      onClick: handleClick
    },
    ownerState
  });
  const [SlotIndicator, indicatorProps] = useSlot("indicator", {
    ref,
    className: classes.indicator,
    elementType: AccordionSummaryIndicator,
    externalForwardedProps,
    ownerState
  });
  return (
    // Root and Button slots are required based on [WAI-ARIA Accordion](https://www.w3.org/WAI/ARIA/apg/patterns/accordion/examples/accordion/)
    (0, import_jsx_runtime64.jsx)(SlotRoot, _extends({}, rootProps, {
      children: (0, import_jsx_runtime65.jsxs)(SlotButton, _extends({}, buttonProps, {
        children: [children, indicator && (0, import_jsx_runtime64.jsx)(SlotIndicator, _extends({}, indicatorProps, {
          children: indicator
        }))]
      }))
    }))
  );
});
true ? AccordionSummary.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the AccordionSummary if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types41.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types41.default.oneOf(["danger", "neutral", "primary", "success", "warning"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types41.default.elementType,
  /**
   * The indicator element to display.
   * @default <KeyboardArrowDown />
   */
  indicator: import_prop_types41.default.node,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types41.default.shape({
    button: import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object]),
    indicator: import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object]),
    root: import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types41.default.shape({
    button: import_prop_types41.default.elementType,
    indicator: import_prop_types41.default.elementType,
    root: import_prop_types41.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types41.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var AccordionSummary_default = AccordionSummary;

// node_modules/@mui/joy/Alert/Alert.js
var React111 = __toESM(require_react());
var import_prop_types42 = __toESM(require_prop_types());

// node_modules/@mui/joy/colorInversion/colorInversionUtils.js
var createPrefixVar = (cssVarPrefix) => {
  return (cssVar) => `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}${cssVar.replace(/^--/, "")}`;
};
var INVERTED_COLORS_ATTR = "data-skip-inverted-colors";
var INVERTED_COLORS_SELECTOR = `& :not([${INVERTED_COLORS_ATTR}], [${INVERTED_COLORS_ATTR}] *)`;
var skipInvertedColors = (theme) => {
  var _theme$colorSchemes$l, _theme$colorSchemes$l2, _theme$colorSchemes$l3, _theme$colorSchemes$l4, _theme$colorSchemes$l5, _theme$colorSchemes$l6, _theme$colorSchemes$l7, _theme$colorSchemes$l8, _theme$colorSchemes$l9, _theme$colorSchemes$l10, _theme$colorSchemes$l11, _theme$colorSchemes$d, _theme$colorSchemes$d2, _theme$colorSchemes$d3, _theme$colorSchemes$d4, _theme$colorSchemes$d5, _theme$colorSchemes$d6, _theme$colorSchemes$d7, _theme$colorSchemes$d8, _theme$colorSchemes$d9, _theme$colorSchemes$d10, _theme$colorSchemes$d11;
  const prefixVar = createPrefixVar(theme.cssVarPrefix);
  return {
    "--variant-plainColor": "var(--variant-plainColor) !important",
    "--variant-plainHoverColor": "var(--variant-plainHoverColor) !important",
    "--variant-plainHoverBg": "var(--variant-plainHoverBg) !important",
    "--variant-plainActiveBg": "var(--variant-plainActiveBg) !important",
    "--variant-plainDisabledColor": "var(--variant-plainDisabledColor) !important",
    "--variant-outlinedColor": "var(--variant-outlinedColor) !important",
    "--variant-outlinedBorder": "var(--variant-outlinedBorder) !important",
    "--variant-outlinedHoverColor": "var(--variant-outlinedHoverColor) !important",
    "--variant-outlinedHoverBorder": "var(--variant-outlinedHoverBorder) !important",
    "--variant-outlinedHoverBg": "var(--variant-outlinedHoverBg) !important",
    "--variant-outlinedActiveBg": "var(--variant-outlinedActiveBg) !important",
    "--variant-outlinedDisabledColor": "var(--variant-outlinedDisabledColor) !important",
    "--variant-outlinedDisabledBorder": "var(--variant-outlinedDisabledBorder) !important",
    "--variant-softColor": "var(--variant-softColor) !important",
    "--variant-softHoverColor": "var(--variant-softHoverColor) !important",
    "--variant-softBg": "var(--variant-softBg) !important",
    "--variant-softHoverBg": "var(--variant-softHoverBg) !important",
    "--variant-softActiveBg": "var(--variant-softActiveBg) !important",
    "--variant-softActiveColor": "var(--variant-softActiveColor) !important",
    "--variant-softDisabledColor": "var(--variant-softDisabledColor) !important",
    "--variant-softDisabledBg": "var(--variant-softDisabledBg) !important",
    "--variant-solidColor": "var(--variant-solidColor) !important",
    "--variant-solidBg": "var(--variant-solidBg) !important",
    "--variant-solidHoverBg": "var(--variant-solidHoverBg) !important",
    "--variant-solidActiveBg": "var(--variant-solidActiveBg) !important",
    "--variant-solidDisabledColor": "var(--variant-solidDisabledColor) !important",
    "--variant-solidDisabledBg": "var(--variant-solidDisabledBg) !important",
    "--Badge-ringColor": "var(--Badge-ringColor) !important",
    colorScheme: "unset",
    [theme.getColorSchemeSelector("light")]: {
      [prefixVar("--palette-focusVisible")]: `${(_theme$colorSchemes$l = theme.colorSchemes.light) == null ? void 0 : _theme$colorSchemes$l.palette.focusVisible} !important`,
      [prefixVar("--palette-background-body")]: `${(_theme$colorSchemes$l2 = theme.colorSchemes.light) == null ? void 0 : _theme$colorSchemes$l2.palette.background.body} !important`,
      [prefixVar("--palette-background-surface")]: `${(_theme$colorSchemes$l3 = theme.colorSchemes.light) == null ? void 0 : _theme$colorSchemes$l3.palette.background.surface} !important`,
      [prefixVar("--palette-background-popup")]: `${(_theme$colorSchemes$l4 = theme.colorSchemes.light) == null ? void 0 : _theme$colorSchemes$l4.palette.background.popup} !important`,
      [prefixVar("--palette-background-level1")]: `${(_theme$colorSchemes$l5 = theme.colorSchemes.light) == null ? void 0 : _theme$colorSchemes$l5.palette.background.level1} !important`,
      [prefixVar("--palette-background-level2")]: `${(_theme$colorSchemes$l6 = theme.colorSchemes.light) == null ? void 0 : _theme$colorSchemes$l6.palette.background.level2} !important`,
      [prefixVar("--palette-background-level3")]: `${(_theme$colorSchemes$l7 = theme.colorSchemes.light) == null ? void 0 : _theme$colorSchemes$l7.palette.background.level3} !important`,
      [prefixVar("--palette-text-primary")]: `${(_theme$colorSchemes$l8 = theme.colorSchemes.light) == null ? void 0 : _theme$colorSchemes$l8.palette.text.primary} !important`,
      [prefixVar("--palette-text-secondary")]: `${(_theme$colorSchemes$l9 = theme.colorSchemes.light) == null ? void 0 : _theme$colorSchemes$l9.palette.text.secondary} !important`,
      [prefixVar("--palette-text-tertiary")]: `${(_theme$colorSchemes$l10 = theme.colorSchemes.light) == null ? void 0 : _theme$colorSchemes$l10.palette.text.tertiary} !important`,
      [prefixVar("--palette-divider")]: `${(_theme$colorSchemes$l11 = theme.colorSchemes.light) == null ? void 0 : _theme$colorSchemes$l11.palette.divider} !important`
    },
    [theme.getColorSchemeSelector("dark")]: {
      [prefixVar("--palette-focusVisible")]: `${(_theme$colorSchemes$d = theme.colorSchemes.dark) == null ? void 0 : _theme$colorSchemes$d.palette.focusVisible} !important`,
      [prefixVar("--palette-background-body")]: `${(_theme$colorSchemes$d2 = theme.colorSchemes.dark) == null ? void 0 : _theme$colorSchemes$d2.palette.background.body} !important`,
      [prefixVar("--palette-background-surface")]: `${(_theme$colorSchemes$d3 = theme.colorSchemes.dark) == null ? void 0 : _theme$colorSchemes$d3.palette.background.surface} !important`,
      [prefixVar("--palette-background-popup")]: `${(_theme$colorSchemes$d4 = theme.colorSchemes.dark) == null ? void 0 : _theme$colorSchemes$d4.palette.background.popup} !important`,
      [prefixVar("--palette-background-level1")]: `${(_theme$colorSchemes$d5 = theme.colorSchemes.dark) == null ? void 0 : _theme$colorSchemes$d5.palette.background.level1} !important`,
      [prefixVar("--palette-background-level2")]: `${(_theme$colorSchemes$d6 = theme.colorSchemes.dark) == null ? void 0 : _theme$colorSchemes$d6.palette.background.level2} !important`,
      [prefixVar("--palette-background-level3")]: `${(_theme$colorSchemes$d7 = theme.colorSchemes.dark) == null ? void 0 : _theme$colorSchemes$d7.palette.background.level3} !important`,
      [prefixVar("--palette-text-primary")]: `${(_theme$colorSchemes$d8 = theme.colorSchemes.dark) == null ? void 0 : _theme$colorSchemes$d8.palette.text.primary} !important`,
      [prefixVar("--palette-text-secondary")]: `${(_theme$colorSchemes$d9 = theme.colorSchemes.dark) == null ? void 0 : _theme$colorSchemes$d9.palette.text.secondary} !important`,
      [prefixVar("--palette-text-tertiary")]: `${(_theme$colorSchemes$d10 = theme.colorSchemes.dark) == null ? void 0 : _theme$colorSchemes$d10.palette.text.tertiary} !important`,
      [prefixVar("--palette-divider")]: `${(_theme$colorSchemes$d11 = theme.colorSchemes.dark) == null ? void 0 : _theme$colorSchemes$d11.palette.divider} !important`
    }
  };
};
function isStyledThemeProp(props) {
  return props.theme !== void 0;
}
var applySolidInversion = (color) => (themeProp) => {
  const theme = isStyledThemeProp(themeProp) ? themeProp.theme : themeProp;
  const getCssVarDefault = createGetCssVar(theme.cssVarPrefix);
  const prefixVar = createPrefixVar(theme.cssVarPrefix);
  const getCssVar = (cssVar) => {
    const tokens = cssVar.split("-");
    return getCssVarDefault(cssVar, theme.palette[tokens[1]][tokens[2]]);
  };
  return {
    [INVERTED_COLORS_SELECTOR]: {
      "--Badge-ringColor": getCssVar(`palette-${color}-solidBg`),
      "--Icon-color": "currentColor",
      [`${theme.getColorSchemeSelector("light")}, ${theme.getColorSchemeSelector("dark")}`]: {
        colorScheme: "dark",
        [prefixVar("--palette-focusVisible")]: getCssVar(`palette-${color}-200`),
        [prefixVar("--palette-background-body")]: "rgba(0 0 0 / 0.1)",
        [prefixVar("--palette-background-surface")]: "rgba(0 0 0 / 0.06)",
        [prefixVar("--palette-background-popup")]: getCssVar(`palette-${color}-700`),
        [prefixVar("--palette-background-level1")]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.2)`,
        [prefixVar("--palette-background-level2")]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.36)`,
        [prefixVar("--palette-background-level3")]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.6)`,
        [prefixVar("--palette-text-primary")]: getCssVar(`palette-common-white`),
        [prefixVar("--palette-text-secondary")]: getCssVar(`palette-${color}-200`),
        [prefixVar("--palette-text-tertiary")]: getCssVar(`palette-${color}-300`),
        [prefixVar("--palette-text-icon")]: getCssVar(`palette-${color}-200`),
        [prefixVar("--palette-divider")]: `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.32)`,
        "--variant-plainColor": getCssVar(`palette-${color}-50`),
        "--variant-plainHoverColor": `#fff`,
        "--variant-plainHoverBg": `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.12)`,
        "--variant-plainActiveBg": `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.32)`,
        "--variant-plainDisabledColor": `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.72)`,
        "--variant-outlinedColor": getCssVar(`palette-${color}-50`),
        "--variant-outlinedBorder": `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.5)`,
        "--variant-outlinedHoverColor": `#fff`,
        "--variant-outlinedHoverBorder": getCssVar(`palette-${color}-300`),
        "--variant-outlinedHoverBg": `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.12)`,
        "--variant-outlinedActiveBg": `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.32)`,
        "--variant-outlinedDisabledColor": `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.72)`,
        "--variant-outlinedDisabledBorder": `rgba(255 255 255 / 0.2)`,
        "--variant-softColor": getCssVar(`palette-common-white`),
        "--variant-softHoverColor": getCssVar(`palette-common-white`),
        "--variant-softBg": `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.24)`,
        "--variant-softHoverBg": `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.36)`,
        "--variant-softActiveBg": `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.16)`,
        "--variant-softActiveColor": `#fff`,
        "--variant-softDisabledColor": `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.72)`,
        "--variant-softDisabledBg": `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.1)`,
        "--variant-solidColor": getCssVar(`palette-${color}-${color === "neutral" ? "600" : "500"}`),
        "--variant-solidBg": getCssVar(`palette-common-white`),
        "--variant-solidHoverBg": getCssVar(`palette-common-white`),
        "--variant-solidActiveBg": getCssVar(`palette-${color}-100`),
        "--variant-solidDisabledColor": `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.72)`,
        "--variant-solidDisabledBg": `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.1)`
      }
    },
    [`&, & [${INVERTED_COLORS_ATTR}]`]: skipInvertedColors(theme)
  };
};
var applySoftInversion = (color) => (themeProp) => {
  const {
    theme = themeProp
  } = themeProp;
  const getCssVarDefault = createGetCssVar(theme.cssVarPrefix);
  const prefixVar = createPrefixVar(theme.cssVarPrefix);
  const getCssVar = (cssVar) => {
    const tokens = cssVar.split("-");
    return getCssVarDefault(cssVar, theme.palette[tokens[1]][tokens[2]]);
  };
  return {
    [INVERTED_COLORS_SELECTOR]: {
      "--Badge-ringColor": getCssVar(`palette-${color}-softBg`),
      "--Icon-color": "currentColor",
      [theme.getColorSchemeSelector("dark")]: {
        [prefixVar("--palette-focusVisible")]: getCssVar(`palette-${color}-300`),
        [prefixVar("--palette-background-body")]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.1)`,
        [prefixVar("--palette-background-surface")]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.08)`,
        [prefixVar("--palette-background-level1")]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.2)`,
        [prefixVar("--palette-background-level2")]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.4)`,
        [prefixVar("--palette-background-level3")]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.6)`,
        [prefixVar("--palette-text-primary")]: getCssVar(`palette-${color}-100`),
        [prefixVar("--palette-text-secondary")]: `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.72)`,
        [prefixVar("--palette-text-tertiary")]: `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.6)`,
        [prefixVar("--palette-text-icon")]: `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.6)`,
        [prefixVar("--palette-divider")]: `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.2)`,
        "--variant-plainColor": `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 1)`,
        "--variant-plainHoverColor": getCssVar(`palette-${color}-50`),
        "--variant-plainHoverBg": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.16)`,
        "--variant-plainActiveBg": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,
        "--variant-plainDisabledColor": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,
        "--variant-outlinedColor": `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 1)`,
        "--variant-outlinedHoverColor": getCssVar(`palette-${color}-50`),
        "--variant-outlinedBg": "initial",
        "--variant-outlinedBorder": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.4)`,
        "--variant-outlinedHoverBorder": getCssVar(`palette-${color}-600`),
        "--variant-outlinedHoverBg": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.16)`,
        "--variant-outlinedActiveBg": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,
        "--variant-outlinedDisabledColor": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,
        "--variant-outlinedDisabledBorder": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.2)`,
        "--variant-softColor": getCssVar(`palette-${color}-200`),
        "--variant-softBg": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.24)`,
        "--variant-softHoverColor": "#fff",
        "--variant-softHoverBg": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,
        "--variant-softActiveBg": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.48)`,
        "--variant-softDisabledColor": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,
        "--variant-softDisabledBg": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`,
        "--variant-solidColor": "#fff",
        "--variant-solidBg": getCssVar(`palette-${color}-500`),
        "--variant-solidHoverColor": "#fff",
        "--variant-solidHoverBg": getCssVar(`palette-${color}-600`),
        "--variant-solidActiveBg": getCssVar(`palette-${color}-600`),
        "--variant-solidDisabledColor": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,
        "--variant-solidDisabledBg": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`
      },
      // `light` (default color scheme) should come last in case that `theme.getColorSchemeSelector()` return the same value
      [theme.getColorSchemeSelector("light")]: {
        [prefixVar("--palette-focusVisible")]: getCssVar(`palette-${color}-500`),
        [prefixVar("--palette-background-body")]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.1)`,
        [prefixVar("--palette-background-surface")]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.08)`,
        [prefixVar("--palette-background-level1")]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.2)`,
        [prefixVar("--palette-background-level2")]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,
        [prefixVar("--palette-background-level3")]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.48)`,
        [prefixVar("--palette-text-primary")]: getCssVar(`palette-${color}-700`),
        [prefixVar("--palette-text-secondary")]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.8)`,
        [prefixVar("--palette-text-tertiary")]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.68)`,
        [prefixVar("--palette-text-icon")]: getCssVar(`palette-${color}-500`),
        [prefixVar("--palette-divider")]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,
        "--variant-plainColor": `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.8)`,
        "--variant-plainHoverColor": `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 1)`,
        "--variant-plainHoverBg": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`,
        "--variant-plainActiveBg": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.24)`,
        "--variant-plainDisabledColor": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.6)`,
        "--variant-outlinedColor": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 1)`,
        "--variant-outlinedBorder": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.4)`,
        "--variant-outlinedHoverColor": getCssVar(`palette-${color}-600`),
        "--variant-outlinedHoverBorder": getCssVar(`palette-${color}-300`),
        "--variant-outlinedHoverBg": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`,
        "--variant-outlinedActiveBg": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.24)`,
        "--variant-outlinedDisabledColor": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.6)`,
        "--variant-outlinedDisabledBorder": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`,
        "--variant-softColor": getCssVar(`palette-${color}-600`),
        "--variant-softBg": `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.8)`,
        "--variant-softHoverColor": getCssVar(`palette-${color}-700`),
        "--variant-softHoverBg": getCssVar(`palette-${color}-200`),
        "--variant-softActiveBg": getCssVar(`palette-${color}-300`),
        "--variant-softDisabledColor": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.6)`,
        "--variant-softDisabledBg": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.08)`,
        "--variant-solidColor": getCssVar("palette-common-white"),
        "--variant-solidBg": getCssVar(`palette-${color}-${color === "neutral" ? "700" : "500"}`),
        "--variant-solidHoverColor": getCssVar("palette-common-white"),
        "--variant-solidHoverBg": getCssVar(`palette-${color}-${color === "neutral" ? "600" : "600"}`),
        "--variant-solidActiveBg": getCssVar(`palette-${color}-${color === "neutral" ? "600" : "600"}`),
        "--variant-solidDisabledColor": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.6)`,
        "--variant-solidDisabledBg": `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.08)`
      }
    },
    [`&, & [${INVERTED_COLORS_ATTR}]`]: skipInvertedColors(theme)
  };
};

// node_modules/@mui/joy/Alert/alertClasses.js
function getAlertUtilityClass(slot) {
  return generateUtilityClass2("MuiAlert", slot);
}
var alertClasses = generateUtilityClasses2("MuiAlert", ["root", "startDecorator", "endDecorator", "colorPrimary", "colorDanger", "colorNeutral", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var alertClasses_default = alertClasses;

// node_modules/@mui/joy/Alert/Alert.js
var import_jsx_runtime66 = __toESM(require_jsx_runtime());
var import_jsx_runtime67 = __toESM(require_jsx_runtime());
var _excluded39 = ["children", "className", "color", "invertedColors", "role", "variant", "size", "startDecorator", "endDecorator", "component", "slots", "slotProps"];
var useUtilityClasses31 = (ownerState) => {
  const {
    variant,
    color,
    size: size3
  } = ownerState;
  const slots = {
    root: ["root", size3 && `size${capitalize(size3)}`, color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses2(slots, getAlertUtilityClass, {});
};
var AlertRoot = styled_default("div", {
  name: "JoyAlert",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const {
    p,
    padding,
    borderRadius
  } = resolveSxValue({
    theme,
    ownerState
  }, ["p", "padding", "borderRadius"]);
  return [_extends({
    "--Alert-radius": theme.vars.radius.sm,
    "--Alert-decoratorChildRadius": "max((var(--Alert-radius) - var(--variant-borderWidth, 0px)) - var(--Alert-padding), min(var(--Alert-padding) + var(--variant-borderWidth, 0px), var(--Alert-radius) / 2))",
    "--Button-minHeight": "var(--Alert-decoratorChildHeight)",
    "--IconButton-size": "var(--Alert-decoratorChildHeight)",
    "--Button-radius": "var(--Alert-decoratorChildRadius)",
    "--IconButton-radius": "var(--Alert-decoratorChildRadius)",
    "--Icon-color": "currentColor"
  }, ownerState.size === "sm" && {
    "--Alert-padding": "0.5rem",
    "--Alert-decoratorChildHeight": "1.5rem",
    "--Icon-fontSize": theme.vars.fontSize.xl,
    gap: "0.5rem"
  }, ownerState.size === "md" && {
    "--Alert-padding": "0.75rem",
    "--Alert-decoratorChildHeight": "2rem",
    "--Icon-fontSize": theme.vars.fontSize.xl,
    gap: "0.625rem"
  }, ownerState.size === "lg" && {
    "--Alert-padding": "1rem",
    "--Alert-decoratorChildHeight": "2.375rem",
    "--Icon-fontSize": theme.vars.fontSize.xl2,
    gap: "0.875rem"
  }, {
    backgroundColor: theme.vars.palette.background.surface,
    display: "flex",
    position: "relative",
    alignItems: "center",
    padding: `var(--Alert-padding)`,
    borderRadius: "var(--Alert-radius)"
  }, theme.typography[`body-${{
    sm: "xs",
    md: "sm",
    lg: "md"
  }[ownerState.size]}`], {
    fontWeight: theme.vars.fontWeight.md
  }, ownerState.variant === "solid" && ownerState.color && ownerState.invertedColors && applySolidInversion(ownerState.color)(theme), ownerState.variant === "soft" && ownerState.color && ownerState.invertedColors && applySoftInversion(ownerState.color)(theme), (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]), p !== void 0 && {
    "--Alert-padding": p
  }, padding !== void 0 && {
    "--Alert-padding": padding
  }, borderRadius !== void 0 && {
    "--Alert-radius": borderRadius
  }];
});
var AlertStartDecorator = styled_default("span", {
  name: "JoyAlert",
  slot: "StartDecorator",
  overridesResolver: (props, styles2) => styles2.startDecorator
})({
  display: "inherit",
  flex: "none"
});
var AlertEndDecorator = styled_default("span", {
  name: "JoyAlert",
  slot: "EndDecorator",
  overridesResolver: (props, styles2) => styles2.endDecorator
})({
  display: "inherit",
  flex: "none",
  marginLeft: "auto"
});
var Alert = React111.forwardRef(function Alert2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyAlert"
  });
  const {
    children,
    className,
    color = "neutral",
    invertedColors = false,
    role = "alert",
    variant = "soft",
    size: size3 = "md",
    startDecorator,
    endDecorator,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded39);
  const ownerState = _extends({}, props, {
    color,
    invertedColors,
    variant,
    size: size3
  });
  const classes = useUtilityClasses31(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: AlertRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      role
    }
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: AlertStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: AlertEndDecorator,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime67.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [startDecorator && (0, import_jsx_runtime66.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
      children: startDecorator
    })), children, endDecorator && (0, import_jsx_runtime66.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
      children: endDecorator
    }))]
  }));
});
true ? Alert.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types42.default.node,
  /**
   * @ignore
   */
  className: import_prop_types42.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types42.default.oneOfType([import_prop_types42.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types42.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types42.default.elementType,
  /**
   * Element placed after the children.
   */
  endDecorator: import_prop_types42.default.node,
  /**
   * If `true`, the children with an implicit color prop invert their colors to match the component's variant and color.
   * @default false
   */
  invertedColors: import_prop_types42.default.bool,
  /**
   * The ARIA role attribute of the element.
   * @default 'alert'
   */
  role: import_prop_types42.default.string,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types42.default.oneOfType([import_prop_types42.default.oneOf(["sm", "md", "lg"]), import_prop_types42.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types42.default.shape({
    endDecorator: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object]),
    root: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object]),
    startDecorator: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types42.default.shape({
    endDecorator: import_prop_types42.default.elementType,
    root: import_prop_types42.default.elementType,
    startDecorator: import_prop_types42.default.elementType
  }),
  /**
   * Element placed before the children.
   */
  startDecorator: import_prop_types42.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types42.default.oneOfType([import_prop_types42.default.arrayOf(import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object, import_prop_types42.default.bool])), import_prop_types42.default.func, import_prop_types42.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'soft'
   */
  variant: import_prop_types42.default.oneOfType([import_prop_types42.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types42.default.string])
} : void 0;
var Alert_default = Alert;

// node_modules/@mui/joy/AspectRatio/AspectRatio.js
var React112 = __toESM(require_react());
var import_prop_types43 = __toESM(require_prop_types());

// node_modules/@mui/joy/AspectRatio/aspectRatioClasses.js
function getAspectRatioUtilityClass(slot) {
  return generateUtilityClass2("MuiAspectRatio", slot);
}
var aspectRatioClasses = generateUtilityClasses2("MuiAspectRatio", ["root", "content", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var aspectRatioClasses_default = aspectRatioClasses;

// node_modules/@mui/joy/AspectRatio/AspectRatio.js
var import_jsx_runtime68 = __toESM(require_jsx_runtime());
var _excluded40 = ["children", "ratio", "minHeight", "maxHeight", "objectFit", "color", "variant", "component", "flex", "slots", "slotProps"];
var useUtilityClasses32 = (ownerState) => {
  const {
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root"],
    content: ["content", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses2(slots, getAspectRatioUtilityClass, {});
};
var AspectRatioRoot = styled_default("div", {
  name: "JoyAspectRatio",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  ownerState,
  theme
}) => {
  const minHeight = typeof ownerState.minHeight === "number" ? `${ownerState.minHeight}px` : ownerState.minHeight;
  const maxHeight = typeof ownerState.maxHeight === "number" ? `${ownerState.maxHeight}px` : ownerState.maxHeight;
  return {
    // a context variable for any child component
    "--AspectRatio-paddingBottom": `clamp(var(--AspectRatio-minHeight), calc(100% / (${ownerState.ratio})), var(--AspectRatio-maxHeight))`,
    "--AspectRatio-maxHeight": maxHeight || "9999px",
    "--AspectRatio-minHeight": minHeight || "0px",
    "--Icon-color": ownerState.color !== "neutral" || ownerState.variant === "solid" ? "currentColor" : theme.vars.palette.text.icon,
    borderRadius: "var(--AspectRatio-radius)",
    display: ownerState.flex ? "flex" : "block",
    flex: ownerState.flex ? 1 : "initial",
    flexDirection: "column",
    margin: "var(--AspectRatio-margin)"
  };
});
var AspectRatioContent = styled_default("div", {
  name: "JoyAspectRatio",
  slot: "Content",
  overridesResolver: (props, styles2) => styles2.content
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return _extends({
    flex: 1,
    position: "relative",
    borderRadius: "inherit",
    height: 0,
    paddingBottom: "calc(var(--AspectRatio-paddingBottom) - 2 * var(--variant-borderWidth, 0px))",
    overflow: "hidden",
    transition: "inherit",
    // makes it easy to add transition to the content
    // use data-attribute instead of :first-child to support zero config SSR (emotion)
    // use nested selector for integrating with nextjs image `fill` layout (spans are inserted on top of the img)
    "& [data-first-child]": {
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      boxSizing: "border-box",
      position: "absolute",
      width: "100%",
      height: "100%",
      objectFit: ownerState.objectFit,
      margin: 0,
      padding: 0,
      "& > img": {
        // support art-direction that uses <picture><img /></picture>
        width: "100%",
        height: "100%",
        objectFit: ownerState.objectFit
      }
    }
  }, theme.typography["body-md"], (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
var AspectRatio = React112.forwardRef(function AspectRatio2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyAspectRatio"
  });
  const {
    children,
    ratio = "16 / 9",
    minHeight,
    maxHeight,
    objectFit = "cover",
    color = "neutral",
    variant = "soft",
    component,
    flex = false,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded40);
  const ownerState = _extends({}, props, {
    flex,
    minHeight,
    maxHeight,
    objectFit,
    ratio,
    color,
    variant
  });
  const classes = useUtilityClasses32(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: AspectRatioRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotContent, contentProps] = useSlot("content", {
    className: classes.content,
    elementType: AspectRatioContent,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime68.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime68.jsx)(SlotContent, _extends({}, contentProps, {
      children: React112.Children.map(children, (child, index2) => index2 === 0 && React112.isValidElement(child) ? React112.cloneElement(child, {
        "data-first-child": ""
      }) : child)
    }))
  }));
});
true ? AspectRatio.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the AspectRatio if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types43.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types43.default.oneOf(["danger", "neutral", "primary", "success", "warning"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types43.default.elementType,
  /**
   * By default, the AspectRatio will maintain the aspect ratio of its content.
   * Set this prop to `true` when the container is a flex row and you want the AspectRatio to fill the height of its container.
   * @default false
   */
  flex: import_prop_types43.default.bool,
  /**
   * The maximum calculated height of the element (not the CSS height).
   */
  maxHeight: import_prop_types43.default.oneOfType([import_prop_types43.default.number, import_prop_types43.default.string]),
  /**
   * The minimum calculated height of the element (not the CSS height).
   */
  minHeight: import_prop_types43.default.oneOfType([import_prop_types43.default.number, import_prop_types43.default.string]),
  /**
   * The CSS object-fit value of the first-child.
   * @default 'cover'
   */
  objectFit: import_prop_types43.default.oneOf(["-moz-initial", "contain", "cover", "fill", "inherit", "initial", "none", "revert-layer", "revert", "scale-down", "unset"]),
  /**
   * The aspect-ratio of the element. The current implementation uses padding instead of the CSS aspect-ratio due to browser support.
   * https://caniuse.com/?search=aspect-ratio
   * @default '16 / 9'
   */
  ratio: import_prop_types43.default.oneOfType([import_prop_types43.default.number, import_prop_types43.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types43.default.shape({
    content: import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object]),
    root: import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types43.default.shape({
    content: import_prop_types43.default.elementType,
    root: import_prop_types43.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types43.default.oneOfType([import_prop_types43.default.arrayOf(import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object, import_prop_types43.default.bool])), import_prop_types43.default.func, import_prop_types43.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'soft'
   */
  variant: import_prop_types43.default.oneOfType([import_prop_types43.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types43.default.string])
} : void 0;
var AspectRatio_default = AspectRatio;

// node_modules/@mui/joy/Autocomplete/Autocomplete.js
var React130 = __toESM(require_react());
var import_prop_types52 = __toESM(require_prop_types());

// node_modules/@mui/joy/internal/svg-icons/Close.js
var React113 = __toESM(require_react());
var import_jsx_runtime69 = __toESM(require_jsx_runtime());
var Close_default = createSvgIcon((0, import_jsx_runtime69.jsx)("path", {
  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Close");

// node_modules/@mui/joy/internal/svg-icons/ArrowDropDown.js
var React114 = __toESM(require_react());
var import_jsx_runtime70 = __toESM(require_jsx_runtime());
var ArrowDropDown_default = createSvgIcon((0, import_jsx_runtime70.jsx)("path", {
  d: "M7 10l5 5 5-5z"
}), "ArrowDropDown");

// node_modules/@mui/joy/styles/variantColorInheritance.js
var React115 = __toESM(require_react());
var import_jsx_runtime71 = __toESM(require_jsx_runtime());
var VariantColorContext = React115.createContext(void 0);
if (true) {
  VariantColorContext.displayName = "VariantColorContext";
}
function getChildVariantAndColor(parentVariant, parentColor) {
  let childColor = parentColor;
  let childVariant = parentVariant;
  if (parentVariant === "outlined") {
    childColor = "neutral";
    childVariant = "plain";
  }
  if (parentVariant === "plain") {
    childColor = "neutral";
  }
  return {
    variant: childVariant,
    color: childColor
  };
}
function useVariantColor(instanceVariant, instanceColor, alwaysInheritColor = false) {
  const value = React115.useContext(VariantColorContext);
  const [variant, color] = typeof value === "string" ? value.split(":") : [];
  const result = getChildVariantAndColor(variant || void 0, color || void 0);
  result.variant = instanceVariant || result.variant;
  result.color = instanceColor || (alwaysInheritColor ? color : result.color);
  return result;
}
function VariantColorProvider({
  children,
  color,
  variant
}) {
  return (0, import_jsx_runtime71.jsx)(VariantColorContext.Provider, {
    value: `${variant || ""}:${color || ""}`,
    children
  });
}

// node_modules/@mui/joy/IconButton/IconButton.js
var React119 = __toESM(require_react());
var import_prop_types45 = __toESM(require_prop_types());

// node_modules/@mui/joy/IconButton/iconButtonClasses.js
function getIconButtonUtilityClass(slot) {
  return generateUtilityClass2("MuiIconButton", slot);
}
var iconButtonClasses = generateUtilityClasses2("MuiIconButton", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "focusVisible", "disabled", "sizeSm", "sizeMd", "sizeLg", "loading", "loadingIndicator"]);
var iconButtonClasses_default = iconButtonClasses;

// node_modules/@mui/joy/ButtonGroup/ButtonGroupContext.js
var React116 = __toESM(require_react());
var ButtonGroupContext = React116.createContext({});
if (true) {
  ButtonGroupContext.displayName = "ButtonGroupContext";
}
var ButtonGroupContext_default = ButtonGroupContext;

// node_modules/@mui/joy/ToggleButtonGroup/ToggleButtonGroupContext.js
var React117 = __toESM(require_react());
var ToggleButtonGroupContext = React117.createContext(void 0);
if (true) {
  ToggleButtonGroupContext.displayName = "ToggleButtonGroupContext";
}
var ToggleButtonGroupContext_default = ToggleButtonGroupContext;

// node_modules/@mui/joy/CircularProgress/CircularProgress.js
var import_prop_types44 = __toESM(require_prop_types());
var React118 = __toESM(require_react());

// node_modules/@mui/joy/CircularProgress/circularProgressClasses.js
function getCircularProgressUtilityClass(slot) {
  return generateUtilityClass2("MuiCircularProgress", slot);
}
var circularProgressClasses = generateUtilityClasses2("MuiCircularProgress", ["root", "determinate", "svg", "track", "progress", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var circularProgressClasses_default = circularProgressClasses;

// node_modules/@mui/joy/CircularProgress/CircularProgress.js
var import_jsx_runtime72 = __toESM(require_jsx_runtime());
var import_jsx_runtime73 = __toESM(require_jsx_runtime());
var _ = (t) => t;
var _t;
var _excluded41 = ["color", "backgroundColor"];
var _excluded211 = ["children", "className", "color", "size", "variant", "thickness", "determinate", "value", "component", "slots", "slotProps"];
var circulate = keyframes({
  "0%": {
    // let the progress start at the top of the ring
    transform: "rotate(-90deg)"
  },
  "100%": {
    transform: "rotate(270deg)"
  }
});
var useUtilityClasses33 = (ownerState) => {
  const {
    determinate,
    color,
    variant,
    size: size3
  } = ownerState;
  const slots = {
    root: ["root", determinate && "determinate", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`, size3 && `size${capitalize(size3)}`],
    svg: ["svg"],
    track: ["track"],
    progress: ["progress"]
  };
  return composeClasses2(slots, getCircularProgressUtilityClass, {});
};
function getThickness(slot, defaultValue) {
  return `var(--CircularProgress-${slot}Thickness, var(--CircularProgress-thickness, ${defaultValue}))`;
}
var CircularProgressRoot = styled_default("span", {
  name: "JoyCircularProgress",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants, _theme$variants$solid, _theme$variants$softH, _theme$variants$solid2;
  const _ref = ((_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]) || {}, {
    color,
    backgroundColor
  } = _ref, rest = _objectWithoutPropertiesLoose(_ref, _excluded41);
  return _extends({
    // integration with icon
    "--Icon-fontSize": "calc(0.4 * var(--_root-size))",
    // public variables
    "--CircularProgress-trackColor": backgroundColor,
    "--CircularProgress-progressColor": color,
    "--CircularProgress-percent": ownerState.value,
    // 0 - 100
    "--CircularProgress-linecap": "round"
  }, ownerState.size === "sm" && {
    "--_root-size": "var(--CircularProgress-size, 24px)",
    // use --_root-size to let other components overrides via --CircularProgress-size
    "--_track-thickness": getThickness("track", "3px"),
    "--_progress-thickness": getThickness("progress", "3px")
  }, ownerState.instanceSize === "sm" && {
    "--CircularProgress-size": "24px"
  }, ownerState.size === "md" && {
    "--_track-thickness": getThickness("track", "6px"),
    "--_progress-thickness": getThickness("progress", "6px"),
    "--_root-size": "var(--CircularProgress-size, 40px)"
  }, ownerState.instanceSize === "md" && {
    "--CircularProgress-size": "40px"
  }, ownerState.size === "lg" && {
    "--_track-thickness": getThickness("track", "8px"),
    "--_progress-thickness": getThickness("progress", "8px"),
    "--_root-size": "var(--CircularProgress-size, 64px)"
  }, ownerState.instanceSize === "lg" && {
    "--CircularProgress-size": "64px"
  }, ownerState.thickness && {
    "--_track-thickness": `${ownerState.thickness}px`,
    "--_progress-thickness": `${ownerState.thickness}px`
  }, {
    // internal variables
    "--_thickness-diff": "calc(var(--_track-thickness) - var(--_progress-thickness))",
    "--_inner-size": "calc(var(--_root-size) - 2 * var(--variant-borderWidth, 0px))",
    "--_outlined-inset": "max(var(--_track-thickness), var(--_progress-thickness))",
    width: "var(--_root-size)",
    height: "var(--_root-size)",
    borderRadius: "var(--_root-size)",
    margin: "var(--CircularProgress-margin)",
    boxSizing: "border-box",
    display: "inline-flex",
    justifyContent: "center",
    alignItems: "center",
    flexShrink: 0,
    // prevent from shrinking when CircularProgress is in a flex container.
    position: "relative",
    color
  }, ownerState.children && {
    // only add font related properties when there is a child.
    // so that when there is no child, the size can be controlled by the parent font-size e.g. Link
    fontFamily: theme.vars.fontFamily.body,
    fontWeight: theme.vars.fontWeight.md,
    fontSize: "calc(0.2 * var(--_root-size))"
  }, rest, ownerState.variant === "outlined" && {
    "&::before": _extends({
      content: '""',
      display: "block",
      position: "absolute",
      borderRadius: "inherit",
      top: "var(--_outlined-inset)",
      left: "var(--_outlined-inset)",
      right: "var(--_outlined-inset)",
      bottom: "var(--_outlined-inset)"
    }, rest)
  }, ownerState.variant === "soft" && {
    "--CircularProgress-trackColor": theme.variants.soft.neutral.backgroundColor,
    "--CircularProgress-progressColor": (_theme$variants$solid = theme.variants.solid) == null ? void 0 : _theme$variants$solid[ownerState.color].backgroundColor
  }, ownerState.variant === "solid" && {
    "--CircularProgress-trackColor": (_theme$variants$softH = theme.variants.softHover) == null ? void 0 : _theme$variants$softH[ownerState.color].backgroundColor,
    "--CircularProgress-progressColor": (_theme$variants$solid2 = theme.variants.solid) == null ? void 0 : _theme$variants$solid2[ownerState.color].backgroundColor
  });
});
var CircularProgressSvg = styled_default("svg", {
  name: "JoyCircularProgress",
  slot: "Svg",
  overridesResolver: (props, styles2) => styles2.svg
})({
  width: "inherit",
  height: "inherit",
  display: "inherit",
  boxSizing: "inherit",
  position: "absolute",
  top: "calc(-1 * var(--variant-borderWidth, 0px))",
  // centered align
  left: "calc(-1 * var(--variant-borderWidth, 0px))"
  // centered align
});
var CircularProgressTrack = styled_default("circle", {
  name: "JoyCircularProgress",
  slot: "track",
  overridesResolver: (props, styles2) => styles2.track
})({
  cx: "50%",
  cy: "50%",
  r: "calc(var(--_inner-size) / 2 - var(--_track-thickness) / 2 + min(0px, var(--_thickness-diff) / 2))",
  fill: "transparent",
  strokeWidth: "var(--_track-thickness)",
  stroke: "var(--CircularProgress-trackColor)"
});
var CircularProgressProgress = styled_default("circle", {
  name: "JoyCircularProgress",
  slot: "progress",
  overridesResolver: (props, styles2) => styles2.progress
})({
  "--_progress-radius": "calc(var(--_inner-size) / 2 - var(--_progress-thickness) / 2 - max(0px, var(--_thickness-diff) / 2))",
  "--_progress-length": "calc(2 * 3.1415926535 * var(--_progress-radius))",
  // the circumference around the progress
  cx: "50%",
  cy: "50%",
  r: "var(--_progress-radius)",
  fill: "transparent",
  strokeWidth: "var(--_progress-thickness)",
  stroke: "var(--CircularProgress-progressColor)",
  strokeLinecap: "var(--CircularProgress-linecap, round)",
  // can't use CSS variable directly, need to cast type.
  strokeDasharray: "var(--_progress-length)",
  strokeDashoffset: "calc(var(--_progress-length) - var(--CircularProgress-percent) * var(--_progress-length) / 100)",
  transformOrigin: "center",
  transform: "rotate(-90deg)"
  // to initially appear at the top-center of the circle.
}, ({
  ownerState
}) => !ownerState.determinate && css(_t || (_t = _`
      animation: var(--CircularProgress-circulation, 0.8s linear 0s infinite normal none running)
        ${0};
    `), circulate));
var CircularProgress = React118.forwardRef(function CircularProgress2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyCircularProgress"
  });
  const {
    children,
    className,
    color = "primary",
    size: size3 = "md",
    variant = "soft",
    thickness,
    determinate = false,
    value = determinate ? 0 : 25,
    // `25` is the 1/4 of the circle.
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded211);
  const ownerState = _extends({}, props, {
    color,
    size: size3,
    variant,
    thickness,
    value,
    determinate,
    instanceSize: inProps.size
  });
  const classes = useUtilityClasses33(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: CircularProgressRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: _extends({
      role: "progressbar",
      style: {
        // Setting this CSS variable via inline-style
        // prevents the generation of new CSS every time
        // `value` prop updates
        "--CircularProgress-percent": value
      }
    }, value && determinate && {
      "aria-valuenow": typeof value === "number" ? Math.round(value) : Math.round(Number(value || 0))
    })
  });
  const [SlotSvg, svgProps] = useSlot("svg", {
    className: classes.svg,
    elementType: CircularProgressSvg,
    externalForwardedProps,
    ownerState
  });
  const [SlotTrack, trackProps] = useSlot("track", {
    className: classes.track,
    elementType: CircularProgressTrack,
    externalForwardedProps,
    ownerState
  });
  const [SlotProgress, progressProps] = useSlot("progress", {
    className: classes.progress,
    elementType: CircularProgressProgress,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime73.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime73.jsxs)(SlotSvg, _extends({}, svgProps, {
      children: [(0, import_jsx_runtime72.jsx)(SlotTrack, _extends({}, trackProps)), (0, import_jsx_runtime72.jsx)(SlotProgress, _extends({}, progressProps))]
    })), children]
  }));
});
true ? CircularProgress.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types44.default.node,
  /**
   * @ignore
   */
  className: import_prop_types44.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: import_prop_types44.default.oneOfType([import_prop_types44.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types44.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types44.default.elementType,
  /**
   * The boolean to select a variant.
   * Use indeterminate when there is no progress value.
   * @default false
   */
  determinate: import_prop_types44.default.bool,
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types44.default.oneOfType([import_prop_types44.default.oneOf(["sm", "md", "lg"]), import_prop_types44.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types44.default.shape({
    progress: import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object]),
    root: import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object]),
    svg: import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object]),
    track: import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types44.default.shape({
    progress: import_prop_types44.default.elementType,
    root: import_prop_types44.default.elementType,
    svg: import_prop_types44.default.elementType,
    track: import_prop_types44.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types44.default.oneOfType([import_prop_types44.default.arrayOf(import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object, import_prop_types44.default.bool])), import_prop_types44.default.func, import_prop_types44.default.object]),
  /**
   * The thickness of the circle.
   */
  thickness: import_prop_types44.default.number,
  /**
   * The value of the progress indicator for the determinate variant.
   * Value between 0 and 100.
   *
   * @default determinate ? 0 : 25
   */
  value: import_prop_types44.default.number,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'soft'
   */
  variant: import_prop_types44.default.oneOfType([import_prop_types44.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types44.default.string])
} : void 0;
var CircularProgress_default = CircularProgress;

// node_modules/@mui/joy/IconButton/IconButton.js
var import_jsx_runtime74 = __toESM(require_jsx_runtime());
var _excluded42 = ["children", "action", "component", "color", "disabled", "variant", "loading", "loadingIndicator", "size", "slots", "slotProps"];
var useUtilityClasses34 = (ownerState) => {
  const {
    color,
    disabled,
    focusVisible,
    focusVisibleClassName,
    size: size3,
    variant,
    loading
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`, loading && "loading"],
    loadingIndicator: ["loadingIndicator"]
  };
  const composedClasses = composeClasses2(slots, getIconButtonUtilityClass, {});
  if (focusVisible && focusVisibleClassName) {
    composedClasses.root += ` ${focusVisibleClassName}`;
  }
  return composedClasses;
};
var StyledIconButton = styled_default("button")(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants2, _theme$variants3, _theme$variants4;
  return [_extends({
    "--Icon-margin": "initial",
    // reset the icon's margin.
    "--Icon-color": ownerState.color !== "neutral" || ownerState.variant === "solid" ? "currentColor" : theme.vars.palette.text.icon
  }, ownerState.instanceSize && {
    "--IconButton-size": {
      sm: "2rem",
      md: "2.25rem",
      lg: "2.75rem"
    }[ownerState.instanceSize]
  }, ownerState.size === "sm" && {
    "--Icon-fontSize": "calc(var(--IconButton-size, 2rem) / 1.6)",
    // 1.25rem by default
    "--CircularProgress-size": "20px",
    "--CircularProgress-thickness": "2px",
    minWidth: "var(--IconButton-size, 2rem)",
    // use min-width instead of height to make the button resilient to its content
    minHeight: "var(--IconButton-size, 2rem)",
    // use min-height instead of height to make the button resilient to its content
    fontSize: theme.vars.fontSize.sm,
    paddingInline: "2px"
    // add a gap, in case the content is long, for example multiple icons
  }, ownerState.size === "md" && {
    "--Icon-fontSize": "calc(var(--IconButton-size, 2.25rem) / 1.5)",
    // 1.5rem by default
    "--CircularProgress-size": "20px",
    "--CircularProgress-thickness": "2px",
    minWidth: "var(--IconButton-size, 2.25rem)",
    minHeight: "var(--IconButton-size, 2.25rem)",
    fontSize: theme.vars.fontSize.md,
    paddingInline: "0.25rem"
  }, ownerState.size === "lg" && {
    "--Icon-fontSize": "calc(var(--IconButton-size, 2.75rem) / 1.571)",
    // 1.75rem by default
    "--CircularProgress-size": "28px",
    "--CircularProgress-thickness": "4px",
    minWidth: "var(--IconButton-size, 2.75rem)",
    minHeight: "var(--IconButton-size, 2.75rem)",
    fontSize: theme.vars.fontSize.lg,
    paddingInline: "0.375rem"
  }, {
    WebkitTapHighlightColor: "transparent",
    paddingBlock: 0,
    fontFamily: theme.vars.fontFamily.body,
    fontWeight: theme.vars.fontWeight.md,
    margin: `var(--IconButton-margin)`,
    // to be controlled by other components, for example Input
    borderRadius: `var(--IconButton-radius, ${theme.vars.radius.sm})`,
    // to be controlled by other components, for example Input
    border: "none",
    boxSizing: "border-box",
    backgroundColor: "transparent",
    cursor: "pointer",
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
    [theme.focus.selector]: _extends({
      "--Icon-color": "currentColor"
    }, theme.focus.default)
  }), _extends({}, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    "&:hover": {
      "@media (hover: hover)": _extends({
        "--Icon-color": "currentColor"
      }, (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants2[ownerState.color])
    },
    '&:active, &[aria-pressed="true"]': _extends({
      "--Icon-color": "currentColor"
    }, (_theme$variants3 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants3[ownerState.color]),
    "&:disabled": (_theme$variants4 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants4[ownerState.color]
  })];
});
var IconButtonRoot = styled_default(StyledIconButton, {
  name: "JoyIconButton",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({});
var ButtonLoading = styled_default("span", {
  name: "JoyIconButton",
  slot: "LoadingIndicator",
  overridesResolver: (props, styles2) => styles2.loadingIndicator
})(({
  theme,
  ownerState
}) => {
  var _theme$variants5, _theme$variants6;
  return _extends({
    display: "inherit",
    position: "absolute",
    left: "50%",
    transform: "translateX(-50%)",
    color: (_theme$variants5 = theme.variants[ownerState.variant]) == null || (_theme$variants5 = _theme$variants5[ownerState.color]) == null ? void 0 : _theme$variants5.color
  }, ownerState.disabled && {
    color: (_theme$variants6 = theme.variants[`${ownerState.variant}Disabled`]) == null || (_theme$variants6 = _theme$variants6[ownerState.color]) == null ? void 0 : _theme$variants6.color
  });
});
var IconButton = React119.forwardRef(function IconButton2(inProps, ref) {
  var _ref;
  const props = useThemeProps2({
    props: inProps,
    name: "JoyIconButton"
  });
  const {
    children,
    action,
    component = "button",
    color: colorProp = "neutral",
    disabled: disabledProp,
    variant: variantProp = "plain",
    loading = false,
    loadingIndicator: loadingIndicatorProp,
    size: sizeProp = "md",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded42);
  const buttonGroup = React119.useContext(ButtonGroupContext_default);
  const toggleButtonGroup = React119.useContext(ToggleButtonGroupContext_default);
  const variant = inProps.variant || buttonGroup.variant || variantProp;
  const size3 = inProps.size || buttonGroup.size || sizeProp;
  const color = inProps.color || buttonGroup.color || colorProp;
  const disabled = (_ref = inProps.loading || inProps.disabled) != null ? _ref : buttonGroup.disabled || loading || disabledProp;
  const buttonRef = React119.useRef(null);
  const handleRef = useForkRef(buttonRef, ref);
  const {
    focusVisible,
    setFocusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    disabled,
    rootRef: handleRef
  }));
  const loadingIndicator = loadingIndicatorProp != null ? loadingIndicatorProp : (0, import_jsx_runtime74.jsx)(CircularProgress_default, {
    color,
    thickness: {
      sm: 2,
      md: 3,
      lg: 4
    }[size3] || 3
  });
  React119.useImperativeHandle(action, () => ({
    focusVisible: () => {
      var _buttonRef$current;
      setFocusVisible(true);
      (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();
    }
  }), [setFocusVisible]);
  const ownerState = _extends({}, props, {
    component,
    color,
    disabled,
    variant,
    loading,
    size: size3,
    focusVisible,
    instanceSize: inProps.size
  });
  const classes = useUtilityClasses34(ownerState);
  const handleClick = (event) => {
    var _onClick;
    let onClick = props.onClick;
    if (typeof slotProps.root === "function") {
      onClick = slotProps.root(ownerState).onClick;
    } else if (slotProps.root) {
      onClick = slotProps.root.onClick;
    }
    (_onClick = onClick) == null || _onClick(event);
    if (toggleButtonGroup) {
      var _toggleButtonGroup$on;
      (_toggleButtonGroup$on = toggleButtonGroup.onClick) == null || _toggleButtonGroup$on.call(toggleButtonGroup, event, props.value);
    }
  };
  let ariaPressed = props["aria-pressed"];
  if (typeof slotProps.root === "function") {
    ariaPressed = slotProps.root(ownerState)["aria-pressed"];
  } else if (slotProps.root) {
    ariaPressed = slotProps.root["aria-pressed"];
  }
  if (toggleButtonGroup != null && toggleButtonGroup.value) {
    if (Array.isArray(toggleButtonGroup.value)) {
      ariaPressed = toggleButtonGroup.value.indexOf(props.value) !== -1;
    } else {
      ariaPressed = toggleButtonGroup.value === props.value;
    }
  }
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: IconButtonRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      onClick: handleClick,
      "aria-pressed": ariaPressed
    }
  });
  const [SlotLoadingIndicator, loadingIndicatorProps] = useSlot("loadingIndicator", {
    className: classes.loadingIndicator,
    elementType: ButtonLoading,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime74.jsx)(SlotRoot, _extends({}, rootProps, {
    children: loading ? (0, import_jsx_runtime74.jsx)(SlotLoadingIndicator, _extends({}, loadingIndicatorProps, {
      children: loadingIndicator
    })) : children
  }));
});
true ? IconButton.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */
  action: import_prop_types45.default.oneOfType([import_prop_types45.default.func, import_prop_types45.default.shape({
    current: import_prop_types45.default.shape({
      focusVisible: import_prop_types45.default.func.isRequired
    })
  })]),
  /**
   * @ignore
   */
  children: import_prop_types45.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types45.default.oneOfType([import_prop_types45.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types45.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types45.default.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types45.default.bool,
  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: import_prop_types45.default.string,
  /**
   * If `true`, the loading indicator is shown and the icon button becomes disabled.
   * @default false
   */
  loading: import_prop_types45.default.bool,
  /**
   * The node should contain an element with `role="progressbar"` with an accessible name.
   * By default we render a `CircularProgress` that is labelled by the button itself.
   * @default <CircularProgress />
   */
  loadingIndicator: import_prop_types45.default.node,
  /**
   * @ignore
   */
  onClick: import_prop_types45.default.func,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types45.default.oneOfType([import_prop_types45.default.oneOf(["sm", "md", "lg"]), import_prop_types45.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types45.default.shape({
    loadingIndicator: import_prop_types45.default.oneOfType([import_prop_types45.default.func, import_prop_types45.default.object]),
    root: import_prop_types45.default.oneOfType([import_prop_types45.default.func, import_prop_types45.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types45.default.shape({
    loadingIndicator: import_prop_types45.default.elementType,
    root: import_prop_types45.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types45.default.oneOfType([import_prop_types45.default.arrayOf(import_prop_types45.default.oneOfType([import_prop_types45.default.func, import_prop_types45.default.object, import_prop_types45.default.bool])), import_prop_types45.default.func, import_prop_types45.default.object]),
  /**
   * @default 0
   */
  tabIndex: import_prop_types45.default.number,
  /**
   * @ignore
   */
  value: import_prop_types45.default.oneOfType([import_prop_types45.default.arrayOf(import_prop_types45.default.string), import_prop_types45.default.number, import_prop_types45.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types45.default.oneOfType([import_prop_types45.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types45.default.string])
} : void 0;
IconButton.muiName = "IconButton";
var IconButton_default = IconButton;

// node_modules/@mui/joy/Chip/Chip.js
var React121 = __toESM(require_react());
var import_prop_types46 = __toESM(require_prop_types());

// node_modules/@mui/joy/Chip/chipClasses.js
function getChipUtilityClass(slot) {
  return generateUtilityClass2("MuiChip", slot);
}
var chipClasses = generateUtilityClasses2("MuiChip", ["root", "clickable", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "disabled", "endDecorator", "focusVisible", "label", "labelSm", "labelMd", "labelLg", "sizeSm", "sizeMd", "sizeLg", "startDecorator", "variantPlain", "variantSolid", "variantSoft", "variantOutlined"]);
var chipClasses_default = chipClasses;

// node_modules/@mui/joy/Chip/ChipContext.js
var React120 = __toESM(require_react());
var ChipColorContext = React120.createContext({
  disabled: void 0,
  variant: void 0,
  color: void 0
});
if (true) {
  ChipColorContext.displayName = "ChipColorContext";
}
var ChipContext_default = ChipColorContext;

// node_modules/@mui/joy/Chip/Chip.js
var import_jsx_runtime75 = __toESM(require_jsx_runtime());
var import_jsx_runtime76 = __toESM(require_jsx_runtime());
var _excluded43 = ["children", "className", "color", "onClick", "disabled", "size", "variant", "startDecorator", "endDecorator", "component", "slots", "slotProps"];
var useUtilityClasses35 = (ownerState) => {
  const {
    disabled,
    size: size3,
    color,
    clickable,
    variant,
    focusVisible
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`, variant && `variant${capitalize(variant)}`, clickable && "clickable"],
    action: ["action", disabled && "disabled", focusVisible && "focusVisible"],
    label: ["label", size3 && `label${capitalize(size3)}`],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses2(slots, getChipUtilityClass, {});
};
var ChipRoot = styled_default("div", {
  name: "JoyChip",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants2, _theme$variants3;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  const {
    borderRadius
  } = resolveSxValue({
    theme,
    ownerState
  }, ["borderRadius"]);
  return [_extends({
    // for controlling chip delete margin offset
    "--Chip-decoratorChildOffset": "min(calc(var(--Chip-paddingInline) - (var(--_Chip-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Chip-decoratorChildHeight)) / 2), var(--Chip-paddingInline))",
    "--Chip-decoratorChildRadius": "max(var(--_Chip-radius) - var(--variant-borderWidth, 0px) - var(--_Chip-paddingBlock), min(var(--_Chip-paddingBlock) + var(--variant-borderWidth, 0px), var(--_Chip-radius) / 2))",
    "--Chip-deleteRadius": "var(--Chip-decoratorChildRadius)",
    "--Chip-deleteSize": "var(--Chip-decoratorChildHeight)",
    "--Avatar-radius": "var(--Chip-decoratorChildRadius)",
    "--Avatar-size": "var(--Chip-decoratorChildHeight)",
    "--Icon-margin": "initial",
    // reset the icon's margin.
    "--Icon-color": "currentColor",
    "--unstable_actionRadius": "var(--_Chip-radius)"
  }, ownerState.size === "sm" && {
    "--Chip-paddingInline": "0.375rem",
    "--Chip-decoratorChildHeight": "calc(var(--_Chip-minHeight) - 2 * var(--variant-borderWidth))",
    "--Icon-fontSize": theme.vars.fontSize.sm,
    "--_Chip-minHeight": "var(--Chip-minHeight, 1.25rem)",
    // 20px
    gap: "3px"
  }, ownerState.size === "md" && {
    "--Chip-paddingInline": "0.5rem",
    "--Chip-decoratorChildHeight": "calc(var(--_Chip-minHeight) - 0.25rem - 2 * var(--variant-borderWidth))",
    "--Icon-fontSize": theme.vars.fontSize.md,
    "--_Chip-minHeight": "var(--Chip-minHeight, 1.5rem)",
    // 26px
    gap: "0.25rem"
  }, ownerState.size === "lg" && {
    "--Chip-paddingInline": "0.75rem",
    "--Chip-decoratorChildHeight": "calc(var(--_Chip-minHeight) - 0.375rem - 2 * var(--variant-borderWidth))",
    "--Icon-fontSize": theme.vars.fontSize.lg,
    "--_Chip-minHeight": "var(--Chip-minHeight, 1.75rem)",
    // 28px
    gap: "0.375rem"
  }, {
    "--_Chip-radius": "var(--Chip-radius, 1.5rem)",
    "--_Chip-paddingBlock": "max((var(--_Chip-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Chip-decoratorChildHeight)) / 2, 0px)",
    minHeight: "var(--_Chip-minHeight)",
    maxWidth: "max-content",
    // to prevent Chip from stretching to full width when used with flexbox
    paddingInline: "var(--Chip-paddingInline)",
    borderRadius: "var(--_Chip-radius)",
    position: "relative",
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    whiteSpace: "nowrap",
    textDecoration: "none",
    verticalAlign: "middle",
    boxSizing: "border-box"
  }, theme.typography[`body-${{
    sm: "xs",
    md: "sm",
    lg: "md"
  }[ownerState.size]}`], {
    fontWeight: theme.vars.fontWeight.md,
    [`&.${chipClasses_default.disabled}`]: {
      color: (_theme$variants2 = theme.variants[`${ownerState.variant}Disabled`]) == null || (_theme$variants2 = _theme$variants2[ownerState.color]) == null ? void 0 : _theme$variants2.color
    }
  }), ...!ownerState.clickable ? [_extends({
    backgroundColor: theme.vars.palette.background.surface
  }, variantStyle, {
    [`&.${chipClasses_default.disabled}`]: (_theme$variants3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants3[ownerState.color]
  })] : [{
    "--variant-borderWidth": "0px",
    color: variantStyle == null ? void 0 : variantStyle.color
  }], borderRadius !== void 0 && {
    "--_Chip-radius": borderRadius
  }];
});
var ChipLabel = styled_default("span", {
  name: "JoyChip",
  slot: "Label",
  overridesResolver: (props, styles2) => styles2.label
})(({
  ownerState
}) => _extends({
  display: "inline-block",
  overflow: "hidden",
  textOverflow: "ellipsis",
  order: 1,
  minInlineSize: 0,
  flexGrow: 1
}, ownerState.clickable && {
  zIndex: 1,
  pointerEvents: "none"
}));
var ChipAction = styled_default("button", {
  name: "JoyChip",
  slot: "Action",
  overridesResolver: (props, styles2) => styles2.action
})(({
  theme,
  ownerState
}) => {
  var _theme$variants4, _theme$variants5, _theme$variants6, _theme$variants7;
  return [{
    "--Icon-color": ownerState.color !== "neutral" || ownerState.variant === "solid" ? "currentColor" : theme.vars.palette.text.icon,
    position: "absolute",
    zIndex: 0,
    top: 0,
    left: 0,
    bottom: 0,
    right: 0,
    width: "100%",
    // To fix Firefox issue (https://github.com/mui/material-ui/issues/36877)
    border: "none",
    cursor: "pointer",
    padding: "initial",
    margin: "initial",
    backgroundColor: "initial",
    textDecoration: "none",
    borderRadius: "inherit",
    [theme.focus.selector]: theme.focus.default
  }, _extends({
    backgroundColor: theme.vars.palette.background.surface
  }, (_theme$variants4 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants4[ownerState.color]), {
    "&:hover": {
      "@media (hover: hover)": (_theme$variants5 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants5[ownerState.color]
    }
  }, {
    "&:active": (_theme$variants6 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants6[ownerState.color]
  }, {
    [`&.${chipClasses_default.disabled}`]: (_theme$variants7 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants7[ownerState.color]
  }];
});
var ChipStartDecorator = styled_default("span", {
  name: "JoyChip",
  slot: "StartDecorator",
  overridesResolver: (props, styles2) => styles2.startDecorator
})({
  "--Avatar-marginInlineStart": "calc(var(--Chip-decoratorChildOffset) * -1)",
  "--IconButton-margin": "0 calc(-1 * var(--Chip-paddingInline) / 3) 0 calc(var(--Chip-decoratorChildOffset) * -1)",
  "--Icon-margin": "0 0 0 calc(var(--Chip-paddingInline) / -4)",
  display: "inherit",
  // set zIndex to 1 with order to stay on top of other controls, for example Checkbox, Radio
  order: 0,
  zIndex: 1,
  pointerEvents: "none"
});
var ChipEndDecorator = styled_default("span", {
  name: "JoyChip",
  slot: "EndDecorator",
  overridesResolver: (props, styles2) => styles2.endDecorator
})({
  "--IconButton-margin": "0 calc(var(--Chip-decoratorChildOffset) * -1) 0 calc(-1 * var(--Chip-paddingInline) / 3)",
  "--Icon-margin": "0 calc(var(--Chip-paddingInline) / -4) 0 0",
  display: "inherit",
  // set zIndex to 1 with order to stay on top of other controls, for example Checkbox, Radio
  order: 2,
  zIndex: 1,
  pointerEvents: "none"
});
var Chip = React121.forwardRef(function Chip2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyChip"
  });
  const {
    children,
    className,
    color = "neutral",
    onClick,
    disabled = false,
    size: size3 = "md",
    variant = "soft",
    startDecorator,
    endDecorator,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded43);
  const clickable = !!onClick || !!slotProps.action;
  const ownerState = _extends({}, props, {
    disabled,
    size: size3,
    color,
    variant,
    clickable,
    focusVisible: false
  });
  const resolvedActionProps = typeof slotProps.action === "function" ? slotProps.action(ownerState) : slotProps.action;
  const actionRef = React121.useRef(null);
  const {
    focusVisible,
    getRootProps
  } = useButton(_extends({}, resolvedActionProps, {
    disabled,
    rootRef: actionRef
  }));
  ownerState.focusVisible = focusVisible;
  const classes = useUtilityClasses35(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: ChipRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotLabel, labelProps] = useSlot("label", {
    className: classes.label,
    elementType: ChipLabel,
    externalForwardedProps,
    ownerState
  });
  const id = useId(labelProps.id);
  const [SlotAction, actionProps] = useSlot("action", {
    className: classes.action,
    elementType: ChipAction,
    externalForwardedProps,
    ownerState,
    getSlotProps: getRootProps,
    additionalProps: {
      "aria-labelledby": id,
      as: resolvedActionProps == null ? void 0 : resolvedActionProps.component,
      onClick
    }
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: ChipStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: ChipEndDecorator,
    externalForwardedProps,
    ownerState
  });
  const chipContextValue = React121.useMemo(() => ({
    disabled
  }), [disabled]);
  return (0, import_jsx_runtime75.jsx)(ChipContext_default.Provider, {
    value: chipContextValue,
    children: (0, import_jsx_runtime75.jsx)(VariantColorProvider, {
      variant,
      color,
      children: (0, import_jsx_runtime76.jsxs)(SlotRoot, _extends({}, rootProps, {
        children: [clickable && (0, import_jsx_runtime75.jsx)(SlotAction, _extends({}, actionProps)), (0, import_jsx_runtime75.jsx)(SlotLabel, _extends({}, labelProps, {
          id,
          children
        })), startDecorator && (0, import_jsx_runtime75.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
          children: startDecorator
        })), endDecorator && (0, import_jsx_runtime75.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
          children: endDecorator
        }))]
      }))
    })
  });
});
true ? Chip.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types46.default.node,
  /**
   * @ignore
   */
  className: import_prop_types46.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types46.default.oneOfType([import_prop_types46.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types46.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types46.default.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types46.default.bool,
  /**
   * Element placed after the children.
   */
  endDecorator: import_prop_types46.default.node,
  /**
   * Element action click handler.
   */
  onClick: import_prop_types46.default.func,
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types46.default.oneOfType([import_prop_types46.default.oneOf(["lg", "md", "sm"]), import_prop_types46.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types46.default.shape({
    action: import_prop_types46.default.oneOfType([import_prop_types46.default.func, import_prop_types46.default.object]),
    endDecorator: import_prop_types46.default.oneOfType([import_prop_types46.default.func, import_prop_types46.default.object]),
    label: import_prop_types46.default.oneOfType([import_prop_types46.default.func, import_prop_types46.default.object]),
    root: import_prop_types46.default.oneOfType([import_prop_types46.default.func, import_prop_types46.default.object]),
    startDecorator: import_prop_types46.default.oneOfType([import_prop_types46.default.func, import_prop_types46.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types46.default.shape({
    action: import_prop_types46.default.elementType,
    endDecorator: import_prop_types46.default.elementType,
    label: import_prop_types46.default.elementType,
    root: import_prop_types46.default.elementType,
    startDecorator: import_prop_types46.default.elementType
  }),
  /**
   * Element placed before the children.
   */
  startDecorator: import_prop_types46.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types46.default.oneOfType([import_prop_types46.default.arrayOf(import_prop_types46.default.oneOfType([import_prop_types46.default.func, import_prop_types46.default.object, import_prop_types46.default.bool])), import_prop_types46.default.func, import_prop_types46.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'soft'
   */
  variant: import_prop_types46.default.oneOfType([import_prop_types46.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types46.default.string])
} : void 0;
var Chip_default = Chip;

// node_modules/@mui/joy/ChipDelete/ChipDelete.js
var React123 = __toESM(require_react());
var import_prop_types47 = __toESM(require_prop_types());

// node_modules/@mui/joy/internal/svg-icons/Cancel.js
var React122 = __toESM(require_react());
var import_jsx_runtime77 = __toESM(require_jsx_runtime());
var Cancel_default = createSvgIcon((0, import_jsx_runtime77.jsx)("path", {
  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Cancel");

// node_modules/@mui/joy/ChipDelete/chipDeleteClasses.js
function getChipDeleteUtilityClass(slot) {
  return generateUtilityClass2("MuiChipDelete", slot);
}
var chipDeleteClasses = generateUtilityClasses2("MuiChipDelete", ["root", "disabled", "focusVisible", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSolid", "variantSoft", "variantOutlined"]);
var chipDeleteClasses_default = chipDeleteClasses;

// node_modules/@mui/joy/ChipDelete/ChipDelete.js
var import_jsx_runtime78 = __toESM(require_jsx_runtime());
var _Cancel;
var _excluded44 = ["children", "variant", "color", "disabled", "onKeyDown", "onDelete", "onClick", "component", "slots", "slotProps"];
var _excluded212 = ["onDelete"];
var useUtilityClasses36 = (ownerState) => {
  const {
    focusVisible,
    variant,
    color,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses2(slots, getChipDeleteUtilityClass, {});
};
var ChipDeleteRoot = styled_default(StyledIconButton, {
  name: "JoyChipDelete",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme
}) => ({
  "--IconButton-size": "var(--Chip-deleteSize, 2rem)",
  "--Icon-fontSize": "calc(var(--IconButton-size, 2rem) / 1.3)",
  minWidth: "var(--IconButton-size, 2rem)",
  // use min-width instead of height to make the button resilient to its content
  minHeight: "var(--IconButton-size, 2rem)",
  // use min-height instead of height to make the button resilient to its content
  fontSize: theme.vars.fontSize.sm,
  paddingInline: "2px",
  // add a gap, in case the content is long, for example multiple icons
  pointerEvents: "visible",
  // force the ChipDelete to be hoverable because the decorator can have pointerEvents 'none'
  borderRadius: "var(--Chip-deleteRadius, 50%)",
  zIndex: 1,
  // overflow above sibling button or anchor
  padding: 0
  // reset user agent stylesheet
}));
var ChipDelete = React123.forwardRef(function ChipDelete2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyChipDelete"
  });
  const {
    children,
    variant: variantProp = "plain",
    color: colorProp = "neutral",
    disabled: disabledProp,
    onKeyDown,
    onDelete,
    onClick,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded44);
  const chipContext = React123.useContext(ChipContext_default);
  const {
    variant = variantProp,
    color: inheritedColor = colorProp
  } = useVariantColor(inProps.variant, inProps.color, true);
  const color = inProps.color || inheritedColor;
  const disabled = disabledProp != null ? disabledProp : chipContext.disabled;
  const buttonRef = React123.useRef(null);
  const handleRef = useForkRef(buttonRef, ref);
  const {
    focusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    disabled,
    rootRef: handleRef
  }));
  const ownerState = _extends({}, props, {
    disabled,
    variant,
    color,
    focusVisible
  });
  const classes = useUtilityClasses36(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const handleClickDelete = (event) => {
    if (!disabled && onDelete) {
      onDelete(event);
    }
    if (onClick) {
      onClick(event);
    }
  };
  const handleKeyDelete = (event) => {
    if (["Backspace", "Enter", "Delete"].includes(event.key)) {
      event.preventDefault();
      if (!disabled && onDelete) {
        onDelete(event);
      }
    }
    if (onKeyDown) {
      onKeyDown(event);
    }
  };
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: ChipDeleteRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      as: component,
      onKeyDown: handleKeyDelete,
      onClick: handleClickDelete
    },
    className: classes.root
  });
  const restOfRootProps = _objectWithoutPropertiesLoose(rootProps, _excluded212);
  return (0, import_jsx_runtime78.jsx)(SlotRoot, _extends({}, restOfRootProps, {
    children: children != null ? children : _Cancel || (_Cancel = (0, import_jsx_runtime78.jsx)(Cancel_default, {}))
  }));
});
true ? ChipDelete.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If provided, it will replace the default icon.
   */
  children: import_prop_types47.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types47.default.oneOfType([import_prop_types47.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types47.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types47.default.elementType,
  /**
   * If `true`, the component is disabled.
   * If `undefined`, the value inherits from the parent chip via a React context.
   */
  disabled: import_prop_types47.default.bool,
  /**
   * @ignore
   */
  onClick: import_prop_types47.default.func,
  /**
   * Callback fired when the component is not disabled and either:
   * - `Backspace`, `Enter` or `Delete` is pressed.
   * - The component is clicked.
   */
  onDelete: import_prop_types47.default.func,
  /**
   * @ignore
   */
  onKeyDown: import_prop_types47.default.func,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types47.default.shape({
    root: import_prop_types47.default.oneOfType([import_prop_types47.default.func, import_prop_types47.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types47.default.shape({
    root: import_prop_types47.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types47.default.oneOfType([import_prop_types47.default.arrayOf(import_prop_types47.default.oneOfType([import_prop_types47.default.func, import_prop_types47.default.object, import_prop_types47.default.bool])), import_prop_types47.default.func, import_prop_types47.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types47.default.oneOfType([import_prop_types47.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types47.default.string])
} : void 0;
var ChipDelete_default = ChipDelete;

// node_modules/@mui/joy/Input/Input.js
var React126 = __toESM(require_react());
var import_prop_types48 = __toESM(require_prop_types());

// node_modules/@mui/joy/Input/inputClasses.js
function getInputUtilityClass2(slot) {
  return generateUtilityClass2("MuiInput", slot);
}
var inputClasses2 = generateUtilityClasses2("MuiInput", ["root", "input", "formControl", "focused", "disabled", "error", "adornedStart", "adornedEnd", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "fullWidth", "startDecorator", "endDecorator"]);
var inputClasses_default = inputClasses2;

// node_modules/@mui/joy/Input/useForwardedInput.js
var React125 = __toESM(require_react());

// node_modules/@mui/joy/FormControl/FormControlContext.js
var React124 = __toESM(require_react());
var FormControlContext2 = React124.createContext(void 0);
if (true) {
  FormControlContext2.displayName = "FormControlContext";
}
var FormControlContext_default = FormControlContext2;

// node_modules/@mui/joy/Input/useForwardedInput.js
var _excluded45 = ["aria-describedby", "aria-label", "aria-labelledby", "autoComplete", "autoFocus", "className", "defaultValue", "disabled", "disabledInProp", "error", "id", "name", "onClick", "onChange", "onKeyDown", "onKeyUp", "onFocus", "onBlur", "placeholder", "readOnly", "required", "type", "value"];
function useForwardedInput(props, classes) {
  var _ref;
  const formControl = React125.useContext(FormControlContext_default);
  const {
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    autoComplete,
    autoFocus,
    className,
    defaultValue,
    disabled: disabledProp,
    disabledInProp,
    error: errorProp,
    id,
    name,
    onClick,
    onChange,
    onKeyDown,
    onKeyUp,
    onFocus,
    onBlur,
    placeholder,
    readOnly,
    required,
    type,
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded45);
  const {
    getRootProps,
    getInputProps,
    focused,
    error,
    disabled
  } = useInput({
    disabled: (_ref = disabledInProp != null ? disabledInProp : formControl == null ? void 0 : formControl.disabled) != null ? _ref : disabledProp,
    defaultValue,
    error: errorProp,
    onBlur,
    onClick,
    onChange,
    onFocus,
    required: required != null ? required : formControl == null ? void 0 : formControl.required,
    value
  });
  const rootStateClasses = {
    [classes.disabled]: disabled,
    [classes.error]: error,
    [classes.focused]: focused,
    [classes.formControl]: Boolean(formControl),
    [className]: className
  };
  const inputStateClasses = {
    [classes.disabled]: disabled
  };
  const propsToForward = {
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    autoComplete,
    autoFocus,
    disabled,
    id,
    onKeyDown,
    onKeyUp,
    name,
    placeholder,
    readOnly,
    type
  };
  return _extends({
    formControl,
    propsToForward,
    rootStateClasses,
    inputStateClasses,
    getRootProps,
    getInputProps,
    focused,
    error,
    disabled
  }, other);
}

// node_modules/@mui/joy/Input/Input.js
var import_jsx_runtime79 = __toESM(require_jsx_runtime());
var import_jsx_runtime80 = __toESM(require_jsx_runtime());
var _excluded46 = ["propsToForward", "rootStateClasses", "inputStateClasses", "getRootProps", "getInputProps", "formControl", "focused", "error", "disabled", "fullWidth", "size", "color", "variant", "startDecorator", "endDecorator", "component", "slots", "slotProps"];
var useUtilityClasses37 = (ownerState) => {
  const {
    disabled,
    fullWidth,
    variant,
    color,
    size: size3
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", fullWidth && "fullWidth", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`],
    input: ["input"],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses2(slots, getInputUtilityClass2, {});
};
var StyledInputRoot = styled_default("div")(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$vars$palette, _theme$vars$palette2, _variantStyle$backgro, _theme$variants2, _theme$variants3;
  const variantStyle = (_theme$variants = theme.variants[`${ownerState.variant}`]) == null ? void 0 : _theme$variants[ownerState.color];
  return [_extends({
    "--Input-radius": theme.vars.radius.sm,
    "--Input-gap": "0.5rem",
    "--Input-placeholderColor": "inherit",
    "--Input-placeholderOpacity": 0.64,
    "--Input-decoratorColor": theme.vars.palette.text.icon,
    "--Input-focused": "0",
    "--Input-focusedThickness": theme.vars.focus.thickness,
    "--Input-focusedHighlight": (_theme$vars$palette = theme.vars.palette[ownerState.color === "neutral" ? "primary" : ownerState.color]) == null ? void 0 : _theme$vars$palette[500],
    [`&:not([${INVERTED_COLORS_ATTR}])`]: _extends({}, ownerState.instanceColor && {
      "--_Input-focusedHighlight": (_theme$vars$palette2 = theme.vars.palette[ownerState.instanceColor === "neutral" ? "primary" : ownerState.instanceColor]) == null ? void 0 : _theme$vars$palette2[500]
    }, {
      "--Input-focusedHighlight": `var(--_Input-focusedHighlight, ${theme.vars.palette.focusVisible})`
    })
  }, ownerState.size === "sm" && {
    "--Input-minHeight": "2rem",
    "--Input-paddingInline": "0.5rem",
    "--Input-decoratorChildHeight": "min(1.5rem, var(--Input-minHeight))",
    "--Icon-fontSize": theme.vars.fontSize.xl
  }, ownerState.size === "md" && {
    "--Input-minHeight": "2.25rem",
    "--Input-paddingInline": "0.75rem",
    "--Input-decoratorChildHeight": "min(1.75rem, var(--Input-minHeight))",
    "--Icon-fontSize": theme.vars.fontSize.xl2
  }, ownerState.size === "lg" && {
    "--Input-minHeight": "2.75rem",
    "--Input-paddingInline": "1rem",
    "--Input-gap": "0.75rem",
    "--Input-decoratorChildHeight": "min(2.25rem, var(--Input-minHeight))",
    "--Icon-fontSize": theme.vars.fontSize.xl2
  }, {
    // variables for controlling child components
    "--Input-decoratorChildOffset": "min(calc(var(--Input-paddingInline) - (var(--Input-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Input-decoratorChildHeight)) / 2), var(--Input-paddingInline))",
    "--_Input-paddingBlock": "max((var(--Input-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Input-decoratorChildHeight)) / 2, 0px)",
    "--Input-decoratorChildRadius": "max(var(--Input-radius) - var(--variant-borderWidth, 0px) - var(--_Input-paddingBlock), min(var(--_Input-paddingBlock) + var(--variant-borderWidth, 0px), var(--Input-radius) / 2))",
    "--Button-minHeight": "var(--Input-decoratorChildHeight)",
    "--Button-paddingBlock": "0px",
    // to ensure that the height of the button is equal to --Button-minHeight
    "--IconButton-size": "var(--Input-decoratorChildHeight)",
    "--Button-radius": "var(--Input-decoratorChildRadius)",
    "--IconButton-radius": "var(--Input-decoratorChildRadius)",
    boxSizing: "border-box"
  }, ownerState.variant !== "plain" && {
    boxShadow: theme.shadow.xs
  }, {
    minWidth: 0,
    minHeight: "var(--Input-minHeight)"
  }, ownerState.fullWidth && {
    width: "100%"
  }, {
    cursor: "text",
    position: "relative",
    display: "flex",
    paddingInline: `var(--Input-paddingInline)`,
    borderRadius: "var(--Input-radius)"
  }, theme.typography[`body-${ownerState.size}`], variantStyle, {
    backgroundColor: (_variantStyle$backgro = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro : theme.vars.palette.background.surface,
    "&::before": {
      boxSizing: "border-box",
      content: '""',
      display: "block",
      position: "absolute",
      pointerEvents: "none",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      zIndex: 1,
      borderRadius: "inherit",
      margin: "calc(var(--variant-borderWidth, 0px) * -1)",
      // for outlined variant
      boxShadow: `var(--Input-focusedInset, inset) 0 0 0 calc(var(--Input-focused) * var(--Input-focusedThickness)) var(--Input-focusedHighlight)`
    }
  }), {
    "&:hover": _extends({}, (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants2[ownerState.color], {
      backgroundColor: null
      // it is not common to change background on hover for Input
    }),
    [`&.${inputClasses_default.disabled}`]: (_theme$variants3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants3[ownerState.color],
    "&:focus-within::before": {
      "--Input-focused": "1"
    }
  }];
});
var StyledInputHtml = styled_default("input")(({
  ownerState
}) => ({
  border: "none",
  // remove the native input width
  minWidth: 0,
  // remove the native input width
  outline: 0,
  // remove the native input outline
  padding: 0,
  // remove the native input padding
  flex: 1,
  color: "inherit",
  backgroundColor: "transparent",
  fontFamily: "inherit",
  fontSize: "inherit",
  fontStyle: "inherit",
  fontWeight: "inherit",
  lineHeight: "inherit",
  textOverflow: "ellipsis",
  "&:-webkit-autofill": _extends({
    paddingInline: "var(--Input-paddingInline)"
  }, !ownerState.startDecorator && {
    marginInlineStart: "calc(-1 * var(--Input-paddingInline))",
    paddingInlineStart: "var(--Input-paddingInline)",
    borderTopLeftRadius: "calc(var(--Input-radius) - var(--variant-borderWidth, 0px))",
    borderBottomLeftRadius: "calc(var(--Input-radius) - var(--variant-borderWidth, 0px))"
  }, !ownerState.endDecorator && {
    marginInlineEnd: "calc(-1 * var(--Input-paddingInline))",
    paddingInlineEnd: "var(--Input-paddingInline)",
    borderTopRightRadius: "calc(var(--Input-radius) - var(--variant-borderWidth, 0px))",
    borderBottomRightRadius: "calc(var(--Input-radius) - var(--variant-borderWidth, 0px))"
  }),
  "&::-webkit-input-placeholder": {
    color: "var(--Input-placeholderColor)",
    opacity: "var(--Input-placeholderOpacity)"
  },
  "&::-moz-placeholder": {
    // Firefox 19+
    color: "var(--Input-placeholderColor)",
    opacity: "var(--Input-placeholderOpacity)"
  },
  "&:-ms-input-placeholder": {
    // IE11
    color: "var(--Input-placeholderColor)",
    opacity: "var(--Input-placeholderOpacity)"
  },
  "&::-ms-input-placeholder": {
    // Edge
    color: "var(--Input-placeholderColor)",
    opacity: "var(--Input-placeholderOpacity)"
  }
}));
var StyledInputStartDecorator = styled_default("div")({
  "--Button-margin": "0 0 0 calc(var(--Input-decoratorChildOffset) * -1)",
  "--IconButton-margin": "0 0 0 calc(var(--Input-decoratorChildOffset) * -1)",
  "--Icon-margin": "0 0 0 calc(var(--Input-paddingInline) / -4)",
  display: "inherit",
  alignItems: "center",
  paddingBlock: "var(--unstable_InputPaddingBlock)",
  // for wrapping Autocomplete's tags
  flexWrap: "wrap",
  // for wrapping Autocomplete's tags
  marginInlineEnd: "var(--Input-gap)",
  color: "var(--Input-decoratorColor)",
  cursor: "initial"
});
var StyledInputEndDecorator = styled_default("div")({
  "--Button-margin": "0 calc(var(--Input-decoratorChildOffset) * -1) 0 0",
  "--IconButton-margin": "0 calc(var(--Input-decoratorChildOffset) * -1) 0 0",
  "--Icon-margin": "0 calc(var(--Input-paddingInline) / -4) 0 0",
  display: "inherit",
  alignItems: "center",
  marginInlineStart: "var(--Input-gap)",
  color: "var(--Input-decoratorColor)",
  cursor: "initial"
});
var InputRoot = styled_default(StyledInputRoot, {
  name: "JoyInput",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({});
var InputInput = styled_default(StyledInputHtml, {
  name: "JoyInput",
  slot: "Input",
  overridesResolver: (props, styles2) => styles2.input
})({});
var InputStartDecorator = styled_default(StyledInputStartDecorator, {
  name: "JoyInput",
  slot: "StartDecorator",
  overridesResolver: (props, styles2) => styles2.startDecorator
})({});
var InputEndDecorator = styled_default(StyledInputEndDecorator, {
  name: "JoyInput",
  slot: "EndDecorator",
  overridesResolver: (props, styles2) => styles2.endDecorator
})({});
var Input3 = React126.forwardRef(function Input4(inProps, ref) {
  var _ref, _inProps$error, _ref2, _inProps$size, _inProps$color, _formControl$color;
  const props = useThemeProps2({
    props: inProps,
    name: "JoyInput"
  });
  const _useForwardedInput = useForwardedInput(_extends({}, props, {
    disabledInProp: inProps.disabled
  }), inputClasses_default), {
    propsToForward,
    rootStateClasses,
    inputStateClasses,
    getRootProps,
    getInputProps,
    formControl,
    focused,
    error: errorProp = false,
    disabled,
    fullWidth = false,
    size: sizeProp = "md",
    color: colorProp = "neutral",
    variant = "outlined",
    startDecorator,
    endDecorator,
    component,
    slots = {},
    slotProps = {}
  } = _useForwardedInput, other = _objectWithoutPropertiesLoose(_useForwardedInput, _excluded46);
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React126.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const error = (_ref = (_inProps$error = inProps.error) != null ? _inProps$error : formControl == null ? void 0 : formControl.error) != null ? _ref : errorProp;
  const size3 = (_ref2 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref2 : sizeProp;
  const color = (_inProps$color = inProps.color) != null ? _inProps$color : error ? "danger" : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp;
  const ownerState = _extends({
    instanceColor: error ? "danger" : inProps.color
  }, props, {
    fullWidth,
    color,
    disabled,
    error,
    focused,
    size: size3,
    variant
  });
  const classes = useUtilityClasses37(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: [classes.root, rootStateClasses],
    elementType: InputRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    ownerState
  });
  const [SlotInput, inputProps] = useSlot("input", _extends({}, formControl && {
    additionalProps: {
      id: formControl.htmlFor,
      "aria-describedby": formControl["aria-describedby"]
    }
  }, {
    className: [classes.input, inputStateClasses],
    elementType: InputInput,
    getSlotProps: getInputProps,
    internalForwardedProps: propsToForward,
    externalForwardedProps,
    ownerState
  }));
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: InputStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: InputEndDecorator,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime80.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [startDecorator && (0, import_jsx_runtime79.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
      children: startDecorator
    })), (0, import_jsx_runtime79.jsx)(SlotInput, _extends({}, inputProps)), endDecorator && (0, import_jsx_runtime79.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
      children: endDecorator
    }))]
  }));
});
true ? Input3.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  autoComplete: import_prop_types48.default.string,
  /**
   * @ignore
   */
  autoFocus: import_prop_types48.default.bool,
  /**
   * @ignore
   */
  children: import_prop_types48.default.node,
  /**
   * Class name applied to the root element.
   */
  className: import_prop_types48.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types48.default.string]),
  /**
   * @ignore
   */
  defaultValue: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string), import_prop_types48.default.number, import_prop_types48.default.string]),
  /**
   * @ignore
   */
  disabled: import_prop_types48.default.bool,
  /**
   * Trailing adornment for this input.
   */
  endDecorator: import_prop_types48.default.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   * @default false
   */
  error: import_prop_types48.default.bool,
  /**
   * If `true`, the input will take up the full width of its container.
   * @default false
   */
  fullWidth: import_prop_types48.default.bool,
  /**
   * @ignore
   */
  id: import_prop_types48.default.string,
  /**
   * @ignore
   */
  name: import_prop_types48.default.string,
  /**
   * @ignore
   */
  onChange: import_prop_types48.default.func,
  /**
   * @ignore
   */
  placeholder: import_prop_types48.default.string,
  /**
   * @ignore
   */
  readOnly: import_prop_types48.default.bool,
  /**
   * @ignore
   */
  required: import_prop_types48.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["sm", "md", "lg"]), import_prop_types48.default.string]),
  /**
   * Leading adornment for this input.
   */
  startDecorator: import_prop_types48.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
  /**
   * @ignore
   */
  value: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.string), import_prop_types48.default.number, import_prop_types48.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types48.default.string])
} : void 0;
var Input_default = Input3;

// node_modules/@mui/joy/ListSubheader/ListSubheader.js
var React127 = __toESM(require_react());
var import_prop_types49 = __toESM(require_prop_types());

// node_modules/@mui/joy/ListSubheader/listSubheaderClasses.js
function getListSubheaderUtilityClass(slot) {
  return generateUtilityClass2("MuiListSubheader", slot);
}
var listSubheaderClasses = generateUtilityClasses2("MuiListSubheader", ["root", "sticky", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var listSubheaderClasses_default = listSubheaderClasses;

// node_modules/@mui/joy/ListSubheader/ListSubheader.js
var import_jsx_runtime81 = __toESM(require_jsx_runtime());
var _excluded47 = ["component", "className", "children", "id", "sticky", "variant", "color", "slots", "slotProps"];
var useUtilityClasses38 = (ownerState) => {
  const {
    variant,
    color,
    sticky
  } = ownerState;
  const slots = {
    root: ["root", sticky && "sticky", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`]
  };
  return composeClasses2(slots, getListSubheaderUtilityClass, {});
};
var ListSubheaderRoot = styled_default("div", {
  name: "JoyListSubheader",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$palette, _theme$variants;
  return _extends({
    boxSizing: "border-box",
    display: "flex",
    alignItems: "center",
    marginInline: "var(--ListItem-marginInline)",
    paddingBlock: "var(--ListItem-paddingY)",
    paddingInlineStart: "var(--ListItem-paddingLeft)",
    paddingInlineEnd: "var(--ListItem-paddingRight)",
    minBlockSize: "var(--ListItem-minHeight)"
  }, theme.typography["body-xs"], {
    fontSize: "max(0.75em, 0.625rem)",
    textTransform: "uppercase",
    letterSpacing: "0.1em"
  }, ownerState.sticky && {
    position: "sticky",
    top: "var(--ListItem-stickyTop, 0px)",
    // integration with Menu and Select.
    zIndex: 1,
    background: "var(--ListItem-stickyBackground)"
  }, {
    color: ownerState.color ? `var(--_Link-color, rgba(${(_theme$vars$palette = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette.mainChannel} / 1))` : theme.vars.palette.text.tertiary
  }, ownerState.instanceColor && {
    [`&:not([${INVERTED_COLORS_ATTR}])`]: {
      "--_Link-color": theme.vars.palette.text.secondary
    }
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
var ListSubheader = React127.forwardRef(function ListSubheader2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyListSubheader"
  });
  const {
    component,
    className,
    children,
    id: idOverride,
    sticky = false,
    variant,
    color,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded47);
  const id = useId(idOverride);
  const setSubheaderId = React127.useContext(ListSubheaderContext_default);
  React127.useEffect(() => {
    if (setSubheaderId) {
      setSubheaderId(id || "");
    }
  }, [setSubheaderId, id]);
  const ownerState = _extends({
    instanceColor: inProps.color
  }, props, {
    id,
    sticky,
    variant,
    color: variant ? color != null ? color : "neutral" : color
  });
  const classes = useUtilityClasses38(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: ListSubheaderRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      as: component,
      id
    }
  });
  return (0, import_jsx_runtime81.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? ListSubheader.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types49.default.node,
  /**
   * @ignore
   */
  className: import_prop_types49.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types49.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types49.default.elementType,
  /**
   * @ignore
   */
  id: import_prop_types49.default.string,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types49.default.shape({
    root: import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types49.default.shape({
    root: import_prop_types49.default.elementType
  }),
  /**
   * If `true`, the component has sticky position (with top = 0).
   * @default false
   */
  sticky: import_prop_types49.default.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   */
  variant: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types49.default.string])
} : void 0;
var ListSubheader_default = ListSubheader;

// node_modules/@mui/joy/Autocomplete/autocompleteClasses.js
function getAutocompleteUtilityClass(slot) {
  return generateUtilityClass2("MuiAutocomplete", slot);
}
var autocompleteClasses = generateUtilityClasses2("MuiAutocomplete", ["root", "wrapper", "input", "startDecorator", "endDecorator", "formControl", "focused", "disabled", "error", "multiple", "limitTag", "hasPopupIcon", "hasClearIcon", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "listbox", "option", "loading", "noOptions", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var autocompleteClasses_default = autocompleteClasses;

// node_modules/@mui/joy/AutocompleteListbox/AutocompleteListbox.js
var React128 = __toESM(require_react());
var import_prop_types50 = __toESM(require_prop_types());

// node_modules/@mui/joy/AutocompleteListbox/autocompleteListboxClasses.js
function getAutocompleteListboxUtilityClass(slot) {
  return generateUtilityClass2("MuiAutocompleteListbox", slot);
}
var autocompleteListboxClasses = generateUtilityClasses2("MuiAutocompleteListbox", ["root", "sizeSm", "sizeMd", "sizeLg", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var autocompleteListboxClasses_default = autocompleteListboxClasses;

// node_modules/@mui/joy/AutocompleteListbox/AutocompleteListbox.js
var import_jsx_runtime82 = __toESM(require_jsx_runtime());
var _excluded48 = ["anchorEl", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "TransitionProps"];
var _excluded213 = ["children", "className", "component", "color", "variant", "size", "slots", "slotProps"];
var useUtilityClasses39 = (ownerState) => {
  const {
    variant,
    color,
    size: size3
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`]
  };
  return composeClasses2(slots, getAutocompleteListboxUtilityClass, {});
};
var excludePopperProps = (_ref) => {
  let other = _objectWithoutPropertiesLoose(_ref, _excluded48);
  return other;
};
var StyledAutocompleteListbox = styled_default(StyledList)(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return _extends({
    "--focus-outline-offset": `calc(${theme.vars.focus.thickness} * -1)`,
    // to prevent the focus outline from being cut by overflow
    "--ListItem-stickyBackground": (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.popup,
    "--ListItem-stickyTop": "calc(var(--List-padding, var(--ListDivider-gap)) * -1)"
  }, scopedVariables, {
    boxShadow: theme.shadow.md,
    borderRadius: `var(--List-radius, ${theme.vars.radius.sm})`
  }, !(variantStyle != null && variantStyle.backgroundColor) && {
    backgroundColor: theme.vars.palette.background.popup
  }, {
    zIndex: theme.vars.zIndex.popup,
    overflow: "auto",
    maxHeight: "40vh",
    position: "relative",
    // to make sure that the listbox is positioned for grouped options to work.
    "&:empty": {
      visibility: "hidden"
    },
    [`& .${listItemClasses_default.nested}, & .${listItemClasses_default.nested} .${listClasses_default.root}`]: {
      // For grouped options autocomplete:
      // Force the position to make the scroll into view logic works because the `element.offsetTop` should reference to the listbox, not the grouped list.
      // See the implementation of the `useAutocomplete` line:370
      //
      // Resource: https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetTop
      position: "initial"
    }
  });
});
var AutocompleteListboxRoot = styled_default(StyledAutocompleteListbox, {
  name: "JoyAutocompleteListbox",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({});
var AutocompleteListbox = React128.forwardRef(function AutocompleteListbox2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyAutocompleteListbox"
  });
  const {
    children,
    className,
    component,
    color = "neutral",
    variant = "outlined",
    size: size3 = "md",
    slots = {},
    slotProps = {}
  } = props, otherProps = _objectWithoutPropertiesLoose(props, _excluded213);
  const ownerState = _extends({}, props, {
    size: size3,
    color,
    variant,
    nesting: false,
    row: false,
    wrap: false
  });
  const other = excludePopperProps(otherProps);
  const classes = useUtilityClasses39(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: AutocompleteListboxRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      role: "listbox"
    }
  });
  return (0, import_jsx_runtime82.jsx)(VariantColorProvider, {
    variant,
    color,
    children: (0, import_jsx_runtime82.jsx)(SlotRoot, _extends({}, rootProps, {
      children
    }))
  });
});
true ? AutocompleteListbox.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types50.default.node,
  /**
   * @ignore
   */
  className: import_prop_types50.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types50.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types50.default.elementType,
  /**
   * The size of the component (affect other nested list* components).
   * @default 'md'
   */
  size: import_prop_types50.default.oneOf(["sm", "md", "lg"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types50.default.shape({
    root: import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types50.default.shape({
    root: import_prop_types50.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["contained", "light", "outlined", "text"]), import_prop_types50.default.string])
} : void 0;
var AutocompleteListbox_default = AutocompleteListbox;

// node_modules/@mui/joy/AutocompleteOption/AutocompleteOption.js
var React129 = __toESM(require_react());
var import_prop_types51 = __toESM(require_prop_types());

// node_modules/@mui/joy/AutocompleteOption/autocompleteOptionClasses.js
function getAutocompleteOptionUtilityClass(slot) {
  return generateUtilityClass2("MuiAutocompleteOption", slot);
}
var autocompleteOptionClasses = generateUtilityClasses2("MuiAutocompleteOption", ["root", "focused", "focusVisible", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var autocompleteOptionClasses_default = autocompleteOptionClasses;

// node_modules/@mui/joy/AutocompleteOption/AutocompleteOption.js
var import_jsx_runtime83 = __toESM(require_jsx_runtime());
var _excluded49 = ["children", "component", "color", "variant", "className", "slots", "slotProps"];
var useUtilityClasses40 = (ownerState) => {
  const {
    color,
    variant
  } = ownerState;
  const slots = {
    root: ["root", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`]
  };
  return composeClasses2(slots, getAutocompleteOptionUtilityClass, {});
};
var StyledAutocompleteOption = styled_default(StyledListItemButton)(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants2;
  return {
    '&[aria-disabled="true"]': (_theme$variants = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants[ownerState.color],
    '&[aria-selected="true"]': _extends({}, (_theme$variants2 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants2[ownerState.color], {
      fontWeight: theme.vars.fontWeight.md
    })
  };
});
var AutocompleteOptionRoot = styled_default(StyledAutocompleteOption, {
  name: "JoyAutocompleteOption",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({});
var AutocompleteOption = React129.forwardRef(function AutocompleteOption2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyAutocompleteOption"
  });
  const {
    children,
    component = "li",
    color: colorProp = "neutral",
    variant: variantProp = "plain",
    className,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded49);
  const {
    variant = variantProp,
    color = colorProp
  } = useVariantColor(inProps.variant, inProps.color);
  const ownerState = _extends({}, props, {
    component,
    color,
    variant
  });
  const classes = useUtilityClasses40(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: AutocompleteOptionRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      as: component,
      role: "option"
    }
  });
  return (0, import_jsx_runtime83.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? AutocompleteOption.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types51.default.node,
  /**
   * @ignore
   */
  className: import_prop_types51.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types51.default.oneOfType([import_prop_types51.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types51.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types51.default.elementType,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types51.default.shape({
    root: import_prop_types51.default.oneOfType([import_prop_types51.default.func, import_prop_types51.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types51.default.shape({
    root: import_prop_types51.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types51.default.oneOfType([import_prop_types51.default.arrayOf(import_prop_types51.default.oneOfType([import_prop_types51.default.func, import_prop_types51.default.object, import_prop_types51.default.bool])), import_prop_types51.default.func, import_prop_types51.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types51.default.oneOfType([import_prop_types51.default.oneOf(["contained", "light", "outlined", "text"]), import_prop_types51.default.string])
} : void 0;
var AutocompleteOption_default = AutocompleteOption;

// node_modules/@mui/joy/Autocomplete/Autocomplete.js
var import_jsx_runtime84 = __toESM(require_jsx_runtime());
var import_jsx_runtime85 = __toESM(require_jsx_runtime());
var _ClearIcon;
var _ArrowDropDownIcon;
var _excluded50 = ["aria-describedby", "aria-label", "aria-labelledby", "autoComplete", "autoHighlight", "autoSelect", "autoFocus", "blurOnSelect", "clearIcon", "clearOnBlur", "clearOnEscape", "clearText", "closeText", "defaultValue", "disableCloseOnSelect", "disabledItemsFocusable", "disableListWrap", "disableClearable", "disabled", "endDecorator", "error", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "getLimitTagsText", "getOptionDisabled", "getOptionKey", "getOptionLabel", "handleHomeEndKeys", "includeInputInList", "isOptionEqualToValue", "groupBy", "id", "inputValue", "limitTags", "loading", "loadingText", "multiple", "name", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "placeholder", "popupIcon", "readOnly", "renderGroup", "renderOption", "renderTags", "required", "type", "startDecorator", "size", "color", "variant", "value", "component", "selectOnFocus", "slots", "slotProps"];
var _excluded214 = ["onDelete"];
var _excluded310 = ["key"];
var _excluded410 = ["onBlur", "onFocus", "onMouseDown"];
var _excluded52 = ["key"];
var defaultIsActiveElementInListbox2 = (listboxRef) => listboxRef.current !== null && listboxRef.current.contains(document.activeElement);
var defaultGetOptionLabel = (option) => {
  var _option$label;
  return (_option$label = option.label) != null ? _option$label : option;
};
var defaultLimitTagsText = (more) => `+${more}`;
var defaultRenderGroup = (params) => (0, import_jsx_runtime85.jsxs)(ListItem_default, {
  nested: true,
  children: [(0, import_jsx_runtime84.jsx)(ListSubheader_default, {
    sticky: true,
    children: params.group
  }), (0, import_jsx_runtime84.jsx)(List_default, {
    children: params.children
  })]
}, params.key);
var useUtilityClasses41 = (ownerState) => {
  const {
    disabled,
    focused,
    hasClearIcon,
    hasPopupIcon,
    popupOpen,
    variant,
    color,
    size: size3,
    multiple
  } = ownerState;
  const slots = {
    root: ["root", focused && "focused", hasClearIcon && "hasClearIcon", hasPopupIcon && "hasPopupIcon", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`],
    wrapper: ["wrapper", multiple && "multiple"],
    input: ["input"],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"],
    clearIndicator: ["clearIndicator"],
    popupIndicator: ["popupIndicator", popupOpen && "popupIndicatorOpen", disabled && "disabled"],
    listbox: ["listbox"],
    option: ["option"],
    loading: ["loading"],
    noOptions: ["noOptions"],
    limitTag: ["limitTag"]
  };
  return composeClasses2(slots, getAutocompleteUtilityClass, {});
};
var AutocompleteRoot = styled_default(StyledInputRoot, {
  name: "JoyAutocomplete",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  ownerState
}) => _extends({}, ownerState.size === "sm" && {
  "--Autocomplete-wrapperGap": "3px"
}, ownerState.size === "md" && {
  "--Autocomplete-wrapperGap": "3px"
}, ownerState.size === "lg" && {
  "--Autocomplete-wrapperGap": "4px"
}, {
  /* Avoid double tap issue on iOS */
  "@media (pointer: fine)": {
    [`&:hover .${autocompleteClasses_default.clearIndicator}`]: {
      visibility: "visible"
    }
  }
}, ownerState.multiple && !ownerState.startDecorator && {
  paddingInlineStart: 0
}));
var AutocompleteWrapper = styled_default("div", {
  name: "JoyAutocomplete",
  slot: "Wrapper",
  overridesResolver: (props, styles2) => styles2.wrapper
})(({
  ownerState
}) => ({
  flex: 1,
  // stretch to fill the root slot
  minWidth: 0,
  // won't push end decorator out of the autocomplete
  display: "flex",
  alignItems: "center",
  flexWrap: "wrap",
  gap: "var(--Autocomplete-wrapperGap)",
  [`&.${autocompleteClasses_default.multiple}`]: _extends({
    paddingBlock: "var(--Autocomplete-wrapperGap)"
  }, !ownerState.startDecorator && {
    paddingInlineStart: "var(--Autocomplete-wrapperGap)"
  }, !ownerState.endDecorator && {
    paddingInlineEnd: "var(--Autocomplete-wrapperGap)"
  })
}));
var AutocompleteInput = styled_default(StyledInputHtml, {
  name: "JoyAutocomplete",
  slot: "Input",
  overridesResolver: (props, styles2) => styles2.input
})(({
  ownerState
}) => _extends({
  minWidth: 30,
  minHeight: "var(--Chip-minHeight)"
}, ownerState.multiple && {
  marginInlineStart: "calc(var(--Autocomplete-wrapperGap) * 2.5)"
}));
var AutocompleteStartDecorator = styled_default(StyledInputStartDecorator, {
  name: "JoyAutocomplete",
  slot: "StartDecorator",
  overridesResolver: (props, styles2) => styles2.startDecorator
})({});
var AutocompleteEndDecorator = styled_default(StyledInputEndDecorator, {
  name: "JoyAutocomplete",
  slot: "EndDecorator",
  overridesResolver: (props, styles2) => styles2.endDecorator
})(({
  ownerState
}) => _extends({}, (ownerState.hasClearIcon || ownerState.hasPopupIcon) && {
  "--Button-margin": "0px",
  "--IconButton-margin": "0px",
  "--Icon-margin": "0px"
}));
var AutocompleteClearIndicator = styled_default(StyledIconButton, {
  name: "JoyAutocomplete",
  slot: "ClearIndicator",
  overridesResolver: (props, styles2) => styles2.clearIndicator
})(({
  ownerState
}) => _extends({
  alignSelf: "center"
}, !ownerState.hasPopupIcon && {
  marginInlineEnd: "calc(var(--Input-decoratorChildOffset) * -1)"
}, {
  marginInlineStart: "calc(var(--_Input-paddingBlock) / 2)",
  visibility: ownerState.focused ? "visible" : "hidden"
}));
var AutocompletePopupIndicator = styled_default(StyledIconButton, {
  name: "JoyAutocomplete",
  slot: "PopupIndicator",
  overridesResolver: (props, styles2) => styles2.popupIndicator
})({
  alignSelf: "center",
  marginInlineStart: "calc(var(--_Input-paddingBlock) / 2)",
  marginInlineEnd: "calc(var(--Input-decoratorChildOffset) * -1)",
  [`&.${autocompleteClasses_default.popupIndicatorOpen}`]: {
    transform: "rotate(180deg)",
    "--Icon-color": "currentColor"
  }
});
var AutocompleteListbox3 = styled_default(StyledAutocompleteListbox, {
  name: "JoyAutocomplete",
  slot: "Listbox",
  overridesResolver: (props, styles2) => styles2.listbox
})(({
  theme
}) => ({
  // `unstable_popup-zIndex` is a private variable that lets other component, for example Modal, to override the z-index so that the listbox can be displayed above the Modal.
  zIndex: `var(--unstable_popup-zIndex, ${theme.vars.zIndex.popup})`
}));
var AutocompleteOption3 = styled_default(StyledAutocompleteOption, {
  name: "JoyAutocomplete",
  slot: "Option",
  overridesResolver: (props, styles2) => styles2.option
})({});
var AutocompleteLoading = styled_default(ListItem_default, {
  name: "JoyAutocomplete",
  slot: "Loading",
  overridesResolver: (props, styles2) => styles2.loading
})(({
  theme
}) => ({
  color: (theme.vars || theme).palette.text.secondary
}));
var AutocompleteNoOptions = styled_default(ListItem_default, {
  name: "JoyAutocomplete",
  slot: "NoOptions",
  overridesResolver: (props, styles2) => styles2.noOptions
})(({
  theme
}) => ({
  color: (theme.vars || theme).palette.text.secondary
}));
var AutocompleteLimitTag = styled_default("div", {
  name: "JoyAutocomplete",
  slot: "NoOptions",
  overridesResolver: (props, styles2) => styles2.noOptions
})({
  marginInlineStart: "calc(var(--Input-paddingInline) / 2)",
  marginBlockStart: "var(--_Input-paddingBlock)"
});
var Autocomplete = React130.forwardRef(function Autocomplete2(inProps, ref) {
  var _ref, _inProps$error, _ref2, _inProps$size, _inProps$color, _formControl$color, _ref3;
  const props = useThemeProps2({
    props: inProps,
    name: "JoyAutocomplete"
  });
  const {
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    autoFocus,
    clearIcon = _ClearIcon || (_ClearIcon = (0, import_jsx_runtime84.jsx)(Close_default, {
      fontSize: "md"
    })),
    clearText = "Clear",
    closeText = "Close",
    disableClearable = false,
    disabled: disabledProp,
    endDecorator,
    error: errorProp = false,
    forcePopupIcon = "auto",
    freeSolo = false,
    getLimitTagsText = defaultLimitTagsText,
    getOptionLabel = defaultGetOptionLabel,
    groupBy,
    id,
    limitTags = -1,
    loading = false,
    loadingText = "Loading…",
    multiple = false,
    name,
    noOptionsText = "No options",
    openText = "Open",
    placeholder,
    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = (0, import_jsx_runtime84.jsx)(ArrowDropDown_default, {})),
    readOnly = false,
    renderGroup = defaultRenderGroup,
    renderOption: renderOptionProp,
    renderTags,
    required,
    type,
    startDecorator,
    size: sizeProp = "md",
    color: colorProp = "neutral",
    variant = "outlined",
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded50);
  const formControl = React130.useContext(FormControlContext_default);
  const error = (_ref = (_inProps$error = inProps.error) != null ? _inProps$error : formControl == null ? void 0 : formControl.error) != null ? _ref : errorProp;
  const size3 = (_ref2 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref2 : sizeProp;
  const color = (_inProps$color = inProps.color) != null ? _inProps$color : error ? "danger" : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp;
  const disabled = (_ref3 = disabledProp != null ? disabledProp : formControl == null ? void 0 : formControl.disabled) != null ? _ref3 : false;
  const {
    getRootProps,
    getInputProps,
    getPopupIndicatorProps,
    getClearProps,
    getTagProps,
    getListboxProps,
    getOptionProps,
    value,
    dirty,
    popupOpen,
    focused,
    focusedTag,
    anchorEl,
    setAnchorEl,
    inputValue,
    groupedOptions
  } = useAutocomplete(_extends({}, props, {
    id: id != null ? id : formControl == null ? void 0 : formControl.htmlFor,
    componentName: "Autocomplete",
    unstable_classNamePrefix: "Mui",
    unstable_isActiveElementInListbox: defaultIsActiveElementInListbox2
  }));
  const {
    onMouseDown: handleInputMouseDown
  } = getInputProps();
  const {
    onClick: handleRootOnClick
  } = getRootProps();
  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;
  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;
  const ownerState = _extends({
    instanceColor: inProps.color
  }, props, {
    value,
    disabled,
    focused,
    getOptionLabel,
    hasOptions: !!groupedOptions.length,
    hasClearIcon,
    hasPopupIcon,
    inputFocused: focusedTag === -1,
    popupOpen,
    size: size3,
    color,
    variant
  });
  const classes = useUtilityClasses41(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  let selectedOptions;
  if (multiple && value.length > 0) {
    const getCustomizedTagProps = (params) => {
      const _getTagProps = getTagProps(params), {
        onDelete
      } = _getTagProps, tagProps = _objectWithoutPropertiesLoose(_getTagProps, _excluded214);
      return _extends({
        disabled,
        size: size3,
        onClick: onDelete
      }, tagProps);
    };
    if (renderTags) {
      selectedOptions = renderTags(value, getCustomizedTagProps, ownerState);
    } else {
      selectedOptions = value.map((option, index2) => {
        const _getCustomizedTagProp = getCustomizedTagProps({
          index: index2
        }), {
          key: endDecoratorKey
        } = _getCustomizedTagProp, endDecoratorProps2 = _objectWithoutPropertiesLoose(_getCustomizedTagProp, _excluded310);
        return (0, import_jsx_runtime84.jsx)(Chip_default, {
          size: size3,
          variant: "soft",
          color: "neutral",
          endDecorator: (0, import_jsx_runtime84.jsx)(ChipDelete_default, _extends({}, endDecoratorProps2), endDecoratorKey),
          sx: {
            minWidth: 0
          },
          children: getOptionLabel(option)
        }, index2);
      });
    }
  }
  const rootRef = useForkRef(ref, setAnchorEl);
  const rootStateClasses = {
    [autocompleteClasses_default.disabled]: disabled,
    [autocompleteClasses_default.error]: error,
    [autocompleteClasses_default.focused]: focused,
    [autocompleteClasses_default.formControl]: Boolean(formControl)
  };
  const [SlotRoot, rootProps] = useSlot("root", {
    ref: rootRef,
    className: [classes.root, rootStateClasses],
    elementType: AutocompleteRoot,
    externalForwardedProps,
    ownerState,
    getSlotProps: getRootProps,
    additionalProps: {
      onClick: (event) => {
        if (handleRootOnClick) {
          handleRootOnClick(event);
        }
        if (event.currentTarget === event.target && handleInputMouseDown) {
          handleInputMouseDown(event);
        }
      }
    }
  });
  const [SlotWrapper, wrapperProps] = useSlot("wrapper", {
    className: classes.wrapper,
    elementType: AutocompleteWrapper,
    externalForwardedProps,
    ownerState
  });
  const inputStateClasses = {
    [autocompleteClasses_default.disabled]: disabled
  };
  const [SlotInput, inputProps] = useSlot("input", {
    className: [classes.input, inputStateClasses],
    elementType: AutocompleteInput,
    getSlotProps: (handlers) => {
      const _getInputProps = getInputProps(), {
        onBlur,
        onFocus,
        onMouseDown
      } = _getInputProps, inputSlotProps = _objectWithoutPropertiesLoose(_getInputProps, _excluded410);
      return _extends({}, inputSlotProps, {
        onBlur: (event) => {
          var _handlers$onBlur;
          onBlur == null || onBlur(event);
          (_handlers$onBlur = handlers.onBlur) == null || _handlers$onBlur.call(handlers, event);
        },
        onFocus: (event) => {
          var _handlers$onFocus;
          onFocus == null || onFocus(event);
          (_handlers$onFocus = handlers.onFocus) == null || _handlers$onFocus.call(handlers, event);
        },
        onMouseDown: (event) => {
          var _handlers$onMouseDown;
          onMouseDown == null || onMouseDown(event);
          (_handlers$onMouseDown = handlers.onMouseDown) == null || _handlers$onMouseDown.call(handlers, event);
        }
      });
    },
    externalForwardedProps,
    ownerState,
    additionalProps: {
      autoFocus,
      placeholder,
      name,
      readOnly,
      disabled,
      required: required != null ? required : formControl == null ? void 0 : formControl.required,
      type,
      "aria-invalid": error || void 0,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledby,
      "aria-describedby": ariaDescribedby != null ? ariaDescribedby : formControl == null ? void 0 : formControl["aria-describedby"]
    }
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: AutocompleteStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: AutocompleteEndDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotClearIndicator, clearIndicatorProps] = useSlot("clearIndicator", {
    className: classes.clearIndicator,
    elementType: AutocompleteClearIndicator,
    getSlotProps: getClearProps,
    externalForwardedProps,
    ownerState,
    getSlotOwnerState: (mergedProps) => ({
      size: mergedProps.size || size3,
      variant: mergedProps.variant || getChildVariantAndColor(variant, color).variant || "plain",
      color: mergedProps.color || getChildVariantAndColor(variant, color).color || "neutral",
      disableColorInversion: !!inProps.color
    }),
    additionalProps: {
      "aria-label": clearText,
      title: clearText
    }
  });
  const [SlotPopupIndicator, popupIndicatorProps] = useSlot("popupIndicator", {
    className: classes.popupIndicator,
    elementType: AutocompletePopupIndicator,
    getSlotProps: getPopupIndicatorProps,
    externalForwardedProps,
    ownerState,
    getSlotOwnerState: (mergedProps) => ({
      size: mergedProps.size || size3,
      variant: mergedProps.variant || getChildVariantAndColor(variant, color).variant || "plain",
      color: mergedProps.color || getChildVariantAndColor(variant, color).color || "neutral",
      disableColorInversion: !!inProps.color
    }),
    additionalProps: {
      disabled,
      "aria-label": popupOpen ? closeText : openText,
      title: popupOpen ? closeText : openText,
      type: "button"
    }
  });
  const [SlotListbox, listboxProps] = useSlot("listbox", {
    className: classes.listbox,
    elementType: AutocompleteListbox3,
    getSlotProps: getListboxProps,
    externalForwardedProps,
    ownerState,
    getSlotOwnerState: (mergedProps) => ({
      size: mergedProps.size || size3,
      variant: mergedProps.variant || variant,
      color: mergedProps.color || color,
      disableColorInversion: !mergedProps.disablePortal
    }),
    additionalProps: {
      anchorEl,
      open: popupOpen,
      style: anchorEl ? {
        width: anchorEl.clientWidth
      } : {}
    }
  });
  const [SlotLoading, loadingProps] = useSlot("loading", {
    className: classes.loading,
    elementType: AutocompleteLoading,
    externalForwardedProps,
    ownerState
  });
  const [SlotNoOptions, noOptionsProps] = useSlot("noOptions", {
    className: classes.noOptions,
    elementType: AutocompleteNoOptions,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      role: "presentation",
      onMouseDown: (event) => {
        event.preventDefault();
      }
    }
  });
  const [SlotLimitTag, limitTagProps] = useSlot("limitTag", {
    className: classes.limitTag,
    elementType: AutocompleteLimitTag,
    externalForwardedProps,
    ownerState
  });
  if (limitTags > -1 && Array.isArray(selectedOptions)) {
    const more = selectedOptions.length - limitTags;
    if (!focused && more > 0) {
      selectedOptions = selectedOptions.splice(0, limitTags);
      selectedOptions.push((0, import_jsx_runtime84.jsx)(SlotLimitTag, _extends({}, limitTagProps, {
        children: getLimitTagsText(more)
      }), selectedOptions.length));
    }
  }
  const [SlotOption, baseOptionProps] = useSlot("option", {
    className: classes.option,
    elementType: AutocompleteOption3,
    externalForwardedProps,
    ownerState,
    getSlotOwnerState: (mergedProps) => ({
      variant: mergedProps.variant || getChildVariantAndColor(variant, color).variant || "plain",
      color: mergedProps.color || getChildVariantAndColor(variant, color).color || "neutral",
      disableColorInversion: !listboxProps.disablePortal
    }),
    additionalProps: {
      as: "li"
    }
  });
  const defaultRenderOption = (optionProps, option) => {
    const {
      key
    } = optionProps, rest = _objectWithoutPropertiesLoose(optionProps, _excluded52);
    return (0, import_jsx_runtime84.jsx)(SlotOption, _extends({}, rest, {
      children: getOptionLabel(option)
    }), key);
  };
  const renderOption = renderOptionProp || defaultRenderOption;
  const renderListOption = (option, index2) => {
    const optionProps = getOptionProps({
      option,
      index: index2
    });
    return renderOption(_extends({}, baseOptionProps, optionProps), option, {
      // `aria-selected` prop will always by boolean, see useAutocomplete hook.
      selected: !!optionProps["aria-selected"],
      inputValue,
      ownerState
    });
  };
  const modifiers = React130.useMemo(() => [{
    name: "offset",
    options: {
      offset: [0, 4]
    }
  }, ...listboxProps.modifiers || []], [listboxProps.modifiers]);
  let popup = null;
  if (anchorEl) {
    var _props$slots;
    popup = (0, import_jsx_runtime84.jsx)(VariantColorProvider, {
      variant,
      color,
      children: (0, import_jsx_runtime84.jsx)(ListProvider_default, {
        nested: true,
        children: (0, import_jsx_runtime85.jsxs)(SlotListbox, _extends({}, listboxProps, {
          className: clsx_default(listboxProps.className),
          modifiers
        }, !((_props$slots = props.slots) != null && _props$slots.listbox) && {
          as: Popper,
          slots: {
            root: listboxProps.as || "ul"
          }
        }, {
          children: [groupedOptions.map((option, index2) => {
            if (groupBy) {
              const typedOption = option;
              return renderGroup({
                key: String(typedOption.key),
                group: typedOption.group,
                children: typedOption.options.map((option2, index22) => renderListOption(option2, typedOption.index + index22))
              });
            }
            return renderListOption(option, index2);
          }), loading && groupedOptions.length === 0 ? (0, import_jsx_runtime84.jsx)(SlotLoading, _extends({}, loadingProps, {
            children: loadingText
          })) : null, groupedOptions.length === 0 && !freeSolo && !loading ? (0, import_jsx_runtime84.jsx)(SlotNoOptions, _extends({}, noOptionsProps, {
            children: noOptionsText
          })) : null]
        }))
      })
    });
  }
  return (0, import_jsx_runtime85.jsxs)(React130.Fragment, {
    children: [(0, import_jsx_runtime85.jsxs)(SlotRoot, _extends({}, rootProps, {
      children: [startDecorator && (0, import_jsx_runtime84.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
        children: startDecorator
      })), (0, import_jsx_runtime85.jsxs)(SlotWrapper, _extends({}, wrapperProps, {
        children: [selectedOptions, (0, import_jsx_runtime84.jsx)(SlotInput, _extends({}, inputProps))]
      })), endDecorator && (0, import_jsx_runtime84.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
        children: endDecorator
      })), hasClearIcon ? (0, import_jsx_runtime84.jsx)(SlotClearIndicator, _extends({}, clearIndicatorProps, {
        children: clearIcon
      })) : null, hasPopupIcon ? (0, import_jsx_runtime84.jsx)(SlotPopupIndicator, _extends({}, popupIndicatorProps, {
        children: popupIcon
      })) : null]
    })), popup]
  });
});
true ? Autocomplete.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Identifies the element (or elements) that describes the object.
   * @see aria-labelledby
   */
  "aria-describedby": import_prop_types52.default.string,
  /**
   * Defines a string value that labels the current element.
   * @see aria-labelledby.
   */
  "aria-label": import_prop_types52.default.string,
  /**
   * Identifies the element (or elements) that labels the current element.
   * @see aria-describedby.
   */
  "aria-labelledby": import_prop_types52.default.string,
  /**
   * If `true`, the portion of the selected suggestion that the user hasn't typed,
   * known as the completion string, appears inline after the input cursor in the textbox.
   * The inline completion string is visually highlighted and has a selected state.
   * @default false
   */
  autoComplete: import_prop_types52.default.bool,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: import_prop_types52.default.bool,
  /**
   * If `true`, the first option is automatically highlighted.
   * @default false
   */
  autoHighlight: import_prop_types52.default.bool,
  /**
   * If `true`, the selected option becomes the value of the input
   * when the Autocomplete loses focus unless the user chooses
   * a different option or changes the character string in the input.
   *
   * When using the `freeSolo` mode, the typed value will be the input value
   * if the Autocomplete loses focus without highlighting an option.
   * @default false
   */
  autoSelect: import_prop_types52.default.bool,
  /**
   * Control if the input should be blurred when an option is selected:
   *
   * - `false` the input is not blurred.
   * - `true` the input is always blurred.
   * - `touch` the input is blurred after a touch event.
   * - `mouse` the input is blurred after a mouse event.
   * @default false
   */
  blurOnSelect: import_prop_types52.default.oneOfType([import_prop_types52.default.oneOf(["mouse", "touch"]), import_prop_types52.default.bool]),
  /**
   * The icon to display in place of the default clear icon.
   * @default <ClearIcon fontSize="md" />
   */
  clearIcon: import_prop_types52.default.node,
  /**
   * If `true`, the input's text is cleared on blur if no value is selected.
   *
   * Set it to `true` if you want to help the user enter a new value.
   * Set it to `false` if you want to help the user resume their search.
   * @default !props.freeSolo
   */
  clearOnBlur: import_prop_types52.default.bool,
  /**
   * If `true`, clear all values when the user presses escape and the popup is closed.
   * @default false
   */
  clearOnEscape: import_prop_types52.default.bool,
  /**
   * Override the default text for the *clear* icon button.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Clear'
   */
  clearText: import_prop_types52.default.string,
  /**
   * Override the default text for the *close popup* icon button.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Close'
   */
  closeText: import_prop_types52.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types52.default.oneOf(["danger", "neutral", "primary", "success", "warning"]),
  /**
   * The default value. Use when the component is not controlled.
   * @default props.multiple ? [] : null
   */
  defaultValue: chainPropTypes(import_prop_types52.default.any, (props) => {
    if (props.multiple && props.defaultValue !== void 0 && !Array.isArray(props.defaultValue)) {
      return new Error(["MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.", `However, ${props.defaultValue} was provided.`].join("\n"));
    }
    return null;
  }),
  /**
   * If `true`, the input can't be cleared.
   * @default false
   */
  disableClearable: import_prop_types52.default.bool,
  /**
   * If `true`, the popup won't close when a value is selected.
   * @default false
   */
  disableCloseOnSelect: import_prop_types52.default.bool,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types52.default.bool,
  /**
   * If `true`, will allow focus on disabled items.
   * @default false
   */
  disabledItemsFocusable: import_prop_types52.default.bool,
  /**
   * If `true`, the list box in the popup will not wrap focus.
   * @default false
   */
  disableListWrap: import_prop_types52.default.bool,
  /**
   * Trailing adornment for this input.
   */
  endDecorator: import_prop_types52.default.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   * @default false
   */
  error: import_prop_types52.default.bool,
  /**
   * A function that determines the filtered options to be rendered on search.
   *
   * @default createFilterOptions()
   * @param {Value[]} options The options to render.
   * @param {object} state The state of the component.
   * @returns {Value[]}
   */
  filterOptions: import_prop_types52.default.func,
  /**
   * If `true`, hide the selected options from the list box.
   * @default false
   */
  filterSelectedOptions: import_prop_types52.default.bool,
  /**
   * Force the visibility display of the popup icon.
   * @default 'auto'
   */
  forcePopupIcon: import_prop_types52.default.oneOfType([import_prop_types52.default.oneOf(["auto"]), import_prop_types52.default.bool]),
  /**
   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.
   * @default false
   */
  freeSolo: import_prop_types52.default.bool,
  /**
   * The label to display when the tags are truncated (`limitTags`).
   *
   * @param {string | number} more The number of truncated tags.
   * @returns {ReactNode}
   * @default (more: string | number) => `+${more}`
   */
  getLimitTagsText: import_prop_types52.default.func,
  /**
   * Used to determine the disabled state for a given option.
   *
   * @param {Value} option The option to test.
   * @returns {boolean}
   */
  getOptionDisabled: import_prop_types52.default.func,
  /**
   * Used to determine the key for a given option.
   * This can be useful when the labels of options are not unique (since labels are used as keys by default).
   *
   * @param {Value} option The option to get the key for.
   * @returns {string | number}
   */
  getOptionKey: import_prop_types52.default.func,
  /**
   * Used to determine the string value for a given option.
   * It's used to fill the input (and the list box options if `renderOption` is not provided).
   *
   * If used in free solo mode, it must accept both the type of the options and a string.
   *
   * @param {Value} option
   * @returns {string}
   * @default (option) => option.label ?? option
   */
  getOptionLabel: import_prop_types52.default.func,
  /**
   * If provided, the options will be grouped under the returned string.
   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.
   *
   * @param {Value} options The options to group.
   * @returns {string}
   */
  groupBy: import_prop_types52.default.func,
  /**
   * If `true`, the component handles the "Home" and "End" keys when the popup is open.
   * It should move focus to the first option and last option, respectively.
   * @default !props.freeSolo
   */
  handleHomeEndKeys: import_prop_types52.default.bool,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide an id it will fall back to a randomly generated one.
   */
  id: import_prop_types52.default.string,
  /**
   * If `true`, the highlight can move to the input.
   * @default false
   */
  includeInputInList: import_prop_types52.default.bool,
  /**
   * The input value.
   */
  inputValue: import_prop_types52.default.string,
  /**
   * Used to determine if the option represents the given value.
   * Uses strict equality by default.
   * ⚠️ Both arguments need to be handled, an option can only match with one value.
   *
   * @param {Value} option The option to test.
   * @param {Value} value The value to test against.
   * @returns {boolean}
   */
  isOptionEqualToValue: import_prop_types52.default.func,
  /**
   * The maximum number of tags that will be visible when not focused.
   * Set `-1` to disable the limit.
   * @default -1
   */
  limitTags: integerPropType_default,
  /**
   * If `true`, the component is in a loading state.
   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).
   * @default false
   */
  loading: import_prop_types52.default.bool,
  /**
   * Text to display when in a loading state.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Loading…'
   */
  loadingText: import_prop_types52.default.node,
  /**
   * If `true`, `value` must be an array and the menu will support multiple selections.
   * @default false
   */
  multiple: import_prop_types52.default.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: import_prop_types52.default.string,
  /**
   * Text to display when there are no options.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'No options'
   */
  noOptionsText: import_prop_types52.default.node,
  /**
   * Callback fired when the value changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {Value|Value[]} value The new value of the component.
   * @param {string} reason One of "createOption", "selectOption", "removeOption", "blur" or "clear".
   * @param {string} [details]
   */
  onChange: import_prop_types52.default.func,
  /**
   * Callback fired when the popup requests to be closed.
   * Use in controlled mode (see open).
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {string} reason Can be: `"toggleInput"`, `"escape"`, `"selectOption"`, `"removeOption"`, `"blur"`.
   */
  onClose: import_prop_types52.default.func,
  /**
   * Callback fired when the highlight option changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {Value} option The highlighted option.
   * @param {string} reason Can be: `"keyboard"`, `"auto"`, `"mouse"`, `"touch"`.
   */
  onHighlightChange: import_prop_types52.default.func,
  /**
   * Callback fired when the input value changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {string} value The new value of the text input.
   * @param {string} reason Can be: `"input"` (user input), `"reset"` (programmatic change), `"clear"`.
   */
  onInputChange: import_prop_types52.default.func,
  /**
   * @ignore
   */
  onKeyDown: import_prop_types52.default.func,
  /**
   * Callback fired when the popup requests to be opened.
   * Use in controlled mode (see open).
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onOpen: import_prop_types52.default.func,
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types52.default.bool,
  /**
   * If `true`, the popup will open on input focus.
   * @default false
   */
  openOnFocus: import_prop_types52.default.bool,
  /**
   * Override the default text for the *open popup* icon button.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Open'
   */
  openText: import_prop_types52.default.string,
  /**
   * Array of options.
   */
  options: import_prop_types52.default.array.isRequired,
  /**
   * The input placeholder
   */
  placeholder: import_prop_types52.default.string,
  /**
   * The icon to display in place of the default popup icon.
   * @default <ArrowDropDownIcon />
   */
  popupIcon: import_prop_types52.default.node,
  /**
   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.
   * @default false
   */
  readOnly: import_prop_types52.default.bool,
  /**
   * Render the group.
   *
   * @param {AutocompleteRenderGroupParams} params The group to render.
   * @returns {ReactNode}
   */
  renderGroup: import_prop_types52.default.func,
  /**
   * Render the option, use `getOptionLabel` by default.
   *
   * @param {object} props The props to apply on the li element.
   * @param {T} option The option to render.
   * @param {object} state The state of the component.
   * @returns {ReactNode}
   */
  renderOption: import_prop_types52.default.func,
  /**
   * Render the selected value.
   *
   * @param {T[]} value The `value` provided to the component.
   * @param {function} getTagProps A tag props getter.
   * @param {object} ownerState The state of the Autocomplete component.
   * @returns {ReactNode}
   */
  renderTags: import_prop_types52.default.func,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: import_prop_types52.default.bool,
  /**
   * If `true`, the input's text is selected on focus.
   * It helps the user clear the selected value.
   * @default !props.freeSolo
   */
  selectOnFocus: import_prop_types52.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types52.default.oneOfType([import_prop_types52.default.oneOf(["sm", "md", "lg"]), import_prop_types52.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types52.default.shape({
    clearIndicator: import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object]),
    endDecorator: import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object]),
    input: import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object]),
    limitTag: import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object]),
    listbox: import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object]),
    loading: import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object]),
    noOptions: import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object]),
    option: import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object]),
    popupIndicator: import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object]),
    root: import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object]),
    startDecorator: import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object]),
    wrapper: import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types52.default.shape({
    clearIndicator: import_prop_types52.default.elementType,
    endDecorator: import_prop_types52.default.elementType,
    input: import_prop_types52.default.elementType,
    limitTag: import_prop_types52.default.elementType,
    listbox: import_prop_types52.default.elementType,
    loading: import_prop_types52.default.elementType,
    noOptions: import_prop_types52.default.elementType,
    option: import_prop_types52.default.elementType,
    popupIndicator: import_prop_types52.default.elementType,
    root: import_prop_types52.default.elementType,
    startDecorator: import_prop_types52.default.elementType,
    wrapper: import_prop_types52.default.elementType
  }),
  /**
   * Leading adornment for this input.
   */
  startDecorator: import_prop_types52.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types52.default.oneOfType([import_prop_types52.default.arrayOf(import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object, import_prop_types52.default.bool])), import_prop_types52.default.func, import_prop_types52.default.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   */
  type: import_prop_types52.default.string,
  /**
   * The value of the autocomplete.
   *
   * The value must have reference equality with the option in order to be selected.
   * You can customize the equality behavior with the `isOptionEqualToValue` prop.
   */
  value: chainPropTypes(import_prop_types52.default.any, (props) => {
    if (props.multiple && props.value !== void 0 && !Array.isArray(props.value)) {
      return new Error(["MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.", `However, ${props.value} was provided.`].join("\n"));
    }
    return null;
  }),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types52.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var Autocomplete_default = Autocomplete;

// node_modules/@mui/joy/Avatar/Avatar.js
var React133 = __toESM(require_react());
var import_prop_types54 = __toESM(require_prop_types());

// node_modules/@mui/joy/internal/svg-icons/Person.js
var React131 = __toESM(require_react());
var import_jsx_runtime86 = __toESM(require_jsx_runtime());
var Person_default = createSvgIcon((0, import_jsx_runtime86.jsx)("path", {
  d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
}), "Person");

// node_modules/@mui/joy/Avatar/avatarClasses.js
function getAvatarUtilityClass(slot) {
  return generateUtilityClass2("MuiAvatar", slot);
}
var avatarClasses = generateUtilityClasses2("MuiAvatar", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "fallback", "sizeSm", "sizeMd", "sizeLg", "img", "variantOutlined", "variantSoft", "variantSolid"]);
var avatarClasses_default = avatarClasses;

// node_modules/@mui/joy/AvatarGroup/AvatarGroup.js
var React132 = __toESM(require_react());
var import_prop_types53 = __toESM(require_prop_types());

// node_modules/@mui/joy/AvatarGroup/avatarGroupClasses.js
function getAvatarGroupUtilityClass(slot) {
  return generateUtilityClass2("MuiAvatarGroup", slot);
}
var avatarGroupClasses = generateUtilityClasses2("MuiAvatarGroup", ["root"]);
var avatarGroupClasses_default = avatarGroupClasses;

// node_modules/@mui/joy/AvatarGroup/AvatarGroup.js
var import_jsx_runtime87 = __toESM(require_jsx_runtime());
var _excluded51 = ["className", "color", "component", "size", "variant", "children", "slots", "slotProps"];
var AvatarGroupContext = React132.createContext(void 0);
if (true) {
  AvatarGroupContext.displayName = "AvatarGroupContext";
}
var useUtilityClasses42 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses2(slots, getAvatarGroupUtilityClass, {});
};
var AvatarGroupGroupRoot = styled_default("div", {
  name: "JoyAvatarGroup",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  ownerState,
  theme
}) => _extends({}, ownerState.size === "sm" && {
  "--AvatarGroup-gap": "-0.375rem",
  "--Avatar-ringSize": "2px"
}, ownerState.size === "md" && {
  "--AvatarGroup-gap": "-0.5rem",
  "--Avatar-ringSize": "2px"
}, ownerState.size === "lg" && {
  "--AvatarGroup-gap": "-0.625rem",
  "--Avatar-ringSize": "4px"
}, {
  "--Avatar-ring": `0 0 0 var(--Avatar-ringSize) var(--Avatar-ringColor, ${theme.vars.palette.background.surface})`,
  "--Avatar-marginInlineStart": "var(--AvatarGroup-gap)",
  display: "flex",
  marginInlineStart: "calc(-1 * var(--AvatarGroup-gap))"
}));
var AvatarGroup = React132.forwardRef(function AvatarGroup2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyAvatarGroup"
  });
  const {
    className,
    color,
    component = "div",
    size: size3 = "md",
    variant,
    children,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded51);
  const ownerState = React132.useMemo(() => _extends({}, props, {
    color,
    component,
    size: size3,
    variant
  }), [color, component, props, size3, variant]);
  const classes = useUtilityClasses42();
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: AvatarGroupGroupRoot,
    externalForwardedProps: _extends({}, other, {
      component,
      slots,
      slotProps
    }),
    ownerState
  });
  return (0, import_jsx_runtime87.jsx)(AvatarGroupContext.Provider, {
    value: ownerState,
    children: (0, import_jsx_runtime87.jsx)(SlotRoot, _extends({}, rootProps, {
      children
    }))
  });
});
true ? AvatarGroup.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the AvatarGroup if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types53.default.node,
  /**
   * @ignore
   */
  className: import_prop_types53.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types53.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types53.default.elementType,
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["lg", "md", "sm"]), import_prop_types53.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types53.default.shape({
    root: import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types53.default.shape({
    root: import_prop_types53.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'soft'
   */
  variant: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types53.default.string])
} : void 0;
var AvatarGroup_default = AvatarGroup;

// node_modules/@mui/joy/Avatar/Avatar.js
var import_jsx_runtime88 = __toESM(require_jsx_runtime());
var _excluded53 = ["alt", "color", "size", "variant", "src", "srcSet", "children", "component", "slots", "slotProps"];
var useUtilityClasses43 = (ownerState) => {
  const {
    size: size3,
    variant,
    color,
    src,
    srcSet
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`],
    img: [(src || srcSet) && "img"],
    fallback: ["fallback"]
  };
  return composeClasses2(slots, getAvatarUtilityClass, {});
};
var AvatarRoot = styled_default("div", {
  name: "JoyAvatar",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return _extends({
    "--Icon-color": ownerState.color !== "neutral" || ownerState.variant === "solid" ? "currentColor" : theme.vars.palette.text.icon
  }, theme.typography[`title-${ownerState.size}`], ownerState.size === "sm" && {
    width: `var(--Avatar-size, 2rem)`,
    height: `var(--Avatar-size, 2rem)`,
    fontSize: `calc(var(--Avatar-size, 2rem) * 0.4375)`
    // default as 14px
  }, ownerState.size === "md" && {
    width: `var(--Avatar-size, 2.5rem)`,
    height: `var(--Avatar-size, 2.5rem)`,
    fontSize: `calc(var(--Avatar-size, 2.5rem) * 0.4)`
    // default as 16px
  }, ownerState.size === "lg" && {
    width: `var(--Avatar-size, 3rem)`,
    height: `var(--Avatar-size, 3rem)`,
    fontSize: `calc(var(--Avatar-size, 3rem) * 0.375)`
    // default as 18px
  }, {
    marginInlineStart: "var(--Avatar-marginInlineStart)",
    boxShadow: `var(--Avatar-ring)`,
    position: "relative",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0,
    lineHeight: 1,
    overflow: "hidden",
    borderRadius: "var(--Avatar-radius, 50%)",
    userSelect: "none"
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
var AvatarImg = styled_default("img", {
  name: "JoyAvatar",
  slot: "Img",
  overridesResolver: (props, styles2) => styles2.img
})({
  width: "100%",
  height: "100%",
  textAlign: "center",
  // Handle non-square image. The property isn't supported by IE11.
  objectFit: "cover",
  // Hide alt text.
  color: "transparent",
  // Hide the image broken icon, only works on Chrome.
  textIndent: 1e4
});
var AvatarFallback = styled_default(Person_default, {
  name: "JoyAvatar",
  slot: "Fallback",
  overridesResolver: (props, styles2) => styles2.fallback
})({
  width: "64%",
  height: "64%"
});
function useLoaded({
  crossOrigin,
  referrerPolicy,
  src,
  srcSet
}) {
  const [loaded, setLoaded] = React133.useState(false);
  React133.useEffect(() => {
    if (!src && !srcSet) {
      return void 0;
    }
    setLoaded(false);
    let active = true;
    const image = new Image();
    image.onload = () => {
      if (!active) {
        return;
      }
      setLoaded("loaded");
    };
    image.onerror = () => {
      if (!active) {
        return;
      }
      setLoaded("error");
    };
    image.crossOrigin = crossOrigin;
    image.referrerPolicy = referrerPolicy;
    if (src) {
      image.src = src;
    }
    if (srcSet) {
      image.srcset = srcSet;
    }
    return () => {
      active = false;
    };
  }, [crossOrigin, referrerPolicy, src, srcSet]);
  return loaded;
}
var Avatar = React133.forwardRef(function Avatar2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyAvatar"
  });
  const groupContext = React133.useContext(AvatarGroupContext);
  const {
    alt,
    color: colorProp = "neutral",
    size: sizeProp = "md",
    variant: variantProp = "soft",
    src,
    srcSet,
    children: childrenProp,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded53);
  const variant = inProps.variant || (groupContext == null ? void 0 : groupContext.variant) || variantProp;
  const color = inProps.color || (groupContext == null ? void 0 : groupContext.color) || colorProp;
  const size3 = inProps.size || (groupContext == null ? void 0 : groupContext.size) || sizeProp;
  let children = null;
  const ownerState = _extends({}, props, {
    color,
    size: size3,
    variant,
    grouped: !!groupContext
  });
  const classes = useUtilityClasses43(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: AvatarRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotImg, imageProps] = useSlot("img", {
    additionalProps: {
      alt,
      src,
      srcSet
    },
    className: classes.img,
    elementType: AvatarImg,
    externalForwardedProps,
    ownerState
  });
  const [SlotFallback, fallbackProps] = useSlot("fallback", {
    className: classes.fallback,
    elementType: AvatarFallback,
    externalForwardedProps,
    ownerState
  });
  const loaded = useLoaded(_extends({}, imageProps, {
    src,
    srcSet
  }));
  const hasImg = src || srcSet;
  const hasImgNotFailing = hasImg && loaded !== "error";
  if (hasImgNotFailing) {
    children = (0, import_jsx_runtime88.jsx)(SlotImg, _extends({}, imageProps));
  } else if (childrenProp != null) {
    children = childrenProp;
  } else if (alt) {
    children = alt[0];
  } else {
    children = (0, import_jsx_runtime88.jsx)(SlotFallback, _extends({}, fallbackProps));
  }
  return (0, import_jsx_runtime88.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? Avatar.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used in combination with `src` or `srcSet` to
   * provide an alt attribute for the rendered `img` element.
   */
  alt: import_prop_types54.default.string,
  /**
   * Used to render icon or text elements inside the Avatar if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types54.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types54.default.oneOfType([import_prop_types54.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types54.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types54.default.elementType,
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types54.default.oneOfType([import_prop_types54.default.oneOf(["lg", "md", "sm"]), import_prop_types54.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types54.default.shape({
    fallback: import_prop_types54.default.oneOfType([import_prop_types54.default.func, import_prop_types54.default.object]),
    img: import_prop_types54.default.oneOfType([import_prop_types54.default.func, import_prop_types54.default.object]),
    root: import_prop_types54.default.oneOfType([import_prop_types54.default.func, import_prop_types54.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types54.default.shape({
    fallback: import_prop_types54.default.elementType,
    img: import_prop_types54.default.elementType,
    root: import_prop_types54.default.elementType
  }),
  /**
   * The `src` attribute for the `img` element.
   */
  src: import_prop_types54.default.string,
  /**
   * The `srcSet` attribute for the `img` element.
   * Use this attribute for responsive image display.
   */
  srcSet: import_prop_types54.default.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types54.default.oneOfType([import_prop_types54.default.arrayOf(import_prop_types54.default.oneOfType([import_prop_types54.default.func, import_prop_types54.default.object, import_prop_types54.default.bool])), import_prop_types54.default.func, import_prop_types54.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'soft'
   */
  variant: import_prop_types54.default.oneOfType([import_prop_types54.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types54.default.string])
} : void 0;
var Avatar_default = Avatar;

// node_modules/@mui/joy/Badge/Badge.js
var React134 = __toESM(require_react());
var import_prop_types55 = __toESM(require_prop_types());

// node_modules/@mui/joy/Badge/badgeClasses.js
function getBadgeUtilityClass2(slot) {
  return generateUtilityClass2("MuiBadge", slot);
}
var badgeClasses2 = generateUtilityClasses2("MuiBadge", ["root", "badge", "anchorOriginTopRight", "anchorOriginBottomRight", "anchorOriginTopLeft", "anchorOriginBottomLeft", "colorPrimary", "colorDanger", "colorNeutral", "colorSuccess", "colorWarning", "colorContext", "invisible", "locationInside", "locationOutside", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var badgeClasses_default = badgeClasses2;

// node_modules/@mui/joy/Badge/Badge.js
var import_jsx_runtime89 = __toESM(require_jsx_runtime());
var import_jsx_runtime90 = __toESM(require_jsx_runtime());
var _excluded54 = ["anchorOrigin", "badgeInset", "children", "size", "color", "invisible", "max", "badgeContent", "showZero", "variant", "component", "slots", "slotProps"];
var useUtilityClasses44 = (ownerState) => {
  const {
    color,
    variant,
    size: size3,
    anchorOrigin,
    invisible
  } = ownerState;
  const slots = {
    root: ["root"],
    badge: ["badge", invisible && "invisible", anchorOrigin && `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`]
  };
  return composeClasses2(slots, getBadgeUtilityClass2, {});
};
var BadgeRoot = styled_default("span", {
  name: "JoyBadge",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => _extends({}, ownerState.size === "sm" && _extends({
  "--Badge-minHeight": "0.5rem"
}, ownerState.badgeContent && {
  "--Badge-minHeight": "1rem"
}, {
  "--Badge-paddingX": "0.25rem"
}), ownerState.size === "md" && _extends({
  "--Badge-minHeight": "0.75rem"
}, ownerState.badgeContent && {
  "--Badge-minHeight": "1.25rem"
}, {
  "--Badge-paddingX": "0.375rem"
}), ownerState.size === "lg" && _extends({
  "--Badge-minHeight": "1rem"
}, ownerState.badgeContent && {
  "--Badge-minHeight": "1.5rem"
}, {
  "--Badge-paddingX": "0.5rem"
}), {
  "--Badge-ringSize": "2px",
  "--Badge-ring": `0 0 0 var(--Badge-ringSize) var(--Badge-ringColor, ${theme.vars.palette.background.surface})`,
  position: "relative",
  display: "inline-flex",
  // For correct alignment with the text.
  verticalAlign: "middle",
  flexShrink: 0
}));
var BadgeBadge = styled_default("span", {
  name: "JoyBadge",
  slot: "Badge",
  overridesResolver: (props, styles2) => styles2.badge
})(({
  theme,
  ownerState
}) => {
  var _ownerState$anchorOri, _ownerState$anchorOri2, _ownerState$anchorOri3, _ownerState$anchorOri4, _typography$lineHeigh, _theme$variants;
  const inset = {
    top: ownerState.badgeInset,
    left: ownerState.badgeInset,
    bottom: ownerState.badgeInset,
    right: ownerState.badgeInset
  };
  if (typeof ownerState.badgeInset === "string") {
    const insetValues = ownerState.badgeInset.split(" ");
    if (insetValues.length > 1) {
      inset.top = insetValues[0];
      inset.right = insetValues[1];
      if (insetValues.length === 2) {
        inset.bottom = insetValues[0];
        inset.left = insetValues[1];
      }
      if (insetValues.length === 3) {
        inset.left = insetValues[1];
        inset.bottom = insetValues[2];
      }
      if (insetValues.length === 4) {
        inset.bottom = insetValues[2];
        inset.left = insetValues[3];
      }
    }
  }
  const translateY = ((_ownerState$anchorOri = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri.vertical) === "top" ? "translateY(-50%)" : "translateY(50%)";
  const translateX = ((_ownerState$anchorOri2 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri2.horizontal) === "left" ? "translateX(-50%)" : "translateX(50%)";
  const transformOriginY = ((_ownerState$anchorOri3 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri3.vertical) === "top" ? "0%" : "100%";
  const transformOriginX = ((_ownerState$anchorOri4 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri4.horizontal) === "left" ? "0%" : "100%";
  const typography = theme.typography[`body-${{
    sm: "xs",
    md: "sm",
    lg: "md"
  }[ownerState.size]}`];
  return _extends({
    "--Icon-color": "currentColor",
    "--Icon-fontSize": `calc(1em * ${(_typography$lineHeigh = typography == null ? void 0 : typography.lineHeight) != null ? _typography$lineHeigh : "1"})`,
    display: "inline-flex",
    flexWrap: "wrap",
    justifyContent: "center",
    alignContent: "center",
    alignItems: "center",
    position: "absolute",
    boxSizing: "border-box",
    boxShadow: "var(--Badge-ring)",
    lineHeight: 1,
    padding: "0 calc(var(--Badge-paddingX) - var(--variant-borderWidth, 0px))",
    minHeight: "var(--Badge-minHeight)",
    minWidth: "var(--Badge-minHeight)",
    borderRadius: "var(--Badge-radius, var(--Badge-minHeight))",
    zIndex: theme.vars.zIndex.badge,
    backgroundColor: theme.vars.palette.background.surface,
    [ownerState.anchorOrigin.vertical]: inset[ownerState.anchorOrigin.vertical],
    [ownerState.anchorOrigin.horizontal]: inset[ownerState.anchorOrigin.horizontal],
    transform: `scale(1) ${translateX} ${translateY}`,
    transformOrigin: `${transformOriginX} ${transformOriginY}`,
    [`&.${badgeClasses_default.invisible}`]: {
      transform: `scale(0) ${translateX} ${translateY}`
    }
  }, typography, {
    fontWeight: theme.vars.fontWeight.md
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
var Badge3 = React134.forwardRef(function Badge4(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyBadge"
  });
  const {
    anchorOrigin: anchorOriginProp = {
      vertical: "top",
      horizontal: "right"
    },
    badgeInset: badgeInsetProp = 0,
    children,
    size: sizeProp = "md",
    color: colorProp = "primary",
    invisible: invisibleProp = false,
    max: max2 = 99,
    badgeContent: badgeContentProp = "",
    showZero = false,
    variant: variantProp = "solid",
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded54);
  const prevProps = usePreviousProps_default({
    anchorOrigin: anchorOriginProp,
    size: sizeProp,
    badgeInset: badgeInsetProp,
    color: colorProp,
    variant: variantProp
  });
  let invisible = invisibleProp;
  if (invisibleProp === false && (badgeContentProp === 0 && !showZero || badgeContentProp == null)) {
    invisible = true;
  }
  const {
    color = colorProp,
    size: size3 = sizeProp,
    anchorOrigin = anchorOriginProp,
    variant = variantProp,
    badgeInset = badgeInsetProp
  } = invisible ? prevProps : props;
  const ownerState = _extends({}, props, {
    anchorOrigin,
    badgeInset,
    variant,
    invisible,
    color,
    size: size3
  });
  const classes = useUtilityClasses44(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  let displayValue = badgeContentProp && Number(badgeContentProp) > max2 ? `${max2}+` : badgeContentProp;
  if (invisible && badgeContentProp === 0) {
    displayValue = "";
  }
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: BadgeRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotBadge, badgeProps] = useSlot("badge", {
    className: classes.badge,
    elementType: BadgeBadge,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime90.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [children, (0, import_jsx_runtime89.jsx)(SlotBadge, _extends({}, badgeProps, {
      children: displayValue
    }))]
  }));
});
true ? Badge3.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The anchor of the badge.
   * @default {
   *   vertical: 'top',
   *   horizontal: 'right',
   * }
   */
  anchorOrigin: import_prop_types55.default.shape({
    horizontal: import_prop_types55.default.oneOf(["left", "right"]).isRequired,
    vertical: import_prop_types55.default.oneOf(["bottom", "top"]).isRequired
  }),
  /**
   * The content rendered within the badge.
   * @default ''
   */
  badgeContent: import_prop_types55.default.node,
  /**
   * The inset of the badge. Support shorthand syntax as described in https://developer.mozilla.org/en-US/docs/Web/CSS/inset.
   * @default 0
   */
  badgeInset: import_prop_types55.default.oneOfType([import_prop_types55.default.number, import_prop_types55.default.string]),
  /**
   * The badge will be added relative to this node.
   */
  children: import_prop_types55.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: import_prop_types55.default.oneOfType([import_prop_types55.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types55.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types55.default.elementType,
  /**
   * If `true`, the badge is invisible.
   * @default false
   */
  invisible: import_prop_types55.default.bool,
  /**
   * Max count to show.
   * @default 99
   */
  max: import_prop_types55.default.number,
  /**
   * Controls whether the badge is hidden when `badgeContent` is zero.
   * @default false
   */
  showZero: import_prop_types55.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types55.default.oneOfType([import_prop_types55.default.oneOf(["sm", "md", "lg"]), import_prop_types55.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types55.default.shape({
    badge: import_prop_types55.default.oneOfType([import_prop_types55.default.func, import_prop_types55.default.object]),
    root: import_prop_types55.default.oneOfType([import_prop_types55.default.func, import_prop_types55.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types55.default.shape({
    badge: import_prop_types55.default.elementType,
    root: import_prop_types55.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types55.default.oneOfType([import_prop_types55.default.arrayOf(import_prop_types55.default.oneOfType([import_prop_types55.default.func, import_prop_types55.default.object, import_prop_types55.default.bool])), import_prop_types55.default.func, import_prop_types55.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'solid'
   */
  variant: import_prop_types55.default.oneOfType([import_prop_types55.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types55.default.string])
} : void 0;
var Badge_default = Badge3;

// node_modules/@mui/joy/Breadcrumbs/Breadcrumbs.js
var React136 = __toESM(require_react());
var import_prop_types57 = __toESM(require_prop_types());

// node_modules/@mui/joy/Breadcrumbs/breadcrumbsClasses.js
function getBreadcrumbsUtilityClass(slot) {
  return generateUtilityClass("MuiBreadcrumbs", slot);
}
var breadcrumbsClasses = generateUtilityClasses("MuiBreadcrumbs", ["root", "ol", "li", "separator", "sizeSm", "sizeMd", "sizeLg"]);
var breadcrumbsClasses_default = breadcrumbsClasses;

// node_modules/@mui/joy/Typography/Typography.js
var React135 = __toESM(require_react());
var import_prop_types56 = __toESM(require_prop_types());

// node_modules/@mui/joy/Typography/typographyClasses.js
function getTypographyUtilityClass(slot) {
  return generateUtilityClass2("MuiTypography", slot);
}
var typographyClasses = generateUtilityClasses2("MuiTypography", ["root", "h1", "h2", "h3", "h4", "title-lg", "title-md", "title-sm", "body-lg", "body-md", "body-sm", "body-xs", "noWrap", "gutterBottom", "startDecorator", "endDecorator", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var typographyClasses_default = typographyClasses;

// node_modules/@mui/joy/Typography/Typography.js
var import_jsx_runtime91 = __toESM(require_jsx_runtime());
var import_jsx_runtime92 = __toESM(require_jsx_runtime());
var _excluded55 = ["color", "textColor"];
var _excluded215 = ["component", "gutterBottom", "noWrap", "level", "levelMapping", "children", "endDecorator", "startDecorator", "variant", "slots", "slotProps"];
var TypographyNestedContext = React135.createContext(false);
if (true) {
  TypographyNestedContext.displayName = "TypographyNestedContext";
}
var TypographyInheritContext = React135.createContext(false);
if (true) {
  TypographyInheritContext.displayName = "TypographyInheritContext";
}
var useUtilityClasses45 = (ownerState) => {
  const {
    gutterBottom,
    noWrap,
    level,
    color,
    variant
  } = ownerState;
  const slots = {
    root: ["root", level, gutterBottom && "gutterBottom", noWrap && "noWrap", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses2(slots, getTypographyUtilityClass, {});
};
var StartDecorator = styled_default("span", {
  name: "JoyTypography",
  slot: "StartDecorator",
  overridesResolver: (props, styles2) => styles2.startDecorator
})({
  display: "inline-flex",
  marginInlineEnd: "clamp(4px, var(--Typography-gap, 0.375em), 0.75rem)"
});
var EndDecorator = styled_default("span", {
  name: "JoyTypography",
  slot: "endDecorator",
  overridesResolver: (props, styles2) => styles2.endDecorator
})({
  display: "inline-flex",
  marginInlineStart: "clamp(4px, var(--Typography-gap, 0.375em), 0.75rem)"
});
var TypographyRoot = styled_default("span", {
  name: "JoyTypography",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$typography, _theme$typography$own, _theme$typography$own2, _theme$vars$palette$o, _theme$variants$owner;
  const lineHeight = ownerState.level !== "inherit" ? (_theme$typography = theme.typography[ownerState.level]) == null ? void 0 : _theme$typography.lineHeight : "1";
  return _extends({
    "--Icon-fontSize": `calc(1em * ${lineHeight})`
  }, ownerState.color && {
    "--Icon-color": "currentColor"
  }, {
    margin: "var(--Typography-margin, 0px)"
  }, ownerState.nesting ? {
    display: "inline"
    // looks better than `inline-block` when using with `variant` prop.
  } : _extends({
    display: "block"
  }, ownerState.unstable_hasSkeleton && {
    position: "relative"
  }), (ownerState.startDecorator || ownerState.endDecorator) && _extends({
    display: "flex",
    alignItems: "center"
  }, ownerState.nesting && _extends({
    display: "inline-flex"
  }, ownerState.startDecorator && {
    verticalAlign: "bottom"
    // to make the text align with the parent's content
  })), ownerState.level && ownerState.level !== "inherit" && theme.typography[ownerState.level], {
    fontSize: `var(--Typography-fontSize, ${ownerState.level && ownerState.level !== "inherit" ? (_theme$typography$own = (_theme$typography$own2 = theme.typography[ownerState.level]) == null ? void 0 : _theme$typography$own2.fontSize) != null ? _theme$typography$own : "inherit" : "inherit"})`
  }, ownerState.noWrap && {
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }, ownerState.gutterBottom && {
    marginBottom: "0.35em"
  }, ownerState.color && {
    color: `var(--variant-plainColor, rgba(${(_theme$vars$palette$o = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette$o.mainChannel} / 1))`
  }, ownerState.variant && _extends({
    borderRadius: theme.vars.radius.xs,
    paddingBlock: "min(0.1em, 4px)",
    paddingInline: "0.25em"
  }, !ownerState.nesting && {
    marginInline: "-0.25em"
  }, (_theme$variants$owner = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants$owner[ownerState.color]));
});
var defaultVariantMapping = {
  h1: "h1",
  h2: "h2",
  h3: "h3",
  h4: "h4",
  "title-lg": "p",
  "title-md": "p",
  "title-sm": "p",
  "body-lg": "p",
  "body-md": "p",
  "body-sm": "p",
  "body-xs": "span",
  inherit: "p"
};
var Typography = React135.forwardRef(function Typography2(inProps, ref) {
  var _inProps$color;
  const _useThemeProps = useThemeProps2({
    props: inProps,
    name: "JoyTypography"
  }), {
    color: colorProp,
    textColor
  } = _useThemeProps, themeProps = _objectWithoutPropertiesLoose(_useThemeProps, _excluded55);
  const nesting = React135.useContext(TypographyNestedContext);
  const inheriting = React135.useContext(TypographyInheritContext);
  const props = extendSxProp(_extends({}, themeProps, {
    color: textColor
  }));
  const {
    component: componentProp,
    gutterBottom = false,
    noWrap = false,
    level: levelProp = "body-md",
    levelMapping = defaultVariantMapping,
    children,
    endDecorator,
    startDecorator,
    variant,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded215);
  const color = (_inProps$color = inProps.color) != null ? _inProps$color : variant ? colorProp != null ? colorProp : "neutral" : colorProp;
  const level = nesting || inheriting ? inProps.level || "inherit" : levelProp;
  const hasSkeleton = isMuiElement(children, ["Skeleton"]);
  const component = componentProp || (nesting ? "span" : levelMapping[level] || defaultVariantMapping[level] || "span");
  const ownerState = _extends({}, props, {
    level,
    component,
    color,
    gutterBottom,
    noWrap,
    nesting,
    variant,
    unstable_hasSkeleton: hasSkeleton
  });
  const classes = useUtilityClasses45(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: TypographyRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: StartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: EndDecorator,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime91.jsx)(TypographyNestedContext.Provider, {
    value: true,
    children: (0, import_jsx_runtime92.jsxs)(SlotRoot, _extends({}, rootProps, {
      children: [startDecorator && (0, import_jsx_runtime91.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
        children: startDecorator
      })), hasSkeleton ? React135.cloneElement(children, {
        variant: children.props.variant || "inline"
      }) : children, endDecorator && (0, import_jsx_runtime91.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
        children: endDecorator
      }))]
    }))
  });
});
true ? Typography.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types56.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: import_prop_types56.default.oneOfType([import_prop_types56.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types56.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types56.default.elementType,
  /**
   * Element placed after the children.
   */
  endDecorator: import_prop_types56.default.node,
  /**
   * If `true`, the text will have a bottom margin.
   * @default false
   */
  gutterBottom: import_prop_types56.default.bool,
  /**
   * Applies the theme typography styles.
   * @default 'body-md'
   */
  level: import_prop_types56.default.oneOfType([import_prop_types56.default.oneOf(["h1", "h2", "h3", "h4", "title-lg", "title-md", "title-sm", "body-lg", "body-md", "body-sm", "body-xs", "inherit"]), import_prop_types56.default.string]),
  /**
   * The component maps the variant prop to a range of different HTML element types.
   * For instance, body1 to `<h6>`.
   * If you wish to change that mapping, you can provide your own.
   * Alternatively, you can use the `component` prop.
   * @default {
   *   h1: 'h1',
   *   h2: 'h2',
   *   h3: 'h3',
   *   h4: 'h4',
   *   'title-lg': 'p',
   *   'title-md': 'p',
   *   'title-sm': 'p',
   *   'body-lg': 'p',
   *   'body-md': 'p',
   *   'body-sm': 'p',
   *   'body-xs': 'span',
   *   inherit: 'p',
   * }
   */
  levelMapping: import_prop_types56.default.object,
  /**
   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
   *
   * Note that text overflow can only happen with block or inline-block level elements
   * (the element needs to have a width in order to overflow).
   * @default false
   */
  noWrap: import_prop_types56.default.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types56.default.shape({
    endDecorator: import_prop_types56.default.oneOfType([import_prop_types56.default.func, import_prop_types56.default.object]),
    root: import_prop_types56.default.oneOfType([import_prop_types56.default.func, import_prop_types56.default.object]),
    startDecorator: import_prop_types56.default.oneOfType([import_prop_types56.default.func, import_prop_types56.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types56.default.shape({
    endDecorator: import_prop_types56.default.elementType,
    root: import_prop_types56.default.elementType,
    startDecorator: import_prop_types56.default.elementType
  }),
  /**
   * Element placed before the children.
   */
  startDecorator: import_prop_types56.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types56.default.oneOfType([import_prop_types56.default.arrayOf(import_prop_types56.default.oneOfType([import_prop_types56.default.func, import_prop_types56.default.object, import_prop_types56.default.bool])), import_prop_types56.default.func, import_prop_types56.default.object]),
  /**
   * The system color.
   */
  textColor: import_prop_types56.default.any,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   */
  variant: import_prop_types56.default.oneOfType([import_prop_types56.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types56.default.string])
} : void 0;
Typography.muiName = "Typography";
var Typography_default = Typography;

// node_modules/@mui/joy/Breadcrumbs/Breadcrumbs.js
var import_jsx_runtime93 = __toESM(require_jsx_runtime());
var _excluded56 = ["children", "className", "size", "separator", "component", "slots", "slotProps"];
var useUtilityClasses46 = (ownerState) => {
  const {
    size: size3
  } = ownerState;
  const slots = {
    root: ["root", size3 && `size${capitalize(size3)}`],
    li: ["li"],
    ol: ["ol"],
    separator: ["separator"]
  };
  return composeClasses2(slots, getBreadcrumbsUtilityClass, {});
};
var BreadcrumbsRoot = styled_default("nav", {
  name: "JoyBreadcrumbs",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => _extends({}, ownerState.size === "sm" && {
  "--Icon-fontSize": theme.vars.fontSize.lg,
  gap: "var(--Breadcrumbs-gap, 0.25rem)",
  padding: "0.5rem"
}, ownerState.size === "md" && {
  "--Icon-fontSize": theme.vars.fontSize.xl,
  gap: "var(--Breadcrumbs-gap, 0.375rem)",
  padding: "0.75rem"
}, ownerState.size === "lg" && {
  "--Icon-fontSize": theme.vars.fontSize.xl2,
  gap: "var(--Breadcrumbs-gap, 0.5rem)",
  padding: "1rem"
}, theme.typography[`body-${ownerState.size}`]));
var BreadcrumbsOl = styled_default("ol", {
  name: "JoyBreadcrumbs",
  slot: "Ol",
  overridesResolver: (props, styles2) => styles2.ol
})({
  display: "flex",
  flexWrap: "wrap",
  alignItems: "center",
  gap: "inherit",
  // reset user-agent style
  padding: 0,
  margin: 0,
  listStyle: "none"
});
var BreadcrumbsLi = styled_default("li", {
  name: "JoyBreadcrumbs",
  slot: "Li",
  overridesResolver: (props, styles2) => styles2.li
})({
  display: "flex",
  alignItems: "center"
});
var BreadcrumbsSeparator = styled_default("li", {
  name: "JoyBreadcrumbs",
  slot: "Separator",
  overridesResolver: (props, styles2) => styles2.separator
})({
  display: "flex",
  userSelect: "none"
});
var Breadcrumbs = React136.forwardRef(function Breadcrumbs2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyBreadcrumbs"
  });
  const {
    children,
    className,
    size: size3 = "md",
    separator = "/",
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded56);
  const ownerState = _extends({}, props, {
    separator,
    size: size3
  });
  const classes = useUtilityClasses46(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: BreadcrumbsRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotOl, olProps] = useSlot("ol", {
    className: classes.ol,
    elementType: BreadcrumbsOl,
    externalForwardedProps,
    ownerState
  });
  const [SlotLi, liProps] = useSlot("li", {
    className: classes.li,
    elementType: BreadcrumbsLi,
    externalForwardedProps,
    ownerState
  });
  const [SlotSeparator, separatorProps] = useSlot("separator", {
    additionalProps: {
      "aria-hidden": true
    },
    className: classes.separator,
    elementType: BreadcrumbsSeparator,
    externalForwardedProps,
    ownerState
  });
  const allItems = React136.Children.toArray(children).filter((child) => {
    return React136.isValidElement(child);
  }).map((child, index2) => {
    var _child$props$componen;
    return (0, import_jsx_runtime93.jsx)(SlotLi, _extends({}, liProps, {
      children: isMuiElement(child, ["Typography"]) ? React136.cloneElement(child, {
        component: (_child$props$componen = child.props.component) != null ? _child$props$componen : "span"
      }) : child
    }), `child-${index2}`);
  });
  return (0, import_jsx_runtime93.jsx)(TypographyInheritContext.Provider, {
    value: true,
    children: (0, import_jsx_runtime93.jsx)(SlotRoot, _extends({}, rootProps, {
      children: (0, import_jsx_runtime93.jsx)(SlotOl, _extends({}, olProps, {
        children: allItems.reduce((acc, current, index2) => {
          if (index2 < allItems.length - 1) {
            acc = acc.concat(current, (0, import_jsx_runtime93.jsx)(SlotSeparator, _extends({}, separatorProps, {
              children: separator
            }), `separator-${index2}`));
          } else {
            acc.push(current);
          }
          return acc;
        }, [])
      }))
    }))
  });
});
true ? Breadcrumbs.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types57.default.node,
  /**
   * @ignore
   */
  className: import_prop_types57.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types57.default.elementType,
  /**
   * Custom separator node.
   * @default '/'
   */
  separator: import_prop_types57.default.node,
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types57.default.oneOfType([import_prop_types57.default.oneOf(["sm", "md", "lg"]), import_prop_types57.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types57.default.shape({
    li: import_prop_types57.default.oneOfType([import_prop_types57.default.func, import_prop_types57.default.object]),
    ol: import_prop_types57.default.oneOfType([import_prop_types57.default.func, import_prop_types57.default.object]),
    root: import_prop_types57.default.oneOfType([import_prop_types57.default.func, import_prop_types57.default.object]),
    separator: import_prop_types57.default.oneOfType([import_prop_types57.default.func, import_prop_types57.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types57.default.shape({
    li: import_prop_types57.default.elementType,
    ol: import_prop_types57.default.elementType,
    root: import_prop_types57.default.elementType,
    separator: import_prop_types57.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types57.default.oneOfType([import_prop_types57.default.arrayOf(import_prop_types57.default.oneOfType([import_prop_types57.default.func, import_prop_types57.default.object, import_prop_types57.default.bool])), import_prop_types57.default.func, import_prop_types57.default.object])
} : void 0;
var Breadcrumbs_default = Breadcrumbs;

// node_modules/@mui/joy/Button/Button.js
var React137 = __toESM(require_react());
var import_prop_types58 = __toESM(require_prop_types());

// node_modules/@mui/joy/Button/buttonClasses.js
function getButtonUtilityClass2(slot) {
  return generateUtilityClass2("MuiButton", slot);
}
var buttonClasses2 = generateUtilityClasses2("MuiButton", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "focusVisible", "disabled", "sizeSm", "sizeMd", "sizeLg", "fullWidth", "startDecorator", "endDecorator", "loading", "loadingIndicatorCenter"]);
var buttonClasses_default = buttonClasses2;

// node_modules/@mui/joy/Button/Button.js
var import_jsx_runtime94 = __toESM(require_jsx_runtime());
var import_jsx_runtime95 = __toESM(require_jsx_runtime());
var _excluded57 = ["children", "action", "color", "variant", "size", "fullWidth", "startDecorator", "endDecorator", "loading", "loadingPosition", "loadingIndicator", "disabled", "component", "slots", "slotProps"];
var useUtilityClasses47 = (ownerState) => {
  const {
    color,
    disabled,
    focusVisible,
    focusVisibleClassName,
    fullWidth,
    size: size3,
    variant,
    loading
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", fullWidth && "fullWidth", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`, loading && "loading"],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"],
    loadingIndicatorCenter: ["loadingIndicatorCenter"]
  };
  const composedClasses = composeClasses2(slots, getButtonUtilityClass2, {});
  if (focusVisible && focusVisibleClassName) {
    composedClasses.root += ` ${focusVisibleClassName}`;
  }
  return composedClasses;
};
var ButtonStartDecorator = styled_default("span", {
  name: "JoyButton",
  slot: "StartDecorator",
  overridesResolver: (props, styles2) => styles2.startDecorator
})({
  "--Icon-margin": "0 0 0 calc(var(--Button-gap) / -2)",
  "--CircularProgress-margin": "0 0 0 calc(var(--Button-gap) / -2)",
  display: "inherit",
  marginRight: "var(--Button-gap)"
});
var ButtonEndDecorator = styled_default("span", {
  name: "JoyButton",
  slot: "EndDecorator",
  overridesResolver: (props, styles2) => styles2.endDecorator
})({
  "--Icon-margin": "0 calc(var(--Button-gap) / -2) 0 0",
  "--CircularProgress-margin": "0 calc(var(--Button-gap) / -2) 0 0",
  display: "inherit",
  marginLeft: "var(--Button-gap)"
});
var ButtonLoadingCenter = styled_default("span", {
  name: "JoyButton",
  slot: "LoadingCenter",
  overridesResolver: (props, styles2) => styles2.loadingIndicatorCenter
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants2;
  return _extends({
    display: "inherit",
    position: "absolute",
    left: "50%",
    transform: "translateX(-50%)",
    color: (_theme$variants = theme.variants[ownerState.variant]) == null || (_theme$variants = _theme$variants[ownerState.color]) == null ? void 0 : _theme$variants.color
  }, ownerState.disabled && {
    color: (_theme$variants2 = theme.variants[`${ownerState.variant}Disabled`]) == null || (_theme$variants2 = _theme$variants2[ownerState.color]) == null ? void 0 : _theme$variants2.color
  });
});
var getButtonStyles = ({
  theme,
  ownerState
}) => {
  var _theme$variants3, _theme$variants4, _theme$variants5, _theme$variants6;
  return [_extends({
    "--Icon-margin": "initial",
    // reset the icon's margin.
    "--Icon-color": ownerState.color !== "neutral" || ownerState.variant === "solid" ? "currentColor" : theme.vars.palette.text.icon
  }, ownerState.size === "sm" && {
    "--Icon-fontSize": theme.vars.fontSize.lg,
    "--CircularProgress-size": "20px",
    // must be `px` unit, otherwise the CircularProgress is broken in Safari
    "--CircularProgress-thickness": "2px",
    "--Button-gap": "0.375rem",
    minHeight: "var(--Button-minHeight, 2rem)",
    fontSize: theme.vars.fontSize.sm,
    paddingBlock: "var(--Button-paddingBlock, 0.25rem)",
    paddingInline: "0.75rem"
  }, ownerState.size === "md" && {
    "--Icon-fontSize": theme.vars.fontSize.xl,
    "--CircularProgress-size": "20px",
    // must be `px` unit, otherwise the CircularProgress is broken in Safari
    "--CircularProgress-thickness": "2px",
    "--Button-gap": "0.5rem",
    minHeight: "var(--Button-minHeight, 2.25rem)",
    // use min-height instead of height to make the button resilient to its content
    fontSize: theme.vars.fontSize.sm,
    // internal --Button-paddingBlock is used to control the padding-block of the button from the outside, for example as a decorator of an Input
    paddingBlock: "var(--Button-paddingBlock, 0.375rem)",
    // the padding-block act as a minimum spacing between content and root element
    paddingInline: "1rem"
  }, ownerState.size === "lg" && {
    "--Icon-fontSize": theme.vars.fontSize.xl2,
    "--CircularProgress-size": "28px",
    // must be `px` unit, otherwise the CircularProgress is broken in Safari
    "--CircularProgress-thickness": "4px",
    "--Button-gap": "0.75rem",
    minHeight: "var(--Button-minHeight, 2.75rem)",
    fontSize: theme.vars.fontSize.md,
    paddingBlock: "var(--Button-paddingBlock, 0.5rem)",
    paddingInline: "1.5rem"
  }, {
    WebkitTapHighlightColor: "transparent",
    boxSizing: "border-box",
    borderRadius: `var(--Button-radius, ${theme.vars.radius.sm})`,
    // to be controlled by other components, for example Input
    margin: `var(--Button-margin)`,
    // to be controlled by other components, for example Input
    border: "none",
    backgroundColor: "transparent",
    cursor: "pointer",
    userSelect: "none",
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
    textDecoration: "none",
    // prevent user agent underline when used as anchor
    fontFamily: theme.vars.fontFamily.body,
    fontWeight: theme.vars.fontWeight.lg,
    lineHeight: theme.vars.lineHeight.md
  }, ownerState.fullWidth && {
    width: "100%"
  }, {
    [theme.focus.selector]: theme.focus.default
  }), _extends({}, (_theme$variants3 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants3[ownerState.color], {
    "&:hover": {
      "@media (hover: hover)": (_theme$variants4 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants4[ownerState.color]
    },
    '&:active, &[aria-pressed="true"]': (_theme$variants5 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants5[ownerState.color],
    [`&.${buttonClasses_default.disabled}`]: (_theme$variants6 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants6[ownerState.color]
  }, ownerState.loadingPosition === "center" && {
    // this has to come after the variant styles to take effect.
    [`&.${buttonClasses_default.loading}`]: {
      color: "transparent"
    }
  })];
};
var ButtonRoot = styled_default("button", {
  name: "JoyButton",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(getButtonStyles);
var Button3 = React137.forwardRef(function Button4(inProps, ref) {
  var _ref;
  const props = useThemeProps2({
    props: inProps,
    name: "JoyButton"
  });
  const {
    children,
    action,
    color: colorProp = "primary",
    variant: variantProp = "solid",
    size: sizeProp = "md",
    fullWidth = false,
    startDecorator,
    endDecorator,
    loading = false,
    loadingPosition = "center",
    loadingIndicator: loadingIndicatorProp,
    disabled: disabledProp,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded57);
  const buttonGroup = React137.useContext(ButtonGroupContext_default);
  const toggleButtonGroup = React137.useContext(ToggleButtonGroupContext_default);
  const variant = inProps.variant || buttonGroup.variant || variantProp;
  const size3 = inProps.size || buttonGroup.size || sizeProp;
  const color = inProps.color || buttonGroup.color || colorProp;
  const disabled = (_ref = inProps.loading || inProps.disabled) != null ? _ref : buttonGroup.disabled || loading || disabledProp;
  const buttonRef = React137.useRef(null);
  const handleRef = useForkRef(buttonRef, ref);
  const {
    focusVisible,
    setFocusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    disabled,
    rootRef: handleRef
  }));
  const loadingIndicator = loadingIndicatorProp != null ? loadingIndicatorProp : (0, import_jsx_runtime94.jsx)(CircularProgress_default, {
    color,
    thickness: {
      sm: 2,
      md: 3,
      lg: 4
    }[size3] || 3
  });
  React137.useImperativeHandle(action, () => ({
    focusVisible: () => {
      var _buttonRef$current;
      setFocusVisible(true);
      (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();
    }
  }), [setFocusVisible]);
  const ownerState = _extends({}, props, {
    color,
    fullWidth,
    variant,
    size: size3,
    focusVisible,
    loading,
    loadingPosition,
    disabled
  });
  const classes = useUtilityClasses47(ownerState);
  const handleClick = (event) => {
    var _onClick;
    let onClick = props.onClick;
    if (typeof slotProps.root === "function") {
      onClick = slotProps.root(ownerState).onClick;
    } else if (slotProps.root) {
      onClick = slotProps.root.onClick;
    }
    (_onClick = onClick) == null || _onClick(event);
    if (toggleButtonGroup) {
      var _toggleButtonGroup$on;
      (_toggleButtonGroup$on = toggleButtonGroup.onClick) == null || _toggleButtonGroup$on.call(toggleButtonGroup, event, props.value);
    }
  };
  let ariaPressed = props["aria-pressed"];
  if (typeof slotProps.root === "function") {
    ariaPressed = slotProps.root(ownerState)["aria-pressed"];
  } else if (slotProps.root) {
    ariaPressed = slotProps.root["aria-pressed"];
  }
  if (toggleButtonGroup != null && toggleButtonGroup.value) {
    if (Array.isArray(toggleButtonGroup.value)) {
      ariaPressed = toggleButtonGroup.value.indexOf(props.value) !== -1;
    } else {
      ariaPressed = toggleButtonGroup.value === props.value;
    }
  }
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: ButtonRoot,
    externalForwardedProps,
    getSlotProps: getRootProps,
    ownerState,
    additionalProps: {
      onClick: handleClick,
      "aria-pressed": ariaPressed
    }
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: ButtonStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: ButtonEndDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotLoadingIndicatorCenter, loadingIndicatorCenterProps] = useSlot("loadingIndicatorCenter", {
    className: classes.loadingIndicatorCenter,
    elementType: ButtonLoadingCenter,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime95.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [(startDecorator || loading && loadingPosition === "start") && (0, import_jsx_runtime94.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
      children: loading && loadingPosition === "start" ? loadingIndicator : startDecorator
    })), children, loading && loadingPosition === "center" && (0, import_jsx_runtime94.jsx)(SlotLoadingIndicatorCenter, _extends({}, loadingIndicatorCenterProps, {
      children: loadingIndicator
    })), (endDecorator || loading && loadingPosition === "end") && (0, import_jsx_runtime94.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
      children: loading && loadingPosition === "end" ? loadingIndicator : endDecorator
    }))]
  }));
});
true ? Button3.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */
  action: import_prop_types58.default.oneOfType([import_prop_types58.default.func, import_prop_types58.default.shape({
    current: import_prop_types58.default.shape({
      focusVisible: import_prop_types58.default.func.isRequired
    })
  })]),
  /**
   * @ignore
   */
  children: import_prop_types58.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: import_prop_types58.default.oneOfType([import_prop_types58.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types58.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types58.default.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types58.default.bool,
  /**
   * Element placed after the children.
   */
  endDecorator: import_prop_types58.default.node,
  /**
   * @ignore
   */
  focusVisibleClassName: import_prop_types58.default.string,
  /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */
  fullWidth: import_prop_types58.default.bool,
  /**
   * If `true`, the loading indicator is shown and the button becomes disabled.
   * @default false
   */
  loading: import_prop_types58.default.bool,
  /**
   * The node should contain an element with `role="progressbar"` with an accessible name.
   * By default we render a `CircularProgress` that is labelled by the button itself.
   * @default <CircularProgress />
   */
  loadingIndicator: import_prop_types58.default.node,
  /**
   * The loading indicator can be positioned on the start, end, or the center of the button.
   * @default 'center'
   */
  loadingPosition: import_prop_types58.default.oneOf(["center", "end", "start"]),
  /**
   * @ignore
   */
  onClick: import_prop_types58.default.func,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types58.default.oneOfType([import_prop_types58.default.oneOf(["sm", "md", "lg"]), import_prop_types58.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types58.default.shape({
    endDecorator: import_prop_types58.default.oneOfType([import_prop_types58.default.func, import_prop_types58.default.object]),
    loadingIndicatorCenter: import_prop_types58.default.oneOfType([import_prop_types58.default.func, import_prop_types58.default.object]),
    root: import_prop_types58.default.oneOfType([import_prop_types58.default.func, import_prop_types58.default.object]),
    startDecorator: import_prop_types58.default.oneOfType([import_prop_types58.default.func, import_prop_types58.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types58.default.shape({
    endDecorator: import_prop_types58.default.elementType,
    loadingIndicatorCenter: import_prop_types58.default.elementType,
    root: import_prop_types58.default.elementType,
    startDecorator: import_prop_types58.default.elementType
  }),
  /**
   * Element placed before the children.
   */
  startDecorator: import_prop_types58.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types58.default.oneOfType([import_prop_types58.default.arrayOf(import_prop_types58.default.oneOfType([import_prop_types58.default.func, import_prop_types58.default.object, import_prop_types58.default.bool])), import_prop_types58.default.func, import_prop_types58.default.object]),
  /**
   * @default 0
   */
  tabIndex: import_prop_types58.default.number,
  /**
   * @ignore
   */
  value: import_prop_types58.default.oneOfType([import_prop_types58.default.arrayOf(import_prop_types58.default.string), import_prop_types58.default.number, import_prop_types58.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'solid'
   */
  variant: import_prop_types58.default.oneOfType([import_prop_types58.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types58.default.string])
} : void 0;
Button3.muiName = "Button";
var Button_default = Button3;

// node_modules/@mui/joy/ButtonGroup/ButtonGroup.js
var React138 = __toESM(require_react());
var import_prop_types59 = __toESM(require_prop_types());

// node_modules/@mui/joy/ButtonGroup/buttonGroupClasses.js
function getButtonGroupUtilityClass(slot) {
  return generateUtilityClass2("MuiButtonGroup", slot);
}
var buttonGroupClasses = generateUtilityClasses2("MuiButtonGroup", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "horizontal", "vertical"]);
var buttonGroupClasses_default = buttonGroupClasses;

// node_modules/@mui/joy/ButtonGroup/ButtonGroup.js
var import_jsx_runtime96 = __toESM(require_jsx_runtime());
var _excluded58 = ["buttonFlex", "className", "component", "disabled", "size", "color", "variant", "children", "orientation", "slots", "slotProps", "spacing"];
var useUtilityClasses48 = (ownerState) => {
  const {
    size: size3,
    variant,
    color,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`]
  };
  return composeClasses2(slots, getButtonGroupUtilityClass, {});
};
var StyledButtonGroup = styled_default("div")(({
  theme,
  ownerState
}) => {
  var _theme$variants$outli, _theme$variants$outli2, _theme$variants$outli3;
  const {
    borderRadius: radius
  } = resolveSxValue({
    theme,
    ownerState
  }, ["borderRadius"]);
  const firstChildRadius = ownerState.orientation === "vertical" ? "var(--ButtonGroup-radius) var(--ButtonGroup-radius) var(--unstable_childRadius) var(--unstable_childRadius)" : "var(--ButtonGroup-radius) var(--unstable_childRadius) var(--unstable_childRadius) var(--ButtonGroup-radius)";
  const lastChildRadius = ownerState.orientation === "vertical" ? "var(--unstable_childRadius) var(--unstable_childRadius) var(--ButtonGroup-radius) var(--ButtonGroup-radius)" : "var(--unstable_childRadius) var(--ButtonGroup-radius) var(--ButtonGroup-radius) var(--unstable_childRadius)";
  const margin = ownerState.orientation === "vertical" ? "calc(var(--ButtonGroup-separatorSize) * -1) 0 0 0" : "0 0 0 calc(var(--ButtonGroup-separatorSize) * -1)";
  const styles2 = {};
  traverseBreakpoints(theme.breakpoints, ownerState.spacing, (appendStyle, value) => {
    if (value !== null) {
      var _theme$spacing;
      appendStyle(styles2, {
        // the buttons should be connected if the value is more than 0
        "--ButtonGroup-connected": value.toString().match(/^0(?!\.)/) ? "1" : "0",
        gap: typeof value === "string" ? value : (_theme$spacing = theme.spacing) == null ? void 0 : _theme$spacing.call(theme, value)
      });
    }
  });
  const outlinedStyle = (_theme$variants$outli = theme.variants.outlined) == null ? void 0 : _theme$variants$outli[ownerState.color];
  const outlinedDisabledStyle = (_theme$variants$outli2 = theme.variants.outlinedDisabled) == null ? void 0 : _theme$variants$outli2[ownerState.color];
  const outlinedHoverStyle = (_theme$variants$outli3 = theme.variants.outlinedHover) == null ? void 0 : _theme$variants$outli3[ownerState.color];
  return [_extends({
    "--ButtonGroup-separatorSize": ownerState.variant === "outlined" ? "1px" : "calc(var(--ButtonGroup-connected) * 1px)",
    "--ButtonGroup-separatorColor": outlinedStyle == null ? void 0 : outlinedStyle.borderColor,
    "--ButtonGroup-radius": theme.vars.radius.sm,
    "--Divider-inset": "0.5rem",
    "--unstable_childRadius": "calc((1 - var(--ButtonGroup-connected)) * var(--ButtonGroup-radius) - var(--variant-borderWidth, 0px))"
  }, styles2, {
    display: "flex",
    borderRadius: "var(--ButtonGroup-radius)",
    flexDirection: ownerState.orientation === "vertical" ? "column" : "row",
    // first Button or IconButton
    [`& > [data-first-child]`]: _extends({
      "--Button-radius": firstChildRadius,
      "--IconButton-radius": firstChildRadius
    }, ownerState.orientation === "horizontal" && {
      borderRight: "var(--ButtonGroup-separatorSize) solid var(--ButtonGroup-separatorColor)"
    }, ownerState.orientation === "vertical" && {
      borderBottom: "var(--ButtonGroup-separatorSize) solid var(--ButtonGroup-separatorColor)"
    }),
    // middle Buttons or IconButtons
    [`& > :not([data-first-child]):not([data-last-child]):not(:only-child)`]: _extends({
      "--Button-radius": "var(--unstable_childRadius)",
      "--IconButton-radius": "var(--unstable_childRadius)",
      borderRadius: "var(--unstable_childRadius)"
    }, ownerState.orientation === "horizontal" && {
      borderLeft: "var(--ButtonGroup-separatorSize) solid var(--ButtonGroup-separatorColor)",
      borderRight: "var(--ButtonGroup-separatorSize) solid var(--ButtonGroup-separatorColor)"
    }, ownerState.orientation === "vertical" && {
      borderTop: "var(--ButtonGroup-separatorSize) solid var(--ButtonGroup-separatorColor)",
      borderBottom: "var(--ButtonGroup-separatorSize) solid var(--ButtonGroup-separatorColor)"
    }),
    // last Button or IconButton
    [`& > [data-last-child]`]: _extends({
      "--Button-radius": lastChildRadius,
      "--IconButton-radius": lastChildRadius
    }, ownerState.orientation === "horizontal" && {
      borderLeft: "var(--ButtonGroup-separatorSize) solid var(--ButtonGroup-separatorColor)"
    }, ownerState.orientation === "vertical" && {
      borderTop: "var(--ButtonGroup-separatorSize) solid var(--ButtonGroup-separatorColor)"
    }),
    // single Button or IconButton
    [`& > :only-child`]: {
      "--Button-radius": "var(--ButtonGroup-radius)",
      "--IconButton-radius": "var(--ButtonGroup-radius)"
    },
    [`& > :not([data-first-child]):not(:only-child)`]: {
      "--Button-margin": margin,
      "--IconButton-margin": margin
    },
    [`& .${buttonClasses_default.root}, & .${iconButtonClasses_default.root}`]: _extends({
      "&:not(:disabled)": {
        zIndex: 1
        // to make borders appear above disabled buttons.
      },
      "&:disabled": {
        "--ButtonGroup-separatorColor": outlinedDisabledStyle == null ? void 0 : outlinedDisabledStyle.borderColor
      }
    }, ownerState.variant === "outlined" && {
      "&:hover": {
        "--ButtonGroup-separatorColor": outlinedHoverStyle == null ? void 0 : outlinedHoverStyle.borderColor
      }
    }, {
      [`&:hover, ${theme.focus.selector}`]: {
        zIndex: 2
        // to make borders appear above sibling.
      }
    })
  }, ownerState.buttonFlex && {
    [`& > *:not(.${iconButtonClasses_default.root})`]: {
      flex: ownerState.buttonFlex
    },
    [`& > :not(button) > .${buttonClasses_default.root}`]: {
      width: "100%"
      // for button to fill its wrapper.
    }
  }), radius !== void 0 && {
    "--ButtonGroup-radius": radius
  }];
});
var ButtonGroupRoot = styled_default(StyledButtonGroup, {
  name: "JoyButtonGroup",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({});
var ButtonGroup = React138.forwardRef(function ButtonGroup2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyButtonGroup"
  });
  const {
    buttonFlex,
    className,
    component = "div",
    disabled = false,
    size: size3 = "md",
    color = "neutral",
    variant = "outlined",
    children,
    orientation = "horizontal",
    slots = {},
    slotProps = {},
    spacing = 0
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded58);
  const ownerState = _extends({}, props, {
    buttonFlex,
    color,
    component,
    orientation,
    spacing,
    size: size3,
    variant
  });
  const classes = useUtilityClasses48(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: ButtonGroupRoot,
    externalForwardedProps,
    additionalProps: {
      role: "group"
    },
    ownerState
  });
  const buttonGroupContext = React138.useMemo(() => ({
    variant,
    color,
    size: size3,
    disabled
  }), [variant, color, size3, disabled]);
  return (0, import_jsx_runtime96.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime96.jsx)(ButtonGroupContext_default.Provider, {
      value: buttonGroupContext,
      children: React138.Children.map(children, (child, index2) => {
        if (!React138.isValidElement(child)) {
          return child;
        }
        const extraProps = {};
        if (isMuiElement(child, ["Divider"])) {
          var _childProps$inset, _childProps$orientati;
          const childProps = child.props;
          extraProps.inset = (_childProps$inset = childProps == null ? void 0 : childProps.inset) != null ? _childProps$inset : "context";
          const dividerOrientation = orientation === "vertical" ? "horizontal" : "vertical";
          extraProps.orientation = (_childProps$orientati = childProps == null ? void 0 : childProps.orientation) != null ? _childProps$orientati : dividerOrientation;
          extraProps.role = "presentation";
          extraProps.component = "span";
        }
        if (React138.Children.count(children) > 1) {
          if (index2 === 0) {
            extraProps["data-first-child"] = "";
          }
          if (index2 === React138.Children.count(children) - 1) {
            extraProps["data-last-child"] = "";
          }
        }
        return React138.cloneElement(child, extraProps);
      })
    })
  }));
});
true ? ButtonGroup.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The flex value of the button.
   * @example buttonFlex={1} will set flex: '1 1 auto' on each button (stretch the button to equally fill the available space).
   */
  buttonFlex: import_prop_types59.default.oneOfType([import_prop_types59.default.number, import_prop_types59.default.string]),
  /**
   * Used to render icon or text elements inside the ButtonGroup if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types59.default.node,
  /**
   * @ignore
   */
  className: import_prop_types59.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types59.default.oneOfType([import_prop_types59.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types59.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types59.default.elementType,
  /**
   * If `true`, all the buttons will be disabled.
   * @default false
   */
  disabled: import_prop_types59.default.bool,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types59.default.oneOf(["horizontal", "vertical"]),
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types59.default.oneOfType([import_prop_types59.default.oneOf(["lg", "md", "sm"]), import_prop_types59.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types59.default.shape({
    root: import_prop_types59.default.oneOfType([import_prop_types59.default.func, import_prop_types59.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types59.default.shape({
    root: import_prop_types59.default.elementType
  }),
  /**
   * Defines the space between the type `item` components.
   * It can only be used on a type `container` component.
   * @default 0
   */
  spacing: import_prop_types59.default.oneOfType([import_prop_types59.default.arrayOf(import_prop_types59.default.oneOfType([import_prop_types59.default.number, import_prop_types59.default.string])), import_prop_types59.default.number, import_prop_types59.default.shape({
    lg: import_prop_types59.default.oneOfType([import_prop_types59.default.number, import_prop_types59.default.string]),
    md: import_prop_types59.default.oneOfType([import_prop_types59.default.number, import_prop_types59.default.string]),
    sm: import_prop_types59.default.oneOfType([import_prop_types59.default.number, import_prop_types59.default.string]),
    xl: import_prop_types59.default.oneOfType([import_prop_types59.default.number, import_prop_types59.default.string]),
    xs: import_prop_types59.default.oneOfType([import_prop_types59.default.number, import_prop_types59.default.string])
  }), import_prop_types59.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types59.default.oneOfType([import_prop_types59.default.arrayOf(import_prop_types59.default.oneOfType([import_prop_types59.default.func, import_prop_types59.default.object, import_prop_types59.default.bool])), import_prop_types59.default.func, import_prop_types59.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types59.default.oneOfType([import_prop_types59.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types59.default.string])
} : void 0;
var ButtonGroup_default = ButtonGroup;

// node_modules/@mui/joy/Card/Card.js
var React139 = __toESM(require_react());
var import_prop_types60 = __toESM(require_prop_types());

// node_modules/@mui/joy/Card/cardClasses.js
function getCardUtilityClass(slot) {
  return generateUtilityClass2("MuiCard", slot);
}
var cardClasses = generateUtilityClasses2("MuiCard", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "horizontal", "vertical"]);
var cardClasses_default = cardClasses;

// node_modules/@mui/joy/Card/Card.js
var import_jsx_runtime97 = __toESM(require_jsx_runtime());
var _excluded59 = ["className", "color", "component", "invertedColors", "size", "variant", "children", "orientation", "slots", "slotProps"];
var useUtilityClasses49 = (ownerState) => {
  const {
    size: size3,
    variant,
    color,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`]
  };
  return composeClasses2(slots, getCardUtilityClass, {});
};
var StyledCardRoot = styled_default("div")(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const {
    p,
    padding,
    borderRadius
  } = resolveSxValue({
    theme,
    ownerState
  }, ["p", "padding", "borderRadius"]);
  return [_extends({
    "--Icon-color": ownerState.color !== "neutral" || ownerState.variant === "solid" ? "currentColor" : theme.vars.palette.text.icon,
    // a context variable for any child component
    "--Card-childRadius": "max((var(--Card-radius) - var(--variant-borderWidth, 0px)) - var(--Card-padding), min(var(--Card-padding) / 2, (var(--Card-radius) - var(--variant-borderWidth, 0px)) / 2))",
    // AspectRatio integration
    "--AspectRatio-radius": "var(--Card-childRadius)",
    // Link integration
    "--unstable_actionMargin": "calc(-1 * var(--variant-borderWidth, 0px))",
    // Link, Radio, Checkbox integration
    "--unstable_actionRadius": "var(--Card-radius)",
    // CardCover integration
    "--CardCover-radius": "calc(var(--Card-radius) - var(--variant-borderWidth, 0px))",
    // CardOverflow integration
    "--CardOverflow-offset": `calc(-1 * var(--Card-padding))`,
    "--CardOverflow-radius": "calc(var(--Card-radius) - var(--variant-borderWidth, 0px))",
    // Divider integration
    "--Divider-inset": "calc(-1 * var(--Card-padding))"
  }, ownerState.size === "sm" && {
    "--Card-radius": theme.vars.radius.sm,
    "--Card-padding": "0.625rem",
    gap: "0.5rem"
  }, ownerState.size === "md" && {
    "--Card-radius": theme.vars.radius.md,
    "--Card-padding": "1rem",
    gap: "0.75rem 1rem"
  }, ownerState.size === "lg" && {
    "--Card-radius": theme.vars.radius.lg,
    "--Card-padding": "1.5rem",
    gap: "1rem 1.5rem"
  }, {
    padding: "var(--Card-padding)",
    borderRadius: "var(--Card-radius)",
    backgroundColor: theme.vars.palette.background.surface,
    position: "relative",
    display: "flex",
    flexDirection: ownerState.orientation === "horizontal" ? "row" : "column"
  }, theme.typography[`body-${ownerState.size}`], ownerState.variant === "solid" && ownerState.color && ownerState.invertedColors && applySolidInversion(ownerState.color)(theme), ownerState.variant === "soft" && ownerState.color && ownerState.invertedColors && applySoftInversion(ownerState.color)(theme), (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]), p !== void 0 && {
    "--Card-padding": p
  }, padding !== void 0 && {
    "--Card-padding": padding
  }, borderRadius !== void 0 && {
    "--Card-radius": borderRadius
  }];
});
var CardRoot = styled_default(StyledCardRoot, {
  name: "JoyCard",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({});
var Card = React139.forwardRef(function Card2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyCard"
  });
  const {
    className,
    color = "neutral",
    component = "div",
    invertedColors = false,
    size: size3 = "md",
    variant = "outlined",
    children,
    orientation = "vertical",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded59);
  const ownerState = _extends({}, props, {
    color,
    component,
    orientation,
    size: size3,
    variant,
    invertedColors
  });
  const classes = useUtilityClasses49(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: CardRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime97.jsx)(SlotRoot, _extends({}, rootProps, {
    children: React139.Children.map(children, (child, index2) => {
      if (!React139.isValidElement(child)) {
        return child;
      }
      const extraProps = {};
      if (isMuiElement(child, ["Divider"])) {
        var _childProps$inset, _childProps$orientati;
        const childProps = child.props;
        extraProps.inset = (_childProps$inset = childProps == null ? void 0 : childProps.inset) != null ? _childProps$inset : "context";
        const dividerOrientation = orientation === "vertical" ? "horizontal" : "vertical";
        extraProps.orientation = (_childProps$orientati = childProps == null ? void 0 : childProps.orientation) != null ? _childProps$orientati : dividerOrientation;
      }
      if (index2 === 0) {
        extraProps["data-first-child"] = "";
      }
      if (index2 === React139.Children.count(children) - 1) {
        extraProps["data-last-child"] = "";
      }
      return React139.cloneElement(child, extraProps);
    })
  }));
});
true ? Card.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the Card if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types60.default.node,
  /**
   * @ignore
   */
  className: import_prop_types60.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types60.default.oneOfType([import_prop_types60.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types60.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types60.default.elementType,
  /**
   * If `true`, the children with an implicit color prop invert their colors to match the component's variant and color.
   * @default false
   */
  invertedColors: import_prop_types60.default.bool,
  /**
   * The component orientation.
   * @default 'vertical'
   */
  orientation: import_prop_types60.default.oneOf(["horizontal", "vertical"]),
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types60.default.oneOfType([import_prop_types60.default.oneOf(["lg", "md", "sm"]), import_prop_types60.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types60.default.shape({
    root: import_prop_types60.default.oneOfType([import_prop_types60.default.func, import_prop_types60.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types60.default.shape({
    root: import_prop_types60.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types60.default.oneOfType([import_prop_types60.default.arrayOf(import_prop_types60.default.oneOfType([import_prop_types60.default.func, import_prop_types60.default.object, import_prop_types60.default.bool])), import_prop_types60.default.func, import_prop_types60.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types60.default.oneOfType([import_prop_types60.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types60.default.string])
} : void 0;
var Card_default = Card;

// node_modules/@mui/joy/CardActions/CardActions.js
var React140 = __toESM(require_react());
var import_prop_types61 = __toESM(require_prop_types());

// node_modules/@mui/joy/CardActions/cardActionsClasses.js
function getCardActionsUtilityClass(slot) {
  return generateUtilityClass2("MuiCardActions", slot);
}
var cardActionsClasses = generateUtilityClasses2("MuiCardActions", ["root"]);
var cardActionsClasses_default = cardActionsClasses;

// node_modules/@mui/joy/CardOverflow/cardOverflowClasses.js
function getCardOverflowUtilityClass(slot) {
  return generateUtilityClass2("MuiCardOverflow", slot);
}
var aspectRatioClasses2 = generateUtilityClasses2("MuiCardOverflow", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var cardOverflowClasses_default = aspectRatioClasses2;

// node_modules/@mui/joy/Divider/dividerClasses.js
function getDividerUtilityClass(slot) {
  return generateUtilityClass2("MuiDivider", slot);
}
var dividerClasses = generateUtilityClasses2("MuiDivider", ["root", "horizontal", "vertical", "insetContext", "insetNone"]);
var dividerClasses_default = dividerClasses;

// node_modules/@mui/joy/CardActions/CardActions.js
var import_jsx_runtime98 = __toESM(require_jsx_runtime());
var _excluded60 = ["className", "component", "children", "buttonFlex", "orientation", "slots", "slotProps"];
var useUtilityClasses50 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses2(slots, getCardActionsUtilityClass, {});
};
var StyledCardActionsRoot = styled_default("div")(({
  ownerState
}) => {
  var _ownerState$orientati;
  return _extends({
    "--Button-radius": "var(--Card-childRadius)",
    "--IconButton-radius": "var(--Card-childRadius)",
    display: "flex"
  }, ((_ownerState$orientati = ownerState.orientation) == null ? void 0 : _ownerState$orientati.startsWith("horizontal")) && {
    alignItems: "center"
    // it is common to have children aligned center in horizontal orientation, but not vertically.
  }, {
    flexDirection: ownerState.orientation === "horizontal" ? "row" : "column"
  }, ownerState.orientation === "horizontal-reverse" && {
    flexDirection: "row-reverse"
  }, {
    zIndex: 1,
    // render above Link's overlay
    gap: "calc(0.625 * var(--Card-padding))",
    padding: "var(--unstable_padding)",
    "--unstable_padding": "calc(0.75 * var(--Card-padding)) 0 0 0",
    [`.${cardOverflowClasses_default.root} > &`]: {
      "--unstable_padding": "calc(0.75 * var(--Card-padding)) 0 var(--Card-padding)"
    },
    [`.${cardClasses_default.root} > .${dividerClasses_default.root} + &`]: {
      "--unstable_padding": "0"
    }
  }, ownerState.buttonFlex ? {
    [`& > :not(.${iconButtonClasses_default.root})`]: {
      flex: ownerState.buttonFlex
    },
    [`& > :not(button) > .${buttonClasses_default.root}`]: {
      width: "100%"
      // for button to fill its wrapper.
    }
  } : {
    [`& > .${buttonClasses_default.root}:only-child`]: {
      flex: "auto"
    }
  });
});
var CardActionsRoot = styled_default(StyledCardActionsRoot, {
  name: "JoyCardActions",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({});
var CardActions = React140.forwardRef(function CardActions2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyCardActions"
  });
  const {
    className,
    component = "div",
    children,
    buttonFlex,
    orientation = "horizontal",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded60);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const ownerState = _extends({}, props, {
    component,
    buttonFlex,
    orientation
  });
  const classes = useUtilityClasses50();
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: CardActionsRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime98.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? CardActions.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The CSS `flex` for the Button and its wrapper.
   */
  buttonFlex: import_prop_types61.default.oneOfType([import_prop_types61.default.number, import_prop_types61.default.string]),
  /**
   * Used to render icon or text elements inside the CardActions if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types61.default.node,
  /**
   * @ignore
   */
  className: import_prop_types61.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types61.default.elementType,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types61.default.oneOf(["horizontal-reverse", "horizontal", "vertical"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types61.default.shape({
    root: import_prop_types61.default.oneOfType([import_prop_types61.default.func, import_prop_types61.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types61.default.shape({
    root: import_prop_types61.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types61.default.oneOfType([import_prop_types61.default.arrayOf(import_prop_types61.default.oneOfType([import_prop_types61.default.func, import_prop_types61.default.object, import_prop_types61.default.bool])), import_prop_types61.default.func, import_prop_types61.default.object])
} : void 0;
var CardActions_default = CardActions;

// node_modules/@mui/joy/CardContent/CardContent.js
var React141 = __toESM(require_react());
var import_prop_types62 = __toESM(require_prop_types());

// node_modules/@mui/joy/CardContent/cardContentClasses.js
function getCardContentUtilityClass(slot) {
  return generateUtilityClass2("MuiCardContent", slot);
}
var cardClasses2 = generateUtilityClasses2("MuiCardContent", ["root"]);
var cardContentClasses_default = cardClasses2;

// node_modules/@mui/joy/CardContent/CardContent.js
var import_jsx_runtime99 = __toESM(require_jsx_runtime());
var _excluded61 = ["className", "component", "children", "orientation", "slots", "slotProps"];
var useUtilityClasses51 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses2(slots, getCardContentUtilityClass, {});
};
var StyledCardContentRoot = styled_default("div")(({
  ownerState
}) => ({
  display: "flex",
  flexDirection: ownerState.orientation === "horizontal" ? "row" : "column",
  flex: 9999,
  // fill the available space in the Card and also shrink if needed
  zIndex: 1,
  columnGap: "var(--Card-padding)",
  rowGap: "max(2px, calc(0.1875 * var(--Card-padding)))",
  padding: "var(--unstable_padding)",
  [`.${cardOverflowClasses_default.root} > &`]: {
    "--unstable_padding": "calc(var(--Card-padding) * 0.75) 0px"
  }
}));
var CardContentRoot = styled_default(StyledCardContentRoot, {
  name: "JoyCardContent",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({});
var CardContent = React141.forwardRef(function CardContent2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyCardContent"
  });
  const {
    className,
    component = "div",
    children,
    orientation = "vertical",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded61);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const ownerState = _extends({}, props, {
    component,
    orientation
  });
  const classes = useUtilityClasses51();
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: CardContentRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime99.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? CardContent.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the CardContent if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types62.default.node,
  /**
   * @ignore
   */
  className: import_prop_types62.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types62.default.elementType,
  /**
   * The component orientation.
   * @default 'vertical'
   */
  orientation: import_prop_types62.default.oneOf(["horizontal", "vertical"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types62.default.shape({
    root: import_prop_types62.default.oneOfType([import_prop_types62.default.func, import_prop_types62.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types62.default.shape({
    root: import_prop_types62.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types62.default.oneOfType([import_prop_types62.default.arrayOf(import_prop_types62.default.oneOfType([import_prop_types62.default.func, import_prop_types62.default.object, import_prop_types62.default.bool])), import_prop_types62.default.func, import_prop_types62.default.object])
} : void 0;
var CardContent_default = CardContent;

// node_modules/@mui/joy/CardCover/CardCover.js
var React142 = __toESM(require_react());
var import_prop_types63 = __toESM(require_prop_types());

// node_modules/@mui/joy/CardCover/cardCoverClasses.js
function getCardCoverUtilityClass(slot) {
  return generateUtilityClass2("MuiCardCover", slot);
}
var cardCoverClasses = generateUtilityClasses2("MuiCardCover", ["root"]);
var cardCoverClasses_default = cardCoverClasses;

// node_modules/@mui/joy/CardCover/CardCover.js
var import_jsx_runtime100 = __toESM(require_jsx_runtime());
var _excluded62 = ["className", "component", "children", "slots", "slotProps"];
var useUtilityClasses52 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses2(slots, getCardCoverUtilityClass, {});
};
var CardCoverRoot = styled_default("div", {
  name: "JoyCardCover",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({
  position: "absolute",
  zIndex: 0,
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  borderRadius: "var(--CardCover-radius)",
  // use data-attribute instead of :first-child to support zero config SSR (emotion)
  // use nested selector for integrating with nextjs image `fill` layout (spans are inserted on top of the img)
  "& [data-first-child]": {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    width: "100%",
    height: "100%",
    objectFit: "cover",
    boxSizing: "border-box",
    borderRadius: "var(--CardCover-radius)",
    margin: 0,
    padding: 0,
    "& > img": {
      // support art-direction that uses <picture><img /></picture>
      width: "100%",
      height: "100%",
      objectFit: "cover"
    }
  }
});
var CardCover = React142.forwardRef(function CardCover2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyCardCover"
  });
  const {
    className,
    component = "div",
    children,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded62);
  const ownerState = _extends({}, props, {
    component
  });
  const classes = useUtilityClasses52();
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: CardCoverRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime100.jsx)(SlotRoot, _extends({}, rootProps, {
    children: React142.Children.map(children, (child, index2) => index2 === 0 && React142.isValidElement(child) ? React142.cloneElement(child, {
      "data-first-child": ""
    }) : child)
  }));
});
true ? CardCover.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the CardCover if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types63.default.node,
  /**
   * @ignore
   */
  className: import_prop_types63.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types63.default.elementType,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types63.default.shape({
    root: import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types63.default.shape({
    root: import_prop_types63.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object])
} : void 0;
var CardCover_default = CardCover;

// node_modules/@mui/joy/CardOverflow/CardOverflow.js
var React143 = __toESM(require_react());
var import_prop_types64 = __toESM(require_prop_types());

// node_modules/@mui/joy/ModalDialog/modalDialogClasses.js
function getModalDialogUtilityClass(slot) {
  return generateUtilityClass2("MuiModalDialog", slot);
}
var modalDialogClasses = generateUtilityClasses2("MuiModalDialog", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "layoutCenter", "layoutFullscreen"]);
var modalDialogClasses_default = modalDialogClasses;

// node_modules/@mui/joy/CardOverflow/CardOverflow.js
var import_jsx_runtime101 = __toESM(require_jsx_runtime());
var _excluded63 = ["className", "component", "children", "color", "variant", "slots", "slotProps"];
var useUtilityClasses53 = (ownerState) => {
  const {
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses2(slots, getCardOverflowUtilityClass, {});
};
var CardOverflowRoot = styled_default("div", {
  name: "JoyCardOverflow",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const childRadius = "calc(var(--CardOverflow-radius) - var(--variant-borderWidth, 0px))";
  return _extends({
    alignSelf: "stretch",
    // prevent shrinking if parent's align-items is not initial
    position: "relative",
    display: "flex",
    flexDirection: "var(--_CardOverflow-flexDirection)",
    margin: "var(--_CardOverflow-margin)",
    borderRadius: "var(--_CardOverflow-radius)",
    padding: "var(--_CardOverflow-padding)",
    [`.${cardClasses_default.vertical} &, .${cardClasses_default.horizontal} .${cardClasses_default.vertical} &, .${modalDialogClasses_default.root} &`]: {
      "--_CardOverflow-flexDirection": "column",
      // required to make AspectRatio works
      "--AspectRatio-margin": "0 calc(-1 * var(--Card-padding))",
      "--_CardOverflow-margin": "0 var(--CardOverflow-offset)",
      "--_CardOverflow-padding": "0 var(--Card-padding)",
      "&[data-first-child]": {
        "--AspectRatio-radius": `${childRadius} ${childRadius} 0 0`,
        "--_CardOverflow-radius": "var(--CardOverflow-radius) var(--CardOverflow-radius) 0 0",
        "--_CardOverflow-margin": "var(--CardOverflow-offset) var(--CardOverflow-offset) 0"
      },
      "&[data-last-child]": {
        "--AspectRatio-radius": `0 0 ${childRadius} ${childRadius}`,
        "--_CardOverflow-radius": "0 0 var(--CardOverflow-radius) var(--CardOverflow-radius)",
        "--_CardOverflow-margin": "0 var(--CardOverflow-offset) var(--CardOverflow-offset)"
      },
      "&[data-last-child][data-first-child]": {
        "--AspectRatio-radius": childRadius,
        "--_CardOverflow-margin": "var(--CardOverflow-offset)"
      },
      [`& > .${buttonClasses_default.root}:only-child`]: {
        zIndex: 1,
        // prevent button from being covered Link overlay. This can be improved in the future with :has() selector
        width: "calc(100% + -2 * var(--CardOverflow-offset))",
        "--Button-margin": "0 var(--CardOverflow-offset)",
        "--Button-radius": "0 0 var(--CardOverflow-radius) var(--CardOverflow-radius)"
      }
    },
    [`.${cardClasses_default.horizontal} &, .${cardClasses_default.vertical} .${cardClasses_default.horizontal} &`]: {
      "--_CardOverflow-flexDirection": "row",
      "--AspectRatio-margin": "calc(-1 * var(--Card-padding)) 0px",
      "--_CardOverflow-margin": "var(--CardOverflow-offset) 0px",
      "--_CardOverflow-padding": "var(--Card-padding) 0px",
      "&[data-first-child]": {
        "--AspectRatio-radius": `${childRadius} 0 0 ${childRadius}`,
        "--_CardOverflow-radius": "var(--CardOverflow-radius) 0 0 var(--CardOverflow-radius)",
        "--_CardOverflow-margin": "var(--CardOverflow-offset) 0px var(--CardOverflow-offset) var(--CardOverflow-offset)"
      },
      "&[data-last-child]": {
        "--AspectRatio-radius": `0 ${childRadius} ${childRadius} 0`,
        "--_CardOverflow-radius": "0 var(--CardOverflow-radius) var(--CardOverflow-radius) 0",
        "--_CardOverflow-margin": "var(--CardOverflow-offset) var(--CardOverflow-offset) var(--CardOverflow-offset) 0px"
      },
      "&[data-last-child][data-first-child]": {
        "--AspectRatio-radius": childRadius,
        "--_CardOverflow-margin": "var(--CardOverflow-offset)"
      },
      [`& > .${buttonClasses_default.root}:only-child`]: {
        height: "calc(100% + -2 * var(--CardOverflow-offset))",
        "--Button-margin": "var(--CardOverflow-offset) 0",
        "--Button-radius": "0 var(--CardOverflow-radius) var(--CardOverflow-radius) 0"
      }
    }
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
var CardOverflow = React143.forwardRef(function CardOverflow2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyCardOverflow"
  });
  const {
    className,
    component = "div",
    children,
    color = "neutral",
    variant = "plain",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded63);
  const ownerState = _extends({}, props, {
    component,
    color,
    variant
  });
  const classes = useUtilityClasses53(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: CardOverflowRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime101.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? CardOverflow.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the CardOverflow if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types64.default.node,
  /**
   * @ignore
   */
  className: import_prop_types64.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types64.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types64.default.elementType,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types64.default.shape({
    root: import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types64.default.shape({
    root: import_prop_types64.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types64.default.string])
} : void 0;
CardOverflow.muiName = "CardOverflow";
var CardOverflow_default = CardOverflow;

// node_modules/@mui/joy/Checkbox/Checkbox.js
var React146 = __toESM(require_react());
var import_prop_types65 = __toESM(require_prop_types());

// node_modules/@mui/joy/Checkbox/checkboxClasses.js
function getCheckboxUtilityClass(slot) {
  return generateUtilityClass2("MuiCheckbox", slot);
}
var checkboxClasses = generateUtilityClasses2("MuiCheckbox", ["root", "checkbox", "action", "input", "label", "checked", "disabled", "focusVisible", "indeterminate", "colorPrimary", "colorDanger", "colorNeutral", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantOutlined", "variantSoft", "variantSolid"]);
var checkboxClasses_default = checkboxClasses;

// node_modules/@mui/joy/internal/svg-icons/Check.js
var React144 = __toESM(require_react());
var import_jsx_runtime102 = __toESM(require_jsx_runtime());
var Check_default = createSvgIcon((0, import_jsx_runtime102.jsx)("path", {
  d: "M9 16.17 5.53 12.7a.9959.9959 0 0 0-1.41 0c-.39.39-.39 1.02 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71c.39-.39.39-1.02 0-1.41a.9959.9959 0 0 0-1.41 0L9 16.17z"
}), "Check");

// node_modules/@mui/joy/internal/svg-icons/HorizontalRule.js
var React145 = __toESM(require_react());
var import_jsx_runtime103 = __toESM(require_jsx_runtime());
var HorizontalRule_default = createSvgIcon((0, import_jsx_runtime103.jsx)("path", {
  d: "M19 13H5c-.55 0-1-.45-1-1s.45-1 1-1h14c.55 0 1 .45 1 1s-.45 1-1 1z"
}), "HorizontalRule");

// node_modules/@mui/joy/Checkbox/Checkbox.js
var import_jsx_runtime104 = __toESM(require_jsx_runtime());
var import_jsx_runtime105 = __toESM(require_jsx_runtime());
var _excluded64 = ["checked", "uncheckedIcon", "checkedIcon", "label", "defaultChecked", "disabled", "disableIcon", "overlay", "id", "indeterminate", "indeterminateIcon", "name", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required", "value", "color", "variant", "size", "component", "slots", "slotProps"];
var useUtilityClasses54 = (ownerState) => {
  const {
    checked,
    disabled,
    disableIcon,
    focusVisible,
    color,
    variant,
    size: size3,
    indeterminate
  } = ownerState;
  const slots = {
    root: ["root", checked && "checked", disabled && "disabled", focusVisible && "focusVisible", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`],
    checkbox: [
      "checkbox",
      checked && "checked",
      indeterminate && "indeterminate",
      disabled && "disabled"
      // disabled class is necessary for displaying global variant
    ],
    action: [
      "action",
      checked && "checked",
      disableIcon && disabled && "disabled",
      // add disabled class to action element for displaying global variant
      focusVisible && "focusVisible"
    ],
    input: ["input"],
    label: ["label"]
  };
  return composeClasses2(slots, getCheckboxUtilityClass, {});
};
var CheckboxRoot = styled_default("span", {
  name: "JoyCheckbox",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants$plain, _theme$variants, _theme$variants2;
  return _extends({
    "--Icon-fontSize": "var(--Checkbox-size)"
  }, ownerState.size === "sm" && {
    "--Checkbox-size": "1rem",
    "& ~ *": {
      "--FormHelperText-margin": "0 0 0 1.5rem"
    },
    fontSize: theme.vars.fontSize.sm,
    gap: "var(--Checkbox-gap, 0.5rem)"
  }, ownerState.size === "md" && {
    "--Checkbox-size": "1.25rem",
    "& ~ *": {
      "--FormHelperText-margin": "0.25rem 0 0 1.875rem"
    },
    fontSize: theme.vars.fontSize.md,
    gap: "var(--Checkbox-gap, 0.625rem)"
  }, ownerState.size === "lg" && {
    "--Checkbox-size": "1.5rem",
    "& ~ *": {
      "--FormHelperText-margin": "0.375rem 0 0 2.25rem"
    },
    fontSize: theme.vars.fontSize.lg,
    gap: "var(--Checkbox-gap, 0.75rem)"
  }, {
    position: ownerState.overlay ? "initial" : "relative",
    display: "inline-flex",
    fontFamily: theme.vars.fontFamily.body,
    lineHeight: "var(--Checkbox-size)",
    color: theme.vars.palette.text.primary,
    [`&.${checkboxClasses_default.disabled}`]: {
      color: (_theme$variants$plain = theme.variants.plainDisabled) == null || (_theme$variants$plain = _theme$variants$plain[ownerState.color]) == null ? void 0 : _theme$variants$plain.color
    }
  }, ownerState.disableIcon && {
    color: (_theme$variants = theme.variants[ownerState.variant]) == null || (_theme$variants = _theme$variants[ownerState.color]) == null ? void 0 : _theme$variants.color,
    [`&.${checkboxClasses_default.disabled}`]: {
      color: (_theme$variants2 = theme.variants[`${ownerState.variant}Disabled`]) == null || (_theme$variants2 = _theme$variants2[ownerState.color]) == null ? void 0 : _theme$variants2.color
    }
  });
});
var CheckboxCheckbox = styled_default("span", {
  name: "JoyCheckbox",
  slot: "Checkbox",
  overridesResolver: (props, styles2) => styles2.checkbox
})(({
  theme,
  ownerState
}) => {
  var _theme$variants3, _variantStyle$backgro, _theme$variants4, _theme$variants5, _theme$variants6;
  const variantStyle = (_theme$variants3 = theme.variants[`${ownerState.variant}`]) == null ? void 0 : _theme$variants3[ownerState.color];
  return [_extends({
    "--Icon-color": ownerState.color !== "neutral" || ownerState.variant === "solid" ? "currentColor" : theme.vars.palette.text.icon,
    boxSizing: "border-box",
    borderRadius: `min(${theme.vars.radius.sm}, 0.25rem)`,
    width: "var(--Checkbox-size)",
    height: "var(--Checkbox-size)",
    display: "inline-flex",
    justifyContent: "center",
    alignItems: "center",
    flexShrink: 0
  }, ownerState.disableIcon && {
    display: "contents"
  }, {
    [`&.${checkboxClasses_default.checked}, &.${checkboxClasses_default.indeterminate}`]: {
      "--Icon-color": "currentColor"
    }
  }), ...!ownerState.disableIcon ? [_extends({}, variantStyle, {
    backgroundColor: (_variantStyle$backgro = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro : theme.vars.palette.background.surface
  }), {
    "&:hover": {
      "@media (hover: hover)": (_theme$variants4 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants4[ownerState.color]
    }
  }, {
    "&:active": (_theme$variants5 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants5[ownerState.color]
  }, {
    [`&.${checkboxClasses_default.disabled}`]: (_theme$variants6 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants6[ownerState.color]
  }] : []];
});
var CheckboxAction = styled_default("span", {
  name: "JoyCheckbox",
  slot: "Action",
  overridesResolver: (props, styles2) => styles2.action
})(({
  theme,
  ownerState
}) => {
  var _theme$variants7, _theme$variants8, _theme$variants9, _theme$variants10;
  return [{
    borderRadius: `var(--Checkbox-actionRadius, ${ownerState.overlay ? "var(--unstable_actionRadius, inherit)" : "inherit"})`,
    textAlign: "left",
    // prevent text-align inheritance
    position: "absolute",
    top: "calc(-1 * var(--variant-borderWidth, 0px))",
    // clickable on the border and focus outline does not move when checked/unchecked
    left: "calc(-1 * var(--variant-borderWidth, 0px))",
    bottom: "calc(-1 * var(--variant-borderWidth, 0px))",
    right: "calc(-1 * var(--variant-borderWidth, 0px))",
    zIndex: 1,
    // The action element usually cover the area of nearest positioned parent
    [theme.focus.selector]: theme.focus.default
  }, ...ownerState.disableIcon ? [(_theme$variants7 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants7[ownerState.color], {
    "&:hover": (_theme$variants8 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants8[ownerState.color]
  }, {
    "&:active": (_theme$variants9 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants9[ownerState.color]
  }, {
    [`&.${checkboxClasses_default.disabled}`]: (_theme$variants10 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants10[ownerState.color]
  }] : []];
});
var CheckboxInput = styled_default("input", {
  name: "JoyCheckbox",
  slot: "Input",
  overridesResolver: (props, styles2) => styles2.input
})(() => ({
  margin: 0,
  opacity: 0,
  position: "absolute",
  width: "100%",
  height: "100%",
  cursor: "pointer"
}));
var CheckboxLabel = styled_default("label", {
  name: "JoyCheckbox",
  slot: "Label",
  overridesResolver: (props, styles2) => styles2.label
})(({
  ownerState
}) => _extends({
  flex: 1,
  minWidth: 0
}, ownerState.disableIcon && {
  zIndex: 1,
  // label should stay on top of the action.
  pointerEvents: "none"
  // makes hover ineffect.
}));
var defaultCheckedIcon = (0, import_jsx_runtime104.jsx)(Check_default, {});
var defaultIndeterminateIcon = (0, import_jsx_runtime104.jsx)(HorizontalRule_default, {});
var Checkbox = React146.forwardRef(function Checkbox2(inProps, ref) {
  var _ref, _inProps$disabled, _ref2, _inProps$size, _formControl$color;
  const props = useThemeProps2({
    props: inProps,
    name: "JoyCheckbox"
  });
  const {
    checked: checkedProp,
    uncheckedIcon,
    checkedIcon = defaultCheckedIcon,
    label,
    defaultChecked,
    disabled: disabledExternalProp,
    disableIcon = false,
    overlay,
    id: idOverride,
    indeterminate = false,
    indeterminateIcon = defaultIndeterminateIcon,
    name,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible,
    readOnly,
    required,
    value,
    color: colorProp,
    variant: variantProp,
    size: sizeProp = "md",
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded64);
  const formControl = React146.useContext(FormControlContext_default);
  const disabledProp = (_ref = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : formControl == null ? void 0 : formControl.disabled) != null ? _ref : disabledExternalProp;
  const size3 = (_ref2 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref2 : sizeProp;
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React146.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const id = useId(idOverride != null ? idOverride : formControl == null ? void 0 : formControl.htmlFor);
  const useCheckboxProps = {
    checked: checkedProp,
    defaultChecked,
    disabled: disabledProp,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible
  };
  const {
    getInputProps,
    checked,
    disabled,
    focusVisible
  } = useSwitch(useCheckboxProps);
  const isCheckboxActive = checked || indeterminate;
  const activeVariant = variantProp || "solid";
  const inactiveVariant = variantProp || "outlined";
  const variant = isCheckboxActive ? activeVariant : inactiveVariant;
  const color = inProps.color || (formControl != null && formControl.error ? "danger" : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp);
  const activeColor = color || "primary";
  const inactiveColor = color || "neutral";
  const ownerState = _extends({}, props, {
    checked,
    disabled,
    disableIcon,
    overlay,
    focusVisible,
    color: isCheckboxActive ? activeColor : inactiveColor,
    variant,
    size: size3
  });
  const classes = useUtilityClasses54(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: CheckboxRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotCheckbox, checkboxProps] = useSlot("checkbox", {
    className: classes.checkbox,
    elementType: CheckboxCheckbox,
    externalForwardedProps,
    ownerState
  });
  const [SlotAction, actionProps] = useSlot("action", {
    className: classes.action,
    elementType: CheckboxAction,
    externalForwardedProps,
    ownerState
  });
  const [SlotInput, inputProps] = useSlot("input", {
    additionalProps: _extends({
      id,
      name,
      value,
      readOnly,
      role: void 0,
      required: required != null ? required : formControl == null ? void 0 : formControl.required,
      "aria-describedby": formControl == null ? void 0 : formControl["aria-describedby"]
    }, indeterminate && {
      // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-checked#values
      "aria-checked": "mixed"
    }),
    className: classes.input,
    elementType: CheckboxInput,
    externalForwardedProps,
    getSlotProps: getInputProps,
    ownerState
  });
  const [SlotLabel, labelProps] = useSlot("label", {
    additionalProps: {
      htmlFor: id
    },
    className: classes.label,
    elementType: CheckboxLabel,
    externalForwardedProps,
    ownerState
  });
  let icon = uncheckedIcon;
  if (disableIcon) {
    icon = null;
  } else if (indeterminate) {
    icon = indeterminateIcon;
  } else if (checked) {
    icon = checkedIcon;
  }
  return (0, import_jsx_runtime105.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime105.jsxs)(SlotCheckbox, _extends({}, checkboxProps, {
      children: [(0, import_jsx_runtime104.jsx)(SlotAction, _extends({}, actionProps, {
        children: (0, import_jsx_runtime104.jsx)(SlotInput, _extends({}, inputProps))
      })), icon]
    })), label && (0, import_jsx_runtime104.jsx)(TypographyNestedContext.Provider, {
      value: true,
      children: (0, import_jsx_runtime104.jsx)(SlotLabel, _extends({}, labelProps, {
        children: label
      }))
    })]
  }));
});
true ? Checkbox.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the component is checked.
   */
  checked: import_prop_types65.default.bool,
  /**
   * The icon to display when the component is checked.
   * @default <CheckIcon />
   */
  checkedIcon: import_prop_types65.default.node,
  /**
   * @ignore
   */
  children: import_prop_types65.default.node,
  /**
   * Class name applied to the root element.
   */
  className: import_prop_types65.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types65.default.oneOfType([import_prop_types65.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types65.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types65.default.elementType,
  /**
   * The default checked state. Use when the component is not controlled.
   */
  defaultChecked: import_prop_types65.default.bool,
  /**
   * If `true`, the component is disabled.
   */
  disabled: import_prop_types65.default.bool,
  /**
   * If `true`, the checked icon is removed and the selected variant is applied on the `action` element instead.
   * @default false
   */
  disableIcon: import_prop_types65.default.bool,
  /**
   * @ignore
   */
  id: import_prop_types65.default.string,
  /**
   * If `true`, the component appears indeterminate.
   * This does not set the native input element to indeterminate due
   * to inconsistent behavior across browsers.
   * However, we set a `data-indeterminate` attribute on the `input`.
   * @default false
   */
  indeterminate: import_prop_types65.default.bool,
  /**
   * The icon to display when the component is indeterminate.
   * @default <IndeterminateIcon />
   */
  indeterminateIcon: import_prop_types65.default.node,
  /**
   * The label element next to the checkbox.
   */
  label: import_prop_types65.default.node,
  /**
   * The `name` attribute of the input.
   */
  name: import_prop_types65.default.string,
  /**
   * @ignore
   */
  onBlur: import_prop_types65.default.func,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: import_prop_types65.default.func,
  /**
   * @ignore
   */
  onFocus: import_prop_types65.default.func,
  /**
   * @ignore
   */
  onFocusVisible: import_prop_types65.default.func,
  /**
   * If `true`, the root element's position is set to initial which allows the action area to fill the nearest positioned parent.
   * This prop is useful for composing Checkbox with ListItem component.
   * @default false
   */
  overlay: import_prop_types65.default.bool,
  /**
   * If `true`, the component is read only.
   */
  readOnly: import_prop_types65.default.bool,
  /**
   * If `true`, the `input` element is required.
   */
  required: import_prop_types65.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types65.default.oneOf(["sm", "md", "lg"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types65.default.shape({
    action: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object]),
    checkbox: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object]),
    input: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object]),
    label: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object]),
    root: import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types65.default.shape({
    action: import_prop_types65.default.elementType,
    checkbox: import_prop_types65.default.elementType,
    input: import_prop_types65.default.elementType,
    label: import_prop_types65.default.elementType,
    root: import_prop_types65.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types65.default.oneOfType([import_prop_types65.default.arrayOf(import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object, import_prop_types65.default.bool])), import_prop_types65.default.func, import_prop_types65.default.object]),
  /**
   * The icon when `checked` is false.
   */
  uncheckedIcon: import_prop_types65.default.node,
  /**
   * The value of the component. The DOM API casts this to a string.
   * The browser uses "on" as the default value.
   */
  value: import_prop_types65.default.oneOfType([import_prop_types65.default.arrayOf(import_prop_types65.default.string), import_prop_types65.default.number, import_prop_types65.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'solid'
   */
  variant: import_prop_types65.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var Checkbox_default = Checkbox;

// node_modules/@mui/joy/Container/Container.js
var import_prop_types66 = __toESM(require_prop_types());
var Container = createContainer({
  createStyledComponent: styled_default("div", {
    name: "JoyContainer",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  }),
  useThemeProps: (inProps) => useThemeProps2({
    props: inProps,
    name: "JoyContainer"
  })
});
true ? Container.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types66.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types66.default.elementType,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: import_prop_types66.default.bool,
  /**
   * Set the max-width to match the min-width of the current breakpoint.
   * This is useful if you'd prefer to design for a fixed set of sizes
   * instead of trying to accommodate a fully fluid viewport.
   * It's fluid by default.
   * @default false
   */
  fixed: import_prop_types66.default.bool,
  /**
   * Determine the max-width of the container.
   * The container width grows with the size of the screen.
   * Set to `false` to disable `maxWidth`.
   * @default 'lg'
   */
  maxWidth: import_prop_types66.default.oneOfType([import_prop_types66.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), import_prop_types66.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types66.default.oneOfType([import_prop_types66.default.arrayOf(import_prop_types66.default.oneOfType([import_prop_types66.default.func, import_prop_types66.default.object, import_prop_types66.default.bool])), import_prop_types66.default.func, import_prop_types66.default.object])
} : void 0;
var Container_default = Container;

// node_modules/@mui/joy/Container/containerClasses.js
function getContainerUtilityClass(slot) {
  return generateUtilityClass2("MuiContainer", slot);
}
var containerClasses = generateUtilityClasses2("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]);
var containerClasses_default = containerClasses;

// node_modules/@mui/joy/CssBaseline/CssBaseline.js
var React147 = __toESM(require_react());
var import_prop_types67 = __toESM(require_prop_types());
var import_jsx_runtime106 = __toESM(require_jsx_runtime());
var import_jsx_runtime107 = __toESM(require_jsx_runtime());
function CssBaseline(props) {
  const {
    children,
    disableColorScheme = false
  } = props;
  return (0, import_jsx_runtime107.jsxs)(React147.Fragment, {
    children: [(0, import_jsx_runtime106.jsx)(GlobalStyles_default2, {
      styles: (theme) => {
        var _components$JoyTypogr, _components;
        const colorSchemeStyles = {};
        if (!disableColorScheme) {
          Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {
            var _scheme$palette;
            colorSchemeStyles[theme.getColorSchemeSelector(key).replace(/\s*&/, "")] = {
              colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode
            };
          });
        }
        const defaultTypographyLevel = (_components$JoyTypogr = (_components = theme.components) == null || (_components = _components.JoyTypography) == null || (_components = _components.defaultProps) == null ? void 0 : _components.level) != null ? _components$JoyTypogr : "body-md";
        return _extends({
          html: {
            WebkitFontSmoothing: "antialiased",
            MozOsxFontSmoothing: "grayscale",
            // Change from `box-sizing: content-box` so that `width`
            // is not affected by `padding` or `border`.
            boxSizing: "border-box",
            // Fix font resize problem in iOS
            WebkitTextSizeAdjust: "100%"
          },
          "*, *::before, *::after": {
            boxSizing: "inherit"
          },
          "strong, b": {
            fontWeight: theme.vars.fontWeight.lg
          },
          body: _extends({
            margin: 0,
            // Remove the margin in all browsers.
            color: theme.vars.palette.text.primary,
            fontFamily: theme.vars.fontFamily.body
          }, theme.typography[defaultTypographyLevel], {
            backgroundColor: theme.vars.palette.background.body,
            "@media print": {
              // Save printer ink.
              backgroundColor: theme.vars.palette.common.white
            },
            // Add support for document.body.requestFullScreen().
            // Other elements, if background transparent, are not supported.
            "&::backdrop": {
              backgroundColor: theme.vars.palette.background.backdrop
            }
          })
        }, colorSchemeStyles);
      },
      defaultTheme: defaultTheme_default
    }), children]
  });
}
true ? CssBaseline.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * You can wrap a node.
   */
  children: import_prop_types67.default.node,
  /**
   * Disable `color-scheme` CSS property.
   *
   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
   * For browser support, check out https://caniuse.com/?search=color-scheme
   * @default false
   */
  disableColorScheme: import_prop_types67.default.bool
} : void 0;
var CssBaseline_default = CssBaseline;

// node_modules/@mui/joy/DialogActions/DialogActions.js
var React148 = __toESM(require_react());
var import_prop_types68 = __toESM(require_prop_types());

// node_modules/@mui/joy/DialogActions/dialogActionsClasses.js
function getDialogActionsUtilityClass(slot) {
  return generateUtilityClass2("MuiDialogActions", slot);
}
var dialogActionsClasses = generateUtilityClasses2("MuiDialogActions", ["root"]);
var dialogActionsClasses_default = dialogActionsClasses;

// node_modules/@mui/joy/DialogActions/DialogActions.js
var import_jsx_runtime108 = __toESM(require_jsx_runtime());
var _excluded65 = ["component", "children", "buttonFlex", "orientation", "slots", "slotProps"];
var useUtilityClasses55 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses2(slots, getDialogActionsUtilityClass, {});
};
var DialogActionsRoot = styled_default(StyledCardActionsRoot, {
  name: "JoyDialogActions",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({});
var DialogActions = React148.forwardRef(function DialogActions2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyDialogActions"
  });
  const {
    component = "div",
    children,
    buttonFlex,
    orientation = "horizontal-reverse",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded65);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const ownerState = _extends({}, props, {
    component,
    buttonFlex,
    orientation
  });
  const classes = useUtilityClasses55();
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: DialogActionsRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime108.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? DialogActions.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The CSS `flex` for the Button and its wrapper.
   */
  buttonFlex: import_prop_types68.default.oneOfType([import_prop_types68.default.number, import_prop_types68.default.string]),
  /**
   * Used to render icon or text elements inside the DialogActions if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types68.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types68.default.elementType,
  /**
   * The component orientation.
   * @default 'horizontal-reverse'
   */
  orientation: import_prop_types68.default.oneOf(["horizontal-reverse", "horizontal", "vertical"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types68.default.shape({
    root: import_prop_types68.default.oneOfType([import_prop_types68.default.func, import_prop_types68.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types68.default.shape({
    root: import_prop_types68.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types68.default.oneOfType([import_prop_types68.default.arrayOf(import_prop_types68.default.oneOfType([import_prop_types68.default.func, import_prop_types68.default.object, import_prop_types68.default.bool])), import_prop_types68.default.func, import_prop_types68.default.object])
} : void 0;
var DialogActions_default = DialogActions;

// node_modules/@mui/joy/DialogContent/DialogContent.js
var React150 = __toESM(require_react());
var import_prop_types69 = __toESM(require_prop_types());

// node_modules/@mui/joy/DialogContent/dialogContentClasses.js
function getDialogContentUtilityClass(slot) {
  return generateUtilityClass2("MuiDialogContent", slot);
}
var dialogContentClasses = generateUtilityClasses2("MuiDialogContent", ["root"]);
var dialogContentClasses_default = dialogContentClasses;

// node_modules/@mui/joy/ModalDialog/ModalDialogVariantColorContext.js
var React149 = __toESM(require_react());
var ModalDialogVariantColorContext = React149.createContext(void 0);
if (true) {
  ModalDialogVariantColorContext.displayName = "ModalDialogVariantColorContext";
}
var ModalDialogVariantColorContext_default = ModalDialogVariantColorContext;

// node_modules/@mui/joy/DialogTitle/dialogTitleClasses.js
function getDialogTitleUtilityClass(slot) {
  return generateUtilityClass2("MuiDialogTitle", slot);
}
var dialogTitleClasses = generateUtilityClasses2("MuiDialogTitle", ["root", "h1", "h2", "h3", "h4", "title-lg", "title-md", "title-sm", "body-lg", "body-md", "body-sm", "body-xs", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var dialogTitleClasses_default = dialogTitleClasses;

// node_modules/@mui/joy/DialogContent/DialogContent.js
var import_jsx_runtime109 = __toESM(require_jsx_runtime());
var _excluded66 = ["component", "children", "orientation", "slots", "slotProps"];
var useUtilityClasses56 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses2(slots, getDialogContentUtilityClass, {});
};
var DialogContentRoot = styled_default(StyledCardContentRoot, {
  name: "JoyDialogContent",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme
}) => ({
  color: `var(--DialogContent-color, ${theme.vars.palette.text.tertiary})`,
  overflow: "auto",
  margin: "var(--unstable_DialogContent-margin)",
  [`.${modalDialogClasses_default.root} > .${dialogTitleClasses_default.root} + &`]: {
    "--unstable_DialogContent-margin": "-0.375em 0 0 0"
  }
}));
var DialogContent = React150.forwardRef(function DialogContent2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyDialogContent"
  });
  const context = React150.useContext(ModalDialogVariantColorContext_default);
  const {
    component = "div",
    children,
    orientation = "vertical",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded66);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const ownerState = _extends({}, props, {
    component,
    orientation
  });
  const classes = useUtilityClasses56();
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: DialogContentRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      id: context == null ? void 0 : context.describedBy
    }
  });
  return (0, import_jsx_runtime109.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? DialogContent.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the CardContent if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types69.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types69.default.elementType,
  /**
   * The component orientation.
   * @default 'vertical'
   */
  orientation: import_prop_types69.default.oneOf(["horizontal", "vertical"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types69.default.shape({
    root: import_prop_types69.default.oneOfType([import_prop_types69.default.func, import_prop_types69.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types69.default.shape({
    root: import_prop_types69.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types69.default.oneOfType([import_prop_types69.default.arrayOf(import_prop_types69.default.oneOfType([import_prop_types69.default.func, import_prop_types69.default.object, import_prop_types69.default.bool])), import_prop_types69.default.func, import_prop_types69.default.object])
} : void 0;
var DialogContent_default = DialogContent;

// node_modules/@mui/joy/DialogTitle/DialogTitle.js
var React152 = __toESM(require_react());
var import_prop_types70 = __toESM(require_prop_types());

// node_modules/@mui/joy/ModalDialog/ModalDialogSizeContext.js
var React151 = __toESM(require_react());
var ModalDialogSizeContext = React151.createContext(void 0);
if (true) {
  ModalDialogSizeContext.displayName = "ModalDialogSizeContext";
}
var ModalDialogSizeContext_default = ModalDialogSizeContext;

// node_modules/@mui/joy/DialogTitle/DialogTitle.js
var import_jsx_runtime110 = __toESM(require_jsx_runtime());
var _excluded67 = ["component", "children", "variant", "color", "level", "slots", "slotProps"];
var useUtilityClasses57 = (ownerState) => {
  const {
    level,
    color,
    variant
  } = ownerState;
  const slots = {
    root: ["root", level, color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`]
  };
  return composeClasses2(slots, getDialogTitleUtilityClass, {});
};
var DialogTitleRoot = styled_default("h2", {
  name: "JoyDialogTitle",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$typography, _theme$variants$owner;
  const lineHeight = ownerState.level !== "inherit" ? (_theme$typography = theme.typography[ownerState.level]) == null ? void 0 : _theme$typography.lineHeight : "1";
  return _extends({
    "--Icon-fontSize": `calc(1em * ${lineHeight})`
  }, ownerState.color && {
    "--Icon-color": "currentColor"
  }, {
    display: "flex",
    gap: "clamp(4px, 0.375em, 0.75rem)",
    margin: "var(--unstable_DialogTitle-margin, 0px)"
  }, ownerState.level && ownerState.level !== "inherit" && theme.typography[ownerState.level], {
    color: "inherit"
  }, ownerState.variant && _extends({
    borderRadius: theme.vars.radius.xs,
    paddingBlock: "min(0.1em, 4px)",
    paddingInline: "0.25em"
  }, (_theme$variants$owner = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants$owner[ownerState.color]), {
    [`.${cardOverflowClasses_default.root} > &`]: {
      "--unstable_DialogTitle-margin": "var(--Card-padding) 0"
    }
  });
});
var sizeToLevel = {
  sm: "title-md",
  md: "title-lg",
  lg: "h4"
};
var DialogTitle = React152.forwardRef(function DialogTitle2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyDialogTitle"
  });
  const size3 = React152.useContext(ModalDialogSizeContext_default);
  const context = React152.useContext(ModalDialogVariantColorContext_default);
  const {
    component = "h2",
    children,
    variant,
    color: colorProp,
    level = sizeToLevel[size3 || "md"],
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded67);
  const color = inProps.color || (variant ? colorProp != null ? colorProp : "neutral" : colorProp);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const ownerState = _extends({}, props, {
    component,
    color,
    variant,
    level
  });
  const classes = useUtilityClasses57(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: DialogTitleRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      id: context == null ? void 0 : context.labelledBy
    }
  });
  return (0, import_jsx_runtime110.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? DialogTitle.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the DialogTitle if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types70.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: import_prop_types70.default.oneOf(["danger", "neutral", "primary", "success", "warning"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types70.default.elementType,
  /**
   * Applies the theme typography styles.
   * @default { sm: 'title-md', md: 'title-lg', lg: 'h4' }
   */
  level: import_prop_types70.default.oneOf(["body-lg", "body-md", "body-sm", "body-xs", "h1", "h2", "h3", "h4", "inherit", "title-lg", "title-md", "title-sm"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types70.default.shape({
    root: import_prop_types70.default.oneOfType([import_prop_types70.default.func, import_prop_types70.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types70.default.shape({
    root: import_prop_types70.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types70.default.oneOfType([import_prop_types70.default.arrayOf(import_prop_types70.default.oneOfType([import_prop_types70.default.func, import_prop_types70.default.object, import_prop_types70.default.bool])), import_prop_types70.default.func, import_prop_types70.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   */
  variant: import_prop_types70.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var DialogTitle_default = DialogTitle;

// node_modules/@mui/joy/Divider/Divider.js
var React153 = __toESM(require_react());
var import_prop_types71 = __toESM(require_prop_types());
var import_jsx_runtime111 = __toESM(require_jsx_runtime());
var _excluded68 = ["className", "children", "component", "inset", "orientation", "role", "slots", "slotProps"];
var useUtilityClasses58 = (ownerState) => {
  const {
    orientation,
    inset
  } = ownerState;
  const slots = {
    root: ["root", orientation, inset && `inset${capitalize(inset)}`]
  };
  return composeClasses2(slots, getDividerUtilityClass, {});
};
var DividerRoot = styled_default("hr", {
  name: "JoyDivider",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => _extends({
  "--Divider-thickness": "1px",
  "--Divider-lineColor": theme.vars.palette.divider
}, ownerState.inset === "none" && {
  "--_Divider-inset": "0px"
}, ownerState.inset === "context" && {
  "--_Divider-inset": "var(--Divider-inset, 0px)"
}, {
  margin: "initial",
  // reset margin for `hr` tag
  marginInline: ownerState.orientation === "vertical" ? "initial" : "var(--_Divider-inset)",
  marginBlock: ownerState.orientation === "vertical" ? "var(--_Divider-inset)" : "initial",
  position: "relative",
  alignSelf: "stretch",
  flexShrink: 0
}, ownerState.children ? _extends({
  "--Divider-gap": theme.spacing(1),
  "--Divider-childPosition": "50%",
  display: "flex",
  flexDirection: ownerState.orientation === "vertical" ? "column" : "row",
  alignItems: "center",
  whiteSpace: "nowrap",
  textAlign: "center",
  border: 0
}, theme.typography["body-sm"], {
  "&::before, &::after": {
    position: "relative",
    inlineSize: ownerState.orientation === "vertical" ? "var(--Divider-thickness)" : "initial",
    blockSize: ownerState.orientation === "vertical" ? "initial" : "var(--Divider-thickness)",
    backgroundColor: "var(--Divider-lineColor)",
    // use logical size + background is better than border because they work with gradient.
    content: '""'
  },
  "&::before": {
    marginInlineEnd: ownerState.orientation === "vertical" ? "initial" : "min(var(--Divider-childPosition) * 999, var(--Divider-gap))",
    marginBlockEnd: ownerState.orientation === "vertical" ? "min(var(--Divider-childPosition) * 999, var(--Divider-gap))" : "initial",
    flexBasis: "var(--Divider-childPosition)"
  },
  "&::after": {
    marginInlineStart: ownerState.orientation === "vertical" ? "initial" : "min((100% - var(--Divider-childPosition)) * 999, var(--Divider-gap))",
    marginBlockStart: ownerState.orientation === "vertical" ? "min((100% - var(--Divider-childPosition)) * 999, var(--Divider-gap))" : "initial",
    flexBasis: "calc(100% - var(--Divider-childPosition))"
  }
}) : {
  border: "none",
  // reset the border for `hr` tag
  listStyle: "none",
  backgroundColor: "var(--Divider-lineColor)",
  // use logical size + background is better than border because they work with gradient.
  inlineSize: ownerState.orientation === "vertical" ? "var(--Divider-thickness)" : "initial",
  blockSize: ownerState.orientation === "vertical" ? "initial" : "var(--Divider-thickness)"
}));
var Divider = React153.forwardRef(function Divider2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyDivider"
  });
  const {
    className,
    children,
    component = children !== void 0 && children !== null ? "div" : "hr",
    inset,
    orientation = "horizontal",
    role = component !== "hr" ? "separator" : void 0,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded68);
  const ownerState = _extends({}, props, {
    inset,
    role,
    orientation,
    component
  });
  const classes = useUtilityClasses58(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: DividerRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: _extends({
      as: component,
      role
    }, role === "separator" && orientation === "vertical" && {
      // The implicit aria-orientation of separator is 'horizontal'
      // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/separator_role
      "aria-orientation": "vertical"
    })
  });
  return (0, import_jsx_runtime111.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? Divider.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types71.default.node,
  /**
   * @ignore
   */
  className: import_prop_types71.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types71.default.elementType,
  /**
   * Class name applied to the divider to shrink or stretch the line based on the orientation.
   */
  inset: import_prop_types71.default.oneOfType([import_prop_types71.default.oneOf(["none", "context"]), import_prop_types71.default.string]),
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types71.default.oneOf(["horizontal", "vertical"]),
  /**
   * @ignore
   */
  role: import_prop_types71.default.string,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types71.default.shape({
    root: import_prop_types71.default.oneOfType([import_prop_types71.default.func, import_prop_types71.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types71.default.shape({
    root: import_prop_types71.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types71.default.oneOfType([import_prop_types71.default.arrayOf(import_prop_types71.default.oneOfType([import_prop_types71.default.func, import_prop_types71.default.object, import_prop_types71.default.bool])), import_prop_types71.default.func, import_prop_types71.default.object])
} : void 0;
Divider.muiName = "Divider";
var Divider_default = Divider;

// node_modules/@mui/joy/Drawer/Drawer.js
var React156 = __toESM(require_react());
var import_prop_types73 = __toESM(require_prop_types());

// node_modules/@mui/joy/Modal/Modal.js
var React155 = __toESM(require_react());
var import_prop_types72 = __toESM(require_prop_types());

// node_modules/@mui/joy/Modal/modalClasses.js
function getModalUtilityClass2(slot) {
  return generateUtilityClass2("MuiModal", slot);
}
var modalClasses2 = generateUtilityClasses2("MuiModal", ["root", "hidden", "backdrop"]);
var modalClasses_default = modalClasses2;

// node_modules/@mui/joy/Modal/CloseModalContext.js
var React154 = __toESM(require_react());
var CloseModalContext = React154.createContext(void 0);
if (true) {
  CloseModalContext.displayName = "CloseModalContext";
}
var CloseModalContext_default = CloseModalContext;

// node_modules/@mui/joy/Modal/Modal.js
var import_jsx_runtime112 = __toESM(require_jsx_runtime());
var import_jsx_runtime113 = __toESM(require_jsx_runtime());
var _excluded69 = ["children", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onClose", "onKeyDown", "open", "component", "slots", "slotProps"];
var useUtilityClasses59 = (ownerState) => {
  const {
    open
  } = ownerState;
  const slots = {
    root: ["root", !open && "hidden"],
    backdrop: ["backdrop"]
  };
  return composeClasses2(slots, getModalUtilityClass2, {});
};
var StyledModalRoot = styled_default("div")(({
  ownerState,
  theme
}) => _extends({
  "--unstable_popup-zIndex": `calc(${theme.vars.zIndex.modal} + 1)`,
  '& ~ [role="listbox"]': {
    // target all the listbox (Autocomplete, Menu, Select, etc.) that uses portal
    "--unstable_popup-zIndex": `calc(${theme.vars.zIndex.modal} + 1)`
  },
  position: "fixed",
  zIndex: theme.vars.zIndex.modal,
  right: 0,
  bottom: 0,
  top: 0,
  left: 0
}, !ownerState.open && {
  visibility: "hidden"
}));
var ModalRoot = styled_default(StyledModalRoot, {
  name: "JoyModal",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({});
var StyledModalBackdrop = styled_default("div")(({
  theme
}) => ({
  zIndex: -1,
  position: "fixed",
  right: 0,
  bottom: 0,
  top: 0,
  left: 0,
  backgroundColor: theme.vars.palette.background.backdrop,
  WebkitTapHighlightColor: "transparent",
  backdropFilter: "blur(8px)"
}));
var ModalBackdrop = styled_default(StyledModalBackdrop, {
  name: "JoyModal",
  slot: "Backdrop",
  overridesResolver: (props, styles2) => styles2.backdrop
})({});
var Modal3 = React155.forwardRef(function Modal4(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyModal"
  });
  const {
    children,
    container,
    disableAutoFocus = false,
    disableEnforceFocus = false,
    disableEscapeKeyDown = false,
    disablePortal = false,
    disableRestoreFocus = false,
    disableScrollLock = false,
    hideBackdrop = false,
    keepMounted = false,
    onClose,
    open,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded69);
  const ownerState = _extends({}, props, {
    disableAutoFocus,
    disableEnforceFocus,
    disableEscapeKeyDown,
    disablePortal,
    disableRestoreFocus,
    disableScrollLock,
    hideBackdrop,
    keepMounted
  });
  const {
    getRootProps,
    getBackdropProps,
    rootRef,
    portalRef,
    isTopModal
  } = useModal(_extends({}, ownerState, {
    rootRef: ref
  }));
  const classes = useUtilityClasses59(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref: rootRef,
    className: classes.root,
    elementType: ModalRoot,
    externalForwardedProps,
    getSlotProps: getRootProps,
    ownerState
  });
  const [SlotBackdrop, backdropProps] = useSlot("backdrop", {
    className: classes.backdrop,
    elementType: ModalBackdrop,
    externalForwardedProps,
    getSlotProps: getBackdropProps,
    ownerState
  });
  if (!keepMounted && !open) {
    return null;
  }
  return (0, import_jsx_runtime112.jsx)(CloseModalContext_default.Provider, {
    value: onClose,
    children: (0, import_jsx_runtime112.jsx)(Portal, {
      ref: portalRef,
      container,
      disablePortal,
      children: (0, import_jsx_runtime113.jsxs)(SlotRoot, _extends({}, rootProps, {
        children: [!hideBackdrop ? (0, import_jsx_runtime112.jsx)(SlotBackdrop, _extends({}, backdropProps)) : null, (0, import_jsx_runtime112.jsx)(FocusTrap, {
          disableEnforceFocus,
          disableAutoFocus,
          disableRestoreFocus,
          isEnabled: isTopModal,
          open,
          children: React155.Children.only(children) && React155.cloneElement(children, _extends({}, children.props.tabIndex === void 0 && {
            tabIndex: -1
          }))
        })]
      }))
    })
  });
});
true ? Modal3.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A single child content element.
   */
  children: elementAcceptingRef_default.isRequired,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types72.default.elementType,
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: import_prop_types72.default.oneOfType([HTMLElementType, import_prop_types72.default.func]),
  /**
   * If `true`, the modal will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableAutoFocus: import_prop_types72.default.bool,
  /**
   * If `true`, the modal will not prevent focus from leaving the modal while open.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableEnforceFocus: import_prop_types72.default.bool,
  /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */
  disableEscapeKeyDown: import_prop_types72.default.bool,
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: import_prop_types72.default.bool,
  /**
   * If `true`, the modal will not restore focus to previously focused element once
   * modal is hidden or unmounted.
   * @default false
   */
  disableRestoreFocus: import_prop_types72.default.bool,
  /**
   * Disable the scroll lock behavior.
   * @default false
   */
  disableScrollLock: import_prop_types72.default.bool,
  /**
   * If `true`, the backdrop is not rendered.
   * @default false
   */
  hideBackdrop: import_prop_types72.default.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Modal.
   * @default false
   */
  keepMounted: import_prop_types72.default.bool,
  /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"closeClick"`.
   */
  onClose: import_prop_types72.default.func,
  /**
   * @ignore
   */
  onKeyDown: import_prop_types72.default.func,
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types72.default.bool.isRequired,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types72.default.shape({
    backdrop: import_prop_types72.default.oneOfType([import_prop_types72.default.func, import_prop_types72.default.object]),
    root: import_prop_types72.default.oneOfType([import_prop_types72.default.func, import_prop_types72.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types72.default.shape({
    backdrop: import_prop_types72.default.elementType,
    root: import_prop_types72.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types72.default.oneOfType([import_prop_types72.default.arrayOf(import_prop_types72.default.oneOfType([import_prop_types72.default.func, import_prop_types72.default.object, import_prop_types72.default.bool])), import_prop_types72.default.func, import_prop_types72.default.object])
} : void 0;
var Modal_default = Modal3;

// node_modules/@mui/joy/Drawer/drawerClasses.js
function getDrawerUtilityClass(slot) {
  return generateUtilityClass2("MuiDrawer", slot);
}
var drawerClasses = generateUtilityClasses2("MuiDrawer", ["root", "hidden", "backdrop", "content", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var drawerClasses_default = drawerClasses;

// node_modules/@mui/joy/Drawer/Drawer.js
var import_jsx_runtime114 = __toESM(require_jsx_runtime());
var import_jsx_runtime115 = __toESM(require_jsx_runtime());
var _excluded70 = ["children", "anchor", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "color", "variant", "invertedColors", "size", "onClose", "onKeyDown", "open", "component", "slots", "slotProps"];
var useUtilityClasses60 = (ownerState) => {
  const {
    open,
    variant,
    color,
    size: size3
  } = ownerState;
  const slots = {
    root: ["root", !open && "hidden", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`],
    backdrop: ["backdrop"],
    content: ["content"]
  };
  return composeClasses2(slots, getDrawerUtilityClass, {});
};
var DrawerRoot = styled_default(StyledModalRoot, {
  name: "JoyDrawer",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  ownerState
}) => _extends({
  "--Drawer-transitionDuration": "0.3s",
  "--Drawer-transitionFunction": "ease",
  "--ModalClose-radius": "max((var(--Drawer-contentRadius) - var(--variant-borderWidth, 0px)) - var(--ModalClose-inset), min(var(--ModalClose-inset) / 2, (var(--Drawer-contentRadius) - var(--variant-borderWidth, 0px)) / 2))"
}, ownerState.size === "sm" && {
  "--ModalClose-inset": "0.5rem",
  "--Drawer-verticalSize": "clamp(350px, 30%, 100%)",
  "--Drawer-horizontalSize": "clamp(256px, 20%, 100%)",
  "--Drawer-titleMargin": "0.625rem 0.75rem calc(0.625rem / 2)"
}, ownerState.size === "md" && {
  "--ModalClose-inset": "0.5rem",
  "--Drawer-verticalSize": "clamp(400px, 45%, 100%)",
  "--Drawer-horizontalSize": "clamp(300px, 30%, 100%)",
  "--Drawer-titleMargin": "0.75rem 0.75rem calc(0.75rem / 2)"
}, ownerState.size === "lg" && {
  "--ModalClose-inset": "0.75rem",
  "--Drawer-verticalSize": "clamp(500px, 60%, 100%)",
  "--Drawer-horizontalSize": "clamp(440px, 60%, 100%)",
  "--Drawer-titleMargin": "1rem 1rem calc(1rem / 2)"
}, {
  transitionProperty: "visibility",
  transitionDelay: ownerState.open ? "0s" : "var(--Drawer-transitionDuration)"
}, !ownerState.open && {
  visibility: "hidden"
}));
var DrawerBackdrop = styled_default(StyledModalBackdrop, {
  name: "JoyDrawer",
  slot: "Backdrop",
  overridesResolver: (props, styles2) => styles2.backdrop
})(({
  ownerState
}) => ({
  opacity: ownerState.open ? 1 : 0,
  transition: "opacity var(--Drawer-transitionDuration) ease-in-out"
}));
var DrawerContent = styled_default("div", {
  name: "JoyDrawer",
  slot: "Content",
  overridesResolver: (props, styles2) => styles2.content
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return _extends({}, theme.typography[`body-${ownerState.size}`], {
    boxShadow: theme.shadow.md,
    backgroundColor: theme.vars.palette.background.surface,
    outline: 0,
    display: "flex",
    flexDirection: "column",
    position: "fixed",
    boxSizing: "border-box",
    overflow: "auto"
  }, ownerState.anchor === "left" && {
    top: 0,
    left: 0,
    transform: ownerState.open ? "translateX(0)" : "translateX(-100%)"
  }, ownerState.anchor === "right" && {
    top: 0,
    right: 0,
    transform: ownerState.open ? "translateX(0)" : "translateX(100%)"
  }, ownerState.anchor === "top" && {
    top: 0,
    transform: ownerState.open ? "translateY(0)" : "translateY(-100%)"
  }, ownerState.anchor === "bottom" && {
    bottom: 0,
    transform: ownerState.open ? "translateY(0)" : "translateY(100%)"
  }, {
    height: ownerState.anchor.match(/(left|right)/) ? "100%" : "min(100vh, var(--Drawer-verticalSize))",
    width: ownerState.anchor.match(/(top|bottom)/) ? "100vw" : "min(100vw, var(--Drawer-horizontalSize))",
    transition: "transform var(--Drawer-transitionDuration) var(--Drawer-transitionFunction)"
  }, ownerState.variant === "solid" && ownerState.color && ownerState.invertedColors && applySolidInversion(ownerState.color)(theme), ownerState.variant === "soft" && ownerState.color && ownerState.invertedColors && applySoftInversion(ownerState.color)(theme), (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    [`& > .${dialogTitleClasses_default.root}`]: {
      "--unstable_DialogTitle-margin": "var(--Drawer-titleMargin)"
    }
  });
});
var Drawer = React156.forwardRef(function Drawer2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyDrawer"
  });
  const {
    children,
    anchor = "left",
    container,
    disableAutoFocus = false,
    disableEnforceFocus = false,
    disableEscapeKeyDown = false,
    disablePortal = false,
    disableRestoreFocus = false,
    disableScrollLock = false,
    hideBackdrop = false,
    color = "neutral",
    variant = "plain",
    invertedColors = false,
    size: size3 = "md",
    onClose,
    open,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded70);
  const ownerState = _extends({}, props, {
    anchor,
    disableAutoFocus,
    disableEnforceFocus,
    disableEscapeKeyDown,
    disablePortal,
    disableRestoreFocus,
    disableScrollLock,
    hideBackdrop,
    invertedColors,
    color,
    variant,
    size: size3
  });
  const {
    getRootProps,
    getBackdropProps,
    rootRef,
    portalRef,
    isTopModal
  } = useModal(_extends({}, ownerState, {
    rootRef: ref,
    children: null
  }));
  const classes = useUtilityClasses60(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const labelledBy = useId();
  const describedBy = useId();
  const contextValue = React156.useMemo(() => ({
    variant,
    color,
    labelledBy,
    describedBy
  }), [color, variant, labelledBy, describedBy]);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref: rootRef,
    className: classes.root,
    elementType: DrawerRoot,
    externalForwardedProps,
    getSlotProps: getRootProps,
    ownerState
  });
  const [SlotBackdrop, backdropProps] = useSlot("backdrop", {
    className: classes.backdrop,
    elementType: DrawerBackdrop,
    externalForwardedProps,
    getSlotProps: getBackdropProps,
    ownerState
  });
  const [SlotContent, contentProps] = useSlot("content", {
    className: classes.content,
    elementType: DrawerContent,
    additionalProps: {
      tabIndex: -1,
      role: "dialog",
      "aria-modal": "true",
      "aria-labelledby": labelledBy,
      "aria-describedby": describedBy
    },
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime114.jsx)(CloseModalContext_default.Provider, {
    value: onClose,
    children: (0, import_jsx_runtime114.jsx)(ModalDialogSizeContext_default.Provider, {
      value: size3,
      children: (0, import_jsx_runtime114.jsx)(ModalDialogVariantColorContext_default.Provider, {
        value: contextValue,
        children: (0, import_jsx_runtime114.jsx)(Portal, {
          ref: portalRef,
          container,
          disablePortal,
          children: (0, import_jsx_runtime115.jsxs)(SlotRoot, _extends({}, rootProps, {
            children: [!hideBackdrop ? (0, import_jsx_runtime114.jsx)(SlotBackdrop, _extends({}, backdropProps)) : null, (0, import_jsx_runtime114.jsx)(FocusTrap, {
              disableEnforceFocus,
              disableAutoFocus,
              disableRestoreFocus,
              isEnabled: isTopModal,
              open,
              children: (0, import_jsx_runtime114.jsx)(SlotContent, _extends({}, contentProps, {
                children
              }))
            })]
          }))
        })
      })
    })
  });
});
true ? Drawer.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Side from which the drawer will appear.
   * @default 'left'
   */
  anchor: import_prop_types73.default.oneOf(["bottom", "left", "right", "top"]),
  /**
   * @ignore
   */
  children: import_prop_types73.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types73.default.oneOf(["danger", "neutral", "primary", "success", "warning"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types73.default.elementType,
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: import_prop_types73.default.oneOfType([HTMLElementType, import_prop_types73.default.func]),
  /**
   * If `true`, the modal will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableAutoFocus: import_prop_types73.default.bool,
  /**
   * If `true`, the modal will not prevent focus from leaving the modal while open.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableEnforceFocus: import_prop_types73.default.bool,
  /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */
  disableEscapeKeyDown: import_prop_types73.default.bool,
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: import_prop_types73.default.bool,
  /**
   * If `true`, the modal will not restore focus to previously focused element once
   * modal is hidden or unmounted.
   * @default false
   */
  disableRestoreFocus: import_prop_types73.default.bool,
  /**
   * Disable the scroll lock behavior.
   * @default false
   */
  disableScrollLock: import_prop_types73.default.bool,
  /**
   * If `true`, the backdrop is not rendered.
   * @default false
   */
  hideBackdrop: import_prop_types73.default.bool,
  /**
   * If `true`, the children with an implicit color prop invert their colors to match the component's variant and color.
   * @default false
   */
  invertedColors: import_prop_types73.default.bool,
  /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"closeClick"`.
   */
  onClose: import_prop_types73.default.func,
  /**
   * @ignore
   */
  onKeyDown: import_prop_types73.default.func,
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types73.default.bool.isRequired,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types73.default.oneOf(["sm", "md", "lg"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types73.default.shape({
    backdrop: import_prop_types73.default.oneOfType([import_prop_types73.default.func, import_prop_types73.default.object]),
    content: import_prop_types73.default.oneOfType([import_prop_types73.default.func, import_prop_types73.default.object]),
    root: import_prop_types73.default.oneOfType([import_prop_types73.default.func, import_prop_types73.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types73.default.shape({
    backdrop: import_prop_types73.default.elementType,
    content: import_prop_types73.default.elementType,
    root: import_prop_types73.default.elementType
  }),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types73.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var Drawer_default = Drawer;

// node_modules/@mui/joy/FormControl/FormControl.js
var React157 = __toESM(require_react());
var import_prop_types74 = __toESM(require_prop_types());

// node_modules/@mui/joy/FormControl/formControlClasses.js
function getFormControlUtilityClass2(slot) {
  return generateUtilityClass2("MuiFormControl", slot);
}
var formControlClasses2 = generateUtilityClasses2("MuiFormControl", ["root", "error", "disabled", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "sizeSm", "sizeMd", "sizeLg", "horizontal", "vertical"]);
var formControlClasses_default = formControlClasses2;

// node_modules/@mui/joy/Switch/switchClasses.js
function getSwitchUtilityClass2(slot) {
  return generateUtilityClass2("MuiSwitch", slot);
}
var switchClasses2 = generateUtilityClasses2("MuiSwitch", ["root", "checked", "disabled", "action", "input", "thumb", "track", "focusVisible", "readOnly", "colorPrimary", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantOutlined", "variantSoft", "variantSolid", "startDecorator", "endDecorator"]);
var switchClasses_default = switchClasses2;

// node_modules/@mui/joy/FormControl/FormControl.js
var import_jsx_runtime116 = __toESM(require_jsx_runtime());
var _excluded71 = ["id", "className", "component", "disabled", "required", "error", "color", "size", "orientation", "slots", "slotProps"];
var useUtilityClasses61 = (ownerState) => {
  const {
    disabled,
    error,
    size: size3,
    color,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation, disabled && "disabled", error && "error", color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`]
  };
  return composeClasses2(slots, getFormControlUtilityClass2, {});
};
var FormControlRoot = styled_default("div", {
  name: "JoyFormControl",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$palette$o, _theme$variants$plain, _theme$variants$plain2;
  return _extends({
    "--unstable_RadioGroup-margin": "0.5rem 0",
    "--FormLabel-alignSelf": ownerState.orientation === "horizontal" ? "align-items" : "flex-start",
    "--FormLabel-asteriskColor": theme.vars.palette.danger[500]
  }, ownerState.size === "sm" && {
    "--FormLabel-fontSize": theme.vars.fontSize.xs,
    "--FormLabel-lineHeight": theme.vars.lineHeight.xl,
    "--FormLabel-margin": ownerState.orientation === "horizontal" ? "0 0.5rem 0 0" : "0 0 0.25rem 0",
    "--FormHelperText-fontSize": theme.vars.fontSize.xs,
    "--FormHelperText-lineHeight": theme.vars.lineHeight.xl
  }, ownerState.size === "md" && {
    "--FormLabel-fontSize": theme.vars.fontSize.sm,
    "--FormLabel-lineHeight": theme.vars.lineHeight.sm,
    "--FormLabel-margin": ownerState.orientation === "horizontal" ? "0 0.75rem 0 0" : "0 0 0.375rem 0",
    "--FormHelperText-fontSize": theme.vars.fontSize.sm,
    "--FormHelperText-lineHeight": theme.vars.lineHeight.sm
  }, ownerState.size === "lg" && {
    "--FormLabel-fontSize": theme.vars.fontSize.md,
    "--FormLabel-lineHeight": theme.vars.lineHeight.md,
    "--FormLabel-margin": ownerState.orientation === "horizontal" ? "0 1rem 0 0" : "0 0 0.5rem 0",
    "--FormHelperText-fontSize": theme.vars.fontSize.sm,
    "--FormHelperText-lineHeight": theme.vars.lineHeight.sm
  }, ownerState.color && {
    "--FormHelperText-color": (_theme$vars$palette$o = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette$o[500]
  }, {
    "--FormHelperText-margin": "0.375rem 0 0 0",
    [`&.${formControlClasses_default.error}`]: {
      "--FormHelperText-color": theme.vars.palette.danger[500]
    },
    [`&.${formControlClasses_default.disabled}`]: {
      "--FormLabel-color": (_theme$variants$plain = theme.variants.plainDisabled) == null || (_theme$variants$plain = _theme$variants$plain[ownerState.color || "neutral"]) == null ? void 0 : _theme$variants$plain.color,
      "--FormHelperText-color": (_theme$variants$plain2 = theme.variants.plainDisabled) == null || (_theme$variants$plain2 = _theme$variants$plain2[ownerState.color || "neutral"]) == null ? void 0 : _theme$variants$plain2.color
    },
    display: "flex",
    position: "relative",
    // for keeping the control action area, for example Switch
    flexDirection: ownerState.orientation === "horizontal" ? "row" : "column"
  }, ownerState.orientation === "horizontal" && {
    [`& > label ~ .${switchClasses_default.root}`]: {
      "--unstable_Switch-margin": "0 0 0 auto"
    }
  });
});
var FormControl3 = React157.forwardRef(function FormControl4(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyFormControl"
  });
  const {
    id: idOverride,
    className,
    component = "div",
    disabled = false,
    required = false,
    error = false,
    color,
    size: size3 = "md",
    orientation = "vertical",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded71);
  const id = useId(idOverride);
  const [helperText, setHelperText] = React157.useState(null);
  const ownerState = _extends({}, props, {
    id,
    component,
    color,
    disabled,
    error,
    required,
    size: size3,
    orientation
  });
  let registerEffect;
  if (true) {
    const registeredInput = React157.useRef(false);
    registerEffect = () => {
      if (registeredInput.current) {
        console.error(["Joy: A FormControl can contain only one control component (Autocomplete | Input | Textarea | Select | RadioGroup)", "You should not mix those components inside a single FormControl instance"].join("\n"));
      }
      registeredInput.current = true;
      return () => {
        registeredInput.current = false;
      };
    };
  }
  const classes = useUtilityClasses61(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: FormControlRoot,
    externalForwardedProps: _extends({}, other, {
      component,
      slots,
      slotProps
    }),
    ownerState
  });
  const formControlContextValue = React157.useMemo(() => ({
    disabled,
    required,
    error,
    color,
    size: size3,
    htmlFor: id,
    labelId: `${id}-label`,
    "aria-describedby": helperText ? `${id}-helper-text` : void 0,
    setHelperText,
    registerEffect
  }), [color, disabled, error, helperText, id, registerEffect, required, size3]);
  return (0, import_jsx_runtime116.jsx)(FormControlContext_default.Provider, {
    value: formControlContextValue,
    children: (0, import_jsx_runtime116.jsx)(SlotRoot, _extends({}, rootProps))
  });
});
true ? FormControl3.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types74.default.node,
  /**
   * @ignore
   */
  className: import_prop_types74.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: import_prop_types74.default.oneOfType([import_prop_types74.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types74.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types74.default.elementType,
  /**
   * If `true`, the children are in disabled state.
   * @default false
   */
  disabled: import_prop_types74.default.bool,
  /**
   * If `true`, the children will indicate an error.
   * @default false
   */
  error: import_prop_types74.default.bool,
  /**
   * @ignore
   */
  id: import_prop_types74.default.string,
  /**
   * The content direction flow.
   * @default 'vertical'
   */
  orientation: import_prop_types74.default.oneOf(["horizontal", "vertical"]),
  /**
   * If `true`, the user must specify a value for the input before the owning form can be submitted.
   * If `true`, the asterisk appears on the FormLabel.
   * @default false
   */
  required: import_prop_types74.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types74.default.oneOfType([import_prop_types74.default.oneOf(["sm", "md", "lg"]), import_prop_types74.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types74.default.shape({
    root: import_prop_types74.default.oneOfType([import_prop_types74.default.func, import_prop_types74.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types74.default.shape({
    root: import_prop_types74.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types74.default.oneOfType([import_prop_types74.default.arrayOf(import_prop_types74.default.oneOfType([import_prop_types74.default.func, import_prop_types74.default.object, import_prop_types74.default.bool])), import_prop_types74.default.func, import_prop_types74.default.object])
} : void 0;
var FormControl_default = FormControl3;

// node_modules/@mui/joy/FormHelperText/FormHelperText.js
var React158 = __toESM(require_react());
var import_prop_types75 = __toESM(require_prop_types());

// node_modules/@mui/joy/FormHelperText/formHelperTextClasses.js
function getFormHelperTextUtilityClass(slot) {
  return generateUtilityClass2("MuiFormHelperText", slot);
}
var formHelperTextClasses = generateUtilityClasses2("MuiFormHelperText", ["root"]);
var formHelperTextClasses_default = formHelperTextClasses;

// node_modules/@mui/joy/FormLabel/formLabelClasses.js
function getFormLabelUtilityClass(slot) {
  return generateUtilityClass2("MuiFormLabel", slot);
}
var formLabelClasses = generateUtilityClasses2("MuiFormLabel", ["root", "asterisk"]);
var formLabelClasses_default = formLabelClasses;

// node_modules/@mui/joy/FormHelperText/FormHelperText.js
var import_jsx_runtime117 = __toESM(require_jsx_runtime());
var _excluded72 = ["children", "component", "slots", "slotProps"];
var useUtilityClasses62 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses2(slots, getFormHelperTextUtilityClass, {});
};
var FormHelperTextRoot = styled_default("div", {
  name: "JoyFormHelperText",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme
}) => ({
  "--Icon-fontSize": "calc(var(--FormHelperText-lineHeight) * 1em)",
  display: "flex",
  alignItems: "center",
  gap: "2px",
  fontFamily: theme.vars.fontFamily.body,
  fontSize: `var(--FormHelperText-fontSize, ${theme.vars.fontSize.sm})`,
  lineHeight: `var(--FormHelperText-lineHeight, ${theme.vars.lineHeight.sm})`,
  color: `var(--FormHelperText-color, ${theme.vars.palette.text.tertiary})`,
  margin: "var(--FormHelperText-margin, 0px)",
  [`.${formLabelClasses_default.root} + &`]: {
    "--FormHelperText-margin": "0px"
    // remove the margin if the helper text is next to the form label.
  },
  [`.${formControlClasses_default.error} &`]: {
    "--Icon-color": "currentColor"
  }
}));
var FormHelperText = React158.forwardRef(function FormHelperText2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyFormHelperText"
  });
  const {
    children,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded72);
  const rootRef = React158.useRef(null);
  const handleRef = useForkRef(rootRef, ref);
  const formControl = React158.useContext(FormControlContext_default);
  const setHelperText = formControl == null ? void 0 : formControl.setHelperText;
  React158.useEffect(() => {
    setHelperText == null || setHelperText(rootRef.current);
    return () => {
      setHelperText == null || setHelperText(null);
    };
  }, [setHelperText]);
  const classes = useUtilityClasses62();
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref: handleRef,
    elementType: FormHelperTextRoot,
    externalForwardedProps,
    ownerState: props,
    additionalProps: {
      as: component,
      id: formControl == null ? void 0 : formControl["aria-describedby"]
    },
    className: classes.root
  });
  return (0, import_jsx_runtime117.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? FormHelperText.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types75.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types75.default.elementType,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types75.default.shape({
    root: import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types75.default.shape({
    root: import_prop_types75.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object])
} : void 0;
var FormHelperText_default = FormHelperText;

// node_modules/@mui/joy/FormLabel/FormLabel.js
var React159 = __toESM(require_react());
var import_prop_types76 = __toESM(require_prop_types());
var import_jsx_runtime118 = __toESM(require_jsx_runtime());
var _excluded73 = ["children", "component", "htmlFor", "id", "slots", "slotProps"];
var useUtilityClasses63 = () => {
  const slots = {
    root: ["root"],
    asterisk: ["asterisk"]
  };
  return composeClasses2(slots, getFormLabelUtilityClass, {});
};
var FormLabelRoot = styled_default("label", {
  name: "JoyFormLabel",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme
}) => ({
  "--Icon-fontSize": "calc(var(--FormLabel-lineHeight) * 1em)",
  WebkitTapHighlightColor: "transparent",
  alignSelf: "var(--FormLabel-alignSelf)",
  // to not fill the block space. It seems like a bug when clicking on empty space (within the label area), even though it is not.
  display: "flex",
  gap: "2px",
  alignItems: "center",
  flexWrap: "wrap",
  userSelect: "none",
  fontFamily: theme.vars.fontFamily.body,
  fontSize: `var(--FormLabel-fontSize, ${theme.vars.fontSize.sm})`,
  fontWeight: theme.vars.fontWeight.md,
  lineHeight: `var(--FormLabel-lineHeight, ${theme.vars.lineHeight.sm})`,
  color: `var(--FormLabel-color, ${theme.vars.palette.text.primary})`,
  margin: "var(--FormLabel-margin, 0px)"
}));
var AsteriskComponent = styled_default("span", {
  name: "JoyFormLabel",
  slot: "Asterisk",
  overridesResolver: (props, styles2) => styles2.asterisk
})({
  color: "var(--FormLabel-asteriskColor)"
});
var FormLabel = React159.forwardRef(function FormLabel2(inProps, ref) {
  var _ref, _inProps$required;
  const props = useThemeProps2({
    props: inProps,
    name: "JoyFormLabel"
  });
  const {
    children,
    component = "label",
    htmlFor,
    id,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded73);
  const formControl = React159.useContext(FormControlContext_default);
  const required = (_ref = (_inProps$required = inProps.required) != null ? _inProps$required : formControl == null ? void 0 : formControl.required) != null ? _ref : false;
  const ownerState = _extends({}, props, {
    required
  });
  const classes = useUtilityClasses63();
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    additionalProps: {
      htmlFor: htmlFor != null ? htmlFor : formControl == null ? void 0 : formControl.htmlFor,
      id: id != null ? id : formControl == null ? void 0 : formControl.labelId
    },
    ref,
    className: classes.root,
    elementType: FormLabelRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotAsterisk, asteriskProps] = useSlot("asterisk", {
    additionalProps: {
      "aria-hidden": true
    },
    className: classes.asterisk,
    elementType: AsteriskComponent,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime118.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [children, required && (0, import_jsx_runtime118.jsxs)(SlotAsterisk, _extends({}, asteriskProps, {
      children: [" ", "*"]
    }))]
  }));
});
true ? FormLabel.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types76.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types76.default.elementType,
  /**
   * @ignore
   */
  htmlFor: import_prop_types76.default.string,
  /**
   * @ignore
   */
  id: import_prop_types76.default.string,
  /**
   * The asterisk is added if required=`true`
   */
  required: import_prop_types76.default.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types76.default.shape({
    asterisk: import_prop_types76.default.oneOfType([import_prop_types76.default.func, import_prop_types76.default.object]),
    root: import_prop_types76.default.oneOfType([import_prop_types76.default.func, import_prop_types76.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types76.default.shape({
    asterisk: import_prop_types76.default.elementType,
    root: import_prop_types76.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types76.default.oneOfType([import_prop_types76.default.arrayOf(import_prop_types76.default.oneOfType([import_prop_types76.default.func, import_prop_types76.default.object, import_prop_types76.default.bool])), import_prop_types76.default.func, import_prop_types76.default.object])
} : void 0;
var FormLabel_default = FormLabel;

// node_modules/@mui/joy/Grid/Grid.js
var import_prop_types77 = __toESM(require_prop_types());
var Grid = createGrid({
  createStyledComponent: styled_default("div", {
    name: "JoyGrid",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  }),
  useThemeProps: (inProps) => useThemeProps2({
    props: inProps,
    name: "JoyGrid"
  })
});
true ? Grid.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types77.default.node,
  /**
   * @ignore
   */
  sx: import_prop_types77.default.oneOfType([import_prop_types77.default.arrayOf(import_prop_types77.default.oneOfType([import_prop_types77.default.func, import_prop_types77.default.object, import_prop_types77.default.bool])), import_prop_types77.default.func, import_prop_types77.default.object])
} : void 0;
var Grid_default = Grid;

// node_modules/@mui/joy/Grid/gridClasses.js
function getGridUtilityClass(slot) {
  return generateUtilityClass("MuiGrid", slot);
}
var SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
var DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
var WRAPS = ["nowrap", "wrap-reverse", "wrap"];
var GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
var gridClasses = generateUtilityClasses("MuiGrid", [
  "root",
  "container",
  "item",
  "zeroMinWidth",
  // spacings
  ...SPACINGS.map((spacing) => `spacing-xs-${spacing}`),
  // direction values
  ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
  // wrap values
  ...WRAPS.map((wrap) => `wrap-xs-${wrap}`),
  // grid sizes for all breakpoints
  ...GRID_SIZES.map((size3) => `grid-xs-${size3}`),
  ...GRID_SIZES.map((size3) => `grid-sm-${size3}`),
  ...GRID_SIZES.map((size3) => `grid-md-${size3}`),
  ...GRID_SIZES.map((size3) => `grid-lg-${size3}`),
  ...GRID_SIZES.map((size3) => `grid-xl-${size3}`)
]);
var gridClasses_default = gridClasses;

// node_modules/@mui/joy/LinearProgress/LinearProgress.js
var React160 = __toESM(require_react());
var import_prop_types78 = __toESM(require_prop_types());

// node_modules/@mui/joy/LinearProgress/linearProgressClasses.js
function getLinearProgressUtilityClass(slot) {
  return generateUtilityClass2("MuiLinearProgress", slot);
}
var linearProgressClasses = generateUtilityClasses2("MuiLinearProgress", ["root", "determinate", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var linearProgressClasses_default = linearProgressClasses;

// node_modules/@mui/joy/LinearProgress/LinearProgress.js
var import_jsx_runtime119 = __toESM(require_jsx_runtime());
var _excluded74 = ["children", "className", "component", "color", "size", "variant", "thickness", "determinate", "value", "style", "slots", "slotProps"];
var _2 = (t) => t;
var _t2;
var _t22;
var progressKeyframe = keyframes(_t2 || (_t2 = _2`
  0% {
    left: var(--_LinearProgress-progressInset);
    width: var(--LinearProgress-progressMinWidth);
  }

  25% {
    width: var(--LinearProgress-progressMaxWidth);
  }

  50% {
    left: var(--_LinearProgress-progressLeft);
    width: var(--LinearProgress-progressMinWidth);
  }

  75% {
    width: var(--LinearProgress-progressMaxWidth);
  }

  100% {
    left: var(--_LinearProgress-progressInset);
    width: var(--LinearProgress-progressMinWidth);
  }
`));
var useUtilityClasses64 = (ownerState) => {
  const {
    determinate,
    color,
    variant,
    size: size3
  } = ownerState;
  const slots = {
    root: ["root", determinate && "determinate", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`, size3 && `size${capitalize(size3)}`]
  };
  return composeClasses2(slots, getLinearProgressUtilityClass, {});
};
var LinearProgressRoot = styled_default("div", {
  name: "JoyLinearProgress",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants, _theme$variants$solid, _theme$variants$softH, _theme$variants$solid2;
  return _extends({
    // public variables
    "--LinearProgress-radius": "var(--LinearProgress-thickness)",
    "--LinearProgress-progressThickness": "var(--LinearProgress-thickness)",
    "--LinearProgress-progressRadius": "max(var(--LinearProgress-radius) - var(--_LinearProgress-padding), min(var(--_LinearProgress-padding) / 2, var(--LinearProgress-radius) / 2))"
  }, ownerState.size === "sm" && {
    "--LinearProgress-thickness": "4px"
  }, ownerState.size === "md" && {
    "--LinearProgress-thickness": "6px"
  }, ownerState.size === "lg" && {
    "--LinearProgress-thickness": "8px"
  }, ownerState.thickness && {
    "--LinearProgress-thickness": `${ownerState.thickness}px`
  }, !ownerState.determinate && {
    "--LinearProgress-progressMinWidth": "calc(var(--LinearProgress-percent) * 1% / 2)",
    "--LinearProgress-progressMaxWidth": "calc(var(--LinearProgress-percent) * 1%)",
    "--_LinearProgress-progressLeft": "calc(100% - var(--LinearProgress-progressMinWidth) - var(--_LinearProgress-progressInset))",
    "--_LinearProgress-progressInset": "calc(var(--LinearProgress-thickness) / 2 - var(--LinearProgress-progressThickness) / 2)"
  }, {
    minBlockSize: "var(--LinearProgress-thickness)",
    boxSizing: "border-box",
    borderRadius: "var(--LinearProgress-radius)",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    flex: 1,
    padding: "var(--_LinearProgress-padding)",
    position: "relative"
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    "--_LinearProgress-padding": "max((var(--LinearProgress-thickness) - 2 * var(--variant-borderWidth, 0px) - var(--LinearProgress-progressThickness)) / 2, 0px)",
    "&::before": {
      content: '""',
      display: "block",
      boxSizing: "inherit",
      blockSize: "var(--LinearProgress-progressThickness)",
      borderRadius: "var(--LinearProgress-progressRadius)",
      backgroundColor: "currentColor",
      color: "inherit",
      position: "absolute"
      // required to make `left` animation works.
    }
  }, ownerState.variant === "soft" && {
    backgroundColor: theme.variants.soft.neutral.backgroundColor,
    color: (_theme$variants$solid = theme.variants.solid) == null ? void 0 : _theme$variants$solid[ownerState.color].backgroundColor
  }, ownerState.variant === "solid" && {
    backgroundColor: (_theme$variants$softH = theme.variants.softHover) == null ? void 0 : _theme$variants$softH[ownerState.color].backgroundColor,
    color: (_theme$variants$solid2 = theme.variants.solid) == null ? void 0 : _theme$variants$solid2[ownerState.color].backgroundColor
  });
}, ({
  ownerState
}) => ownerState.determinate ? {
  "&::before": {
    left: "var(--_LinearProgress-padding)",
    inlineSize: "calc(var(--LinearProgress-percent) * 1% - 2 * var(--_LinearProgress-padding))"
  }
} : css(_t22 || (_t22 = _2`
          &::before {
            animation: ${0}
              var(--LinearProgress-circulation, 2.5s ease-in-out 0s infinite normal none running);
          }
        `), progressKeyframe), ({
  ownerState,
  theme
}) => {
  const {
    borderRadius,
    height
  } = resolveSxValue({
    theme,
    ownerState
  }, ["borderRadius", "height"]);
  return _extends({}, borderRadius !== void 0 && {
    "--LinearProgress-radius": borderRadius
  }, height !== void 0 && {
    "--LinearProgress-thickness": height
  });
});
var LinearProgress = React160.forwardRef(function LinearProgress2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyLinearProgress"
  });
  const {
    children,
    className,
    component,
    color = "primary",
    size: size3 = "md",
    variant = "soft",
    thickness,
    determinate = false,
    value = determinate ? 0 : 25,
    // `25` is the 1/4 of the bar.
    style,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded74);
  const ownerState = _extends({}, props, {
    component,
    color,
    size: size3,
    variant,
    thickness,
    value,
    determinate,
    instanceSize: inProps.size
  });
  const classes = useUtilityClasses64(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: LinearProgressRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: _extends({
      as: component,
      role: "progressbar",
      style: _extends({}, {
        "--LinearProgress-percent": value
      }, style)
    }, typeof value === "number" && determinate && {
      "aria-valuenow": Math.round(value)
    })
  });
  return (0, import_jsx_runtime119.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? LinearProgress.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types78.default.node,
  /**
   * @ignore
   */
  className: import_prop_types78.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: import_prop_types78.default.oneOfType([import_prop_types78.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types78.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types78.default.elementType,
  /**
   * The boolean to select a variant.
   * Use indeterminate when there is no progress value.
   * @default false
   */
  determinate: import_prop_types78.default.bool,
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types78.default.oneOfType([import_prop_types78.default.oneOf(["sm", "md", "lg"]), import_prop_types78.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types78.default.shape({
    root: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types78.default.shape({
    root: import_prop_types78.default.elementType
  }),
  /**
   * @ignore
   */
  style: import_prop_types78.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types78.default.oneOfType([import_prop_types78.default.arrayOf(import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object, import_prop_types78.default.bool])), import_prop_types78.default.func, import_prop_types78.default.object]),
  /**
   * The thickness of the bar.
   */
  thickness: import_prop_types78.default.number,
  /**
   * The value of the progress indicator for the determinate variant.
   * Value between 0 and 100.
   *
   * @default determinate ? 0 : 25
   */
  value: import_prop_types78.default.number,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'soft'
   */
  variant: import_prop_types78.default.oneOfType([import_prop_types78.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types78.default.string])
} : void 0;
var LinearProgress_default = LinearProgress;

// node_modules/@mui/joy/Link/Link.js
var React161 = __toESM(require_react());
var import_prop_types79 = __toESM(require_prop_types());

// node_modules/@mui/joy/Link/linkClasses.js
function getLinkUtilityClass(slot) {
  return generateUtilityClass2("MuiLink", slot);
}
var linkClasses = generateUtilityClasses2("MuiLink", ["root", "disabled", "focusVisible", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "focusVisible", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "underlineNone", "underlineHover", "underlineAlways", "h1", "h2", "h3", "h4", "title-lg", "title-md", "title-sm", "body-lg", "body-md", "body-sm", "body-xs", "startDecorator", "endDecorator"]);
var linkClasses_default = linkClasses;

// node_modules/@mui/joy/Link/Link.js
var import_jsx_runtime120 = __toESM(require_jsx_runtime());
var import_jsx_runtime121 = __toESM(require_jsx_runtime());
var _excluded75 = ["color", "textColor", "variant"];
var _excluded216 = ["children", "disabled", "onBlur", "onFocus", "level", "overlay", "underline", "endDecorator", "startDecorator", "component", "slots", "slotProps"];
var useUtilityClasses65 = (ownerState) => {
  const {
    level,
    color,
    variant,
    underline,
    focusVisible,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", color && `color${capitalize(color)}`, disabled && "disabled", focusVisible && "focusVisible", level, underline && `underline${capitalize(underline)}`, variant && `variant${capitalize(variant)}`],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses2(slots, getLinkUtilityClass, {});
};
var StartDecorator2 = styled_default("span", {
  name: "JoyLink",
  slot: "StartDecorator",
  overridesResolver: (props, styles2) => styles2.startDecorator
})(({
  ownerState
}) => {
  var _ownerState$sx;
  return _extends({
    display: "inline-flex",
    marginInlineEnd: "clamp(4px, var(--Link-gap, 0.375em), 0.75rem)"
  }, typeof ownerState.startDecorator !== "string" && (ownerState.alignItems === "flex-start" || ((_ownerState$sx = ownerState.sx) == null ? void 0 : _ownerState$sx.alignItems) === "flex-start") && {
    marginTop: "2px"
    // this makes the alignment perfect in most cases
  });
});
var EndDecorator2 = styled_default("span", {
  name: "JoyLink",
  slot: "endDecorator",
  overridesResolver: (props, styles2) => styles2.endDecorator
})(({
  ownerState
}) => {
  var _ownerState$sx2;
  return _extends({
    display: "inline-flex",
    marginInlineStart: "clamp(4px, var(--Link-gap, 0.25em), 0.5rem)"
  }, typeof ownerState.startDecorator !== "string" && (ownerState.alignItems === "flex-start" || ((_ownerState$sx2 = ownerState.sx) == null ? void 0 : _ownerState$sx2.alignItems) === "flex-start") && {
    marginTop: "2px"
    // this makes the alignment perfect in most cases
  });
});
var LinkRoot = styled_default("a", {
  name: "JoyLink",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$palette, _theme$vars$palette2, _theme$vars$palette3, _theme$variants$owner, _theme$variants, _theme$variants2, _theme$variants3;
  return [_extends({
    "--Icon-fontSize": "1.25em",
    "--Icon-color": "currentColor",
    "--CircularProgress-size": "1.25em",
    "--CircularProgress-thickness": "3px"
  }, ownerState.level && ownerState.level !== "inherit" && theme.typography[ownerState.level], ownerState.level === "inherit" && {
    font: "inherit"
  }, ownerState.underline === "none" && {
    textDecoration: "none"
  }, ownerState.underline === "hover" && {
    textDecoration: "none",
    "&:hover": {
      "@media (hover: hover)": {
        textDecorationLine: "underline"
      }
    }
  }, ownerState.underline === "always" && {
    textDecoration: "underline"
  }, ownerState.startDecorator && {
    verticalAlign: "bottom"
    // to make the link align with the parent's content
  }, {
    textDecorationThickness: "max(0.08em, 1px)",
    // steal from https://moderncss.dev/modern-css-for-dynamic-component-based-architecture/#css-reset-additions
    textUnderlineOffset: "0.15em",
    // steal from https://moderncss.dev/modern-css-for-dynamic-component-based-architecture/#css-reset-additions
    display: "inline-flex",
    alignItems: "center",
    WebkitTapHighlightColor: "transparent",
    backgroundColor: "transparent",
    // Reset default value
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    border: 0,
    margin: 0,
    // Remove the margin in Safari
    borderRadius: theme.vars.radius.xs,
    padding: 0,
    // Remove the padding in Firefox
    cursor: "pointer",
    textDecorationColor: `var(--variant-outlinedBorder, rgba(${(_theme$vars$palette = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette.mainChannel} / var(--Link-underlineOpacity, 0.72)))`
  }, ownerState.variant ? _extends({
    paddingBlock: "min(0.1em, 4px)",
    paddingInline: "0.25em"
  }, !ownerState.nesting && {
    marginInline: "-0.25em"
  }) : {
    color: `var(--variant-plainColor, rgba(${(_theme$vars$palette2 = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette2.mainChannel} / 1))`,
    [`&.${linkClasses_default.disabled}`]: {
      pointerEvents: "none",
      color: `var(--variant-plainDisabledColor, rgba(${(_theme$vars$palette3 = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette3.mainChannel} / 0.6))`
    }
  }, {
    userSelect: ownerState.component === "button" ? "none" : void 0,
    MozAppearance: "none",
    // Reset
    WebkitAppearance: "none",
    // Reset
    "&::-moz-focus-inner": {
      borderStyle: "none"
      // Remove Firefox dotted outline.
    }
  }, ownerState.overlay ? {
    position: "initial",
    "&::after": {
      content: '""',
      display: "block",
      position: "absolute",
      top: 0,
      left: 0,
      bottom: 0,
      right: 0,
      borderRadius: `var(--unstable_actionRadius, inherit)`,
      margin: `var(--unstable_actionMargin)`
    },
    [`${theme.focus.selector}`]: {
      "&::after": theme.focus.default
    }
  } : {
    position: "relative",
    [theme.focus.selector]: theme.focus.default
  }), ownerState.variant && _extends({}, (_theme$variants$owner = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants$owner[ownerState.color], {
    "&:hover": {
      "@media (hover: hover)": (_theme$variants = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants[ownerState.color]
    },
    "&:active": (_theme$variants2 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants2[ownerState.color],
    [`&.${linkClasses_default.disabled}`]: (_theme$variants3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants3[ownerState.color]
  })];
});
var Link = React161.forwardRef(function Link2(inProps, ref) {
  const _useThemeProps = useThemeProps2({
    props: inProps,
    name: "JoyLink"
  }), {
    color = "primary",
    textColor,
    variant
  } = _useThemeProps, themeProps = _objectWithoutPropertiesLoose(_useThemeProps, _excluded75);
  const nesting = React161.useContext(TypographyNestedContext);
  const inheriting = React161.useContext(TypographyInheritContext);
  const props = extendSxProp(_extends({}, themeProps, {
    color: textColor
  }));
  const {
    children,
    disabled = false,
    onBlur,
    onFocus,
    level: levelProp = "body-md",
    overlay = false,
    underline = "hover",
    endDecorator,
    startDecorator,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded216);
  const level = nesting || inheriting ? inProps.level || "inherit" : levelProp;
  const {
    isFocusVisibleRef,
    onBlur: handleBlurVisible,
    onFocus: handleFocusVisible,
    ref: focusVisibleRef
  } = useIsFocusVisible();
  const [focusVisible, setFocusVisible] = React161.useState(false);
  const handleRef = useForkRef(ref, focusVisibleRef);
  const handleBlur2 = (event) => {
    handleBlurVisible(event);
    if (isFocusVisibleRef.current === false) {
      setFocusVisible(false);
    }
    if (onBlur) {
      onBlur(event);
    }
  };
  const handleFocus = (event) => {
    handleFocusVisible(event);
    if (isFocusVisibleRef.current === true) {
      setFocusVisible(true);
    }
    if (onFocus) {
      onFocus(event);
    }
  };
  const ownerState = _extends({}, props, {
    color,
    disabled,
    focusVisible,
    underline,
    variant,
    level,
    overlay,
    nesting
  });
  const classes = useUtilityClasses65(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    additionalProps: {
      onBlur: handleBlur2,
      onFocus: handleFocus
    },
    ref: handleRef,
    className: classes.root,
    elementType: LinkRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: StartDecorator2,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: EndDecorator2,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime120.jsx)(TypographyNestedContext.Provider, {
    value: true,
    children: (0, import_jsx_runtime121.jsxs)(SlotRoot, _extends({}, rootProps, {
      children: [startDecorator && (0, import_jsx_runtime120.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
        children: startDecorator
      })), isMuiElement(children, ["Skeleton"]) ? React161.cloneElement(children, {
        variant: children.props.variant || "inline"
      }) : children, endDecorator && (0, import_jsx_runtime120.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
        children: endDecorator
      }))]
    }))
  });
});
true ? Link.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types79.default.node,
  /**
   * The color of the link.
   * @default 'primary'
   */
  color: import_prop_types79.default.oneOfType([import_prop_types79.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types79.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types79.default.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types79.default.bool,
  /**
   * Element placed after the children.
   */
  endDecorator: import_prop_types79.default.node,
  /**
   * Applies the theme typography styles.
   * @default 'body-md'
   */
  level: import_prop_types79.default.oneOfType([import_prop_types79.default.oneOf(["body1", "body2", "body3", "h1", "h2", "h3", "h4", "h5", "h6", "inherit"]), import_prop_types79.default.string]),
  /**
   * @ignore
   */
  onBlur: import_prop_types79.default.func,
  /**
   * @ignore
   */
  onFocus: import_prop_types79.default.func,
  /**
   * If `true`, the ::after pseudo element is added to cover the area of interaction.
   * The parent of the overlay Link should have `relative` CSS position.
   * @default false
   */
  overlay: import_prop_types79.default.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types79.default.shape({
    endDecorator: import_prop_types79.default.oneOfType([import_prop_types79.default.func, import_prop_types79.default.object]),
    root: import_prop_types79.default.oneOfType([import_prop_types79.default.func, import_prop_types79.default.object]),
    startDecorator: import_prop_types79.default.oneOfType([import_prop_types79.default.func, import_prop_types79.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types79.default.shape({
    endDecorator: import_prop_types79.default.elementType,
    root: import_prop_types79.default.elementType,
    startDecorator: import_prop_types79.default.elementType
  }),
  /**
   * Element placed before the children.
   */
  startDecorator: import_prop_types79.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types79.default.oneOfType([import_prop_types79.default.arrayOf(import_prop_types79.default.oneOfType([import_prop_types79.default.func, import_prop_types79.default.object, import_prop_types79.default.bool])), import_prop_types79.default.func, import_prop_types79.default.object]),
  /**
   * The system color.
   */
  textColor: import_prop_types79.default.any,
  /**
   * Controls when the link should have an underline.
   * @default 'hover'
   */
  underline: import_prop_types79.default.oneOf(["always", "hover", "none"]),
  /**
   * Applies the theme link styles.
   * @default 'plain'
   */
  variant: import_prop_types79.default.oneOfType([import_prop_types79.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types79.default.string])
} : void 0;
var Link_default = Link;

// node_modules/@mui/joy/ListDivider/ListDivider.js
var React162 = __toESM(require_react());
var import_prop_types80 = __toESM(require_prop_types());

// node_modules/@mui/joy/ListDivider/listDividerClasses.js
function getListDividerUtilityClass(slot) {
  return generateUtilityClass2("MuiListDivider", slot);
}
var listDividerClasses = generateUtilityClasses2("MuiListDivider", ["root", "insetGutter", "insetStartDecorator", "insetStartContent", "horizontal", "vertical"]);
var listDividerClasses_default = listDividerClasses;

// node_modules/@mui/joy/ListDivider/ListDivider.js
var import_jsx_runtime122 = __toESM(require_jsx_runtime());
var _excluded76 = ["component", "role", "className", "children", "inset", "orientation", "slots", "slotProps"];
var useUtilityClasses66 = (ownerState) => {
  const {
    orientation,
    inset
  } = ownerState;
  const slots = {
    root: [
      "root",
      orientation,
      // `insetContext` class is already produced by Divider
      inset && inset !== "context" && `inset${capitalize(inset)}`
    ]
  };
  return composeClasses2(slots, getListDividerUtilityClass, {});
};
var ListDividerRoot = styled_default(DividerRoot, {
  name: "JoyListDivider",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  ownerState
}) => _extends({}, ownerState.inset === "context" && {
  "--Divider-inset": "calc(-1 * var(--List-padding))"
}, ownerState.row && _extends({
  marginInline: "var(--ListDivider-gap)"
}, ownerState.inset === "gutter" && {
  marginBlock: "var(--ListItem-paddingY)"
}, ownerState["data-first-child"] === void 0 && {
  // combine --List-gap and --ListDivider-gap to replicate flexbox gap behavior
  marginInlineStart: "calc(var(--List-gap) + var(--ListDivider-gap))"
}), !ownerState.row && _extends({}, ownerState["data-first-child"] === void 0 && {
  // combine --List-gap and --ListDivider-gap to replicate flexbox gap behavior
  marginBlockStart: "calc(var(--List-gap) + var(--ListDivider-gap))"
}, {
  marginBlockEnd: "var(--ListDivider-gap)"
}, ownerState.inset === "gutter" && {
  marginInlineStart: "var(--ListItem-paddingLeft)",
  marginInlineEnd: "var(--ListItem-paddingRight)"
}, ownerState.inset === "startDecorator" && {
  marginInlineStart: "var(--ListItem-paddingLeft)"
}, ownerState.inset === "startContent" && {
  marginInlineStart: "calc(var(--ListItem-paddingLeft) + var(--ListItemDecorator-size))"
})));
var ListDivider = React162.forwardRef(function ListDivider2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyListDivider"
  });
  const row = React162.useContext(RowListContext_default);
  const listComponent = React162.useContext(ComponentListContext_default);
  const {
    component: componentProp,
    role: roleProp,
    className,
    children,
    inset = "context",
    orientation: orientationProp,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded76);
  const [listElement] = (listComponent == null ? void 0 : listComponent.split(":")) || ["", ""];
  const component = componentProp || (listElement && !listElement.match(/^(ul|ol|menu)$/) ? "div" : "li");
  const role = roleProp || (component === "li" ? "separator" : void 0);
  const orientation = orientationProp || (row ? "vertical" : "horizontal");
  const ownerState = _extends({}, props, {
    inset,
    row,
    orientation,
    component,
    role
  });
  const classes = useUtilityClasses66(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: ListDividerRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: _extends({
      as: component,
      role
    }, role === "separator" && orientation === "vertical" && {
      // The implicit aria-orientation of separator is 'horizontal'
      // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/separator_role
      "aria-orientation": "vertical"
    })
  });
  return (0, import_jsx_runtime122.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? ListDivider.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types80.default.node,
  /**
   * @ignore
   */
  className: import_prop_types80.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types80.default.elementType,
  /**
   * The empty space on the side(s) of the divider in a vertical list.
   *
   * For horizontal list (the nearest parent List has `row` prop set to `true`), only `inset="gutter"` affects the list divider.
   * @default 'context'
   */
  inset: import_prop_types80.default.oneOfType([import_prop_types80.default.oneOf(["context", "gutter", "startDecorator", "startContent"]), import_prop_types80.default.string]),
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types80.default.oneOf(["horizontal", "vertical"]),
  /**
   * @ignore
   */
  role: import_prop_types80.default.string,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types80.default.shape({
    root: import_prop_types80.default.oneOfType([import_prop_types80.default.func, import_prop_types80.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types80.default.shape({
    root: import_prop_types80.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types80.default.oneOfType([import_prop_types80.default.arrayOf(import_prop_types80.default.oneOfType([import_prop_types80.default.func, import_prop_types80.default.object, import_prop_types80.default.bool])), import_prop_types80.default.func, import_prop_types80.default.object])
} : void 0;
var ListDivider_default = ListDivider;

// node_modules/@mui/joy/ListItemContent/ListItemContent.js
var React163 = __toESM(require_react());
var import_prop_types81 = __toESM(require_prop_types());

// node_modules/@mui/joy/ListItemContent/listItemContentClasses.js
function getListItemContentUtilityClass(slot) {
  return generateUtilityClass2("MuiListItemContent", slot);
}
var listItemContentClasses = generateUtilityClasses2("MuiListItemContent", ["root"]);
var listItemContentClasses_default = listItemContentClasses;

// node_modules/@mui/joy/ListItemContent/ListItemContent.js
var import_jsx_runtime123 = __toESM(require_jsx_runtime());
var _excluded77 = ["component", "className", "children", "slots", "slotProps"];
var useUtilityClasses67 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses2(slots, getListItemContentUtilityClass, {});
};
var ListItemContentRoot = styled_default("div", {
  name: "JoyListItemContent",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({
  flex: "1 1 auto",
  minWidth: 0
});
var ListItemContent = React163.forwardRef(function ListItemContent2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyListItemContent"
  });
  const {
    component,
    className,
    children,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded77);
  const ownerState = _extends({}, props);
  const classes = useUtilityClasses67();
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: ListItemContentRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime123.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? ListItemContent.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types81.default.node,
  /**
   * @ignore
   */
  className: import_prop_types81.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types81.default.elementType,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types81.default.shape({
    root: import_prop_types81.default.oneOfType([import_prop_types81.default.func, import_prop_types81.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types81.default.shape({
    root: import_prop_types81.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types81.default.oneOfType([import_prop_types81.default.arrayOf(import_prop_types81.default.oneOfType([import_prop_types81.default.func, import_prop_types81.default.object, import_prop_types81.default.bool])), import_prop_types81.default.func, import_prop_types81.default.object])
} : void 0;
var ListItemContent_default = ListItemContent;

// node_modules/@mui/joy/ListItemDecorator/ListItemDecorator.js
var React164 = __toESM(require_react());
var import_prop_types82 = __toESM(require_prop_types());

// node_modules/@mui/joy/ListItemDecorator/listItemDecoratorClasses.js
function getListItemDecoratorUtilityClass(slot) {
  return generateUtilityClass2("MuiListItemDecorator", slot);
}
var listItemDecoratorClasses = generateUtilityClasses2("MuiListItemDecorator", ["root"]);
var listItemDecoratorClasses_default = listItemDecoratorClasses;

// node_modules/@mui/joy/ListItemDecorator/ListItemDecorator.js
var import_jsx_runtime124 = __toESM(require_jsx_runtime());
var _excluded78 = ["component", "className", "children", "slots", "slotProps"];
var useUtilityClasses68 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses2(slots, getListItemDecoratorUtilityClass, {});
};
var ListItemDecoratorRoot = styled_default("span", {
  name: "JoyListItemDecorator",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  ownerState
}) => _extends({
  boxSizing: "border-box",
  display: "inline-flex",
  alignItems: `var(--unstable_ListItemDecorator-alignItems, ${ownerState.parentOrientation === "horizontal" ? "center" : "initial"})`
}, ownerState.parentOrientation === "horizontal" ? {
  minInlineSize: "var(--ListItemDecorator-size)",
  marginInlineEnd: "calc(-1 * var(--ListItem-gap))"
} : {
  minBlockSize: "var(--ListItemDecorator-size)",
  justifyContent: "center",
  marginBlockEnd: "calc(-1 * var(--ListItem-gap))"
}));
var ListItemDecorator = React164.forwardRef(function ListItemDecorator2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyListItemDecorator"
  });
  const {
    component,
    className,
    children,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded78);
  const parentOrientation = React164.useContext(ListItemButtonOrientationContext_default);
  const ownerState = _extends({
    parentOrientation
  }, props);
  const classes = useUtilityClasses68();
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: ListItemDecoratorRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime124.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? ListItemDecorator.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types82.default.node,
  /**
   * @ignore
   */
  className: import_prop_types82.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types82.default.elementType,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types82.default.shape({
    root: import_prop_types82.default.oneOfType([import_prop_types82.default.func, import_prop_types82.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types82.default.shape({
    root: import_prop_types82.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types82.default.oneOfType([import_prop_types82.default.arrayOf(import_prop_types82.default.oneOfType([import_prop_types82.default.func, import_prop_types82.default.object, import_prop_types82.default.bool])), import_prop_types82.default.func, import_prop_types82.default.object])
} : void 0;
var ListItemDecorator_default = ListItemDecorator;

// node_modules/@mui/joy/Menu/Menu.js
var React165 = __toESM(require_react());
var import_prop_types83 = __toESM(require_prop_types());

// node_modules/@mui/joy/Menu/menuClasses.js
function getMenuUtilityClass2(slot) {
  return generateUtilityClass2("MuiMenu", slot);
}
var menuClasses2 = generateUtilityClasses2("MuiMenu", ["root", "listbox", "expanded", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var menuClasses_default = menuClasses2;

// node_modules/@mui/joy/Menu/Menu.js
var import_jsx_runtime125 = __toESM(require_jsx_runtime());
var _excluded79 = ["actions", "children", "color", "component", "disablePortal", "keepMounted", "id", "invertedColors", "onItemsChange", "modifiers", "variant", "size", "slots", "slotProps"];
var useUtilityClasses69 = (ownerState) => {
  const {
    open,
    variant,
    color,
    size: size3
  } = ownerState;
  const slots = {
    root: ["root", open && "expanded", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`],
    listbox: ["listbox"]
  };
  return composeClasses2(slots, getMenuUtilityClass2, {});
};
var MenuRoot = styled_default(StyledList, {
  name: "JoyMenu",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants2;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return [_extends({
    "--focus-outline-offset": `calc(${theme.vars.focus.thickness} * -1)`,
    // to prevent the focus outline from being cut by overflow
    "--ListItem-stickyBackground": (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.popup,
    "--ListItem-stickyTop": "calc(var(--List-padding, var(--ListDivider-gap)) * -1)"
  }, scopedVariables, {
    borderRadius: `var(--List-radius, ${theme.vars.radius.sm})`,
    boxShadow: theme.shadow.md,
    overflow: "auto",
    // `unstable_popup-zIndex` is a private variable that lets other component, for example Modal, to override the z-index so that the listbox can be displayed above the Modal.
    zIndex: `var(--unstable_popup-zIndex, ${theme.vars.zIndex.popup})`
  }, !(variantStyle != null && variantStyle.backgroundColor) && {
    backgroundColor: theme.vars.palette.background.popup
  }, ownerState.variant === "solid" && ownerState.color && ownerState.invertedColors && applySolidInversion(ownerState.color)(theme), ownerState.variant === "soft" && ownerState.color && ownerState.invertedColors && applySoftInversion(ownerState.color)(theme), (_theme$variants2 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants2[ownerState.color])];
});
var Menu3 = React165.forwardRef(function Menu4(inProps, ref) {
  var _props$slots;
  const props = useThemeProps2({
    props: inProps,
    name: "JoyMenu"
  });
  const {
    actions,
    children,
    color = "neutral",
    component,
    disablePortal = false,
    keepMounted = false,
    id,
    invertedColors = false,
    onItemsChange,
    modifiers: modifiersProp,
    variant = "outlined",
    size: size3 = "md",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded79);
  const {
    contextValue,
    getListboxProps,
    dispatch,
    open,
    triggerElement
  } = useMenu({
    onItemsChange,
    id,
    listboxRef: ref
  });
  React165.useImperativeHandle(actions, () => ({
    dispatch,
    resetHighlight: () => dispatch({
      type: ListActionTypes.resetHighlight,
      event: null
    })
  }), [dispatch]);
  const ownerState = _extends({}, props, {
    disablePortal,
    invertedColors,
    color,
    variant,
    size: size3,
    open,
    nesting: false,
    row: false
  });
  const classes = useUtilityClasses69(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const modifiers = React165.useMemo(() => [{
    name: "offset",
    options: {
      offset: [0, 4]
    }
  }, ...modifiersProp || []], [modifiersProp]);
  const rootProps = useSlotProps_default({
    elementType: MenuRoot,
    getSlotProps: getListboxProps,
    externalForwardedProps,
    externalSlotProps: {},
    ownerState,
    additionalProps: {
      anchorEl: triggerElement,
      open: open && triggerElement !== null,
      disablePortal,
      keepMounted,
      modifiers
    },
    className: classes.root
  });
  return (0, import_jsx_runtime125.jsx)(MenuRoot, _extends({}, rootProps, !((_props$slots = props.slots) != null && _props$slots.root) && {
    as: Popper,
    slots: {
      root: component || "ul"
    }
  }, {
    children: (0, import_jsx_runtime125.jsx)(MenuProvider, {
      value: contextValue,
      children: (0, import_jsx_runtime125.jsx)(VariantColorProvider, {
        variant: invertedColors ? void 0 : variant,
        color,
        children: (0, import_jsx_runtime125.jsx)(GroupListContext_default.Provider, {
          value: "menu",
          children: (0, import_jsx_runtime125.jsx)(ListProvider_default, {
            nested: true,
            children
          })
        })
      })
    })
  }));
});
true ? Menu3.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref with imperative actions.
   * It allows to select the first or last menu item.
   */
  actions: refType_default,
  /**
   * @ignore
   */
  children: import_prop_types83.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types83.default.oneOf(["danger", "neutral", "primary", "success", "warning"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types83.default.elementType,
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: import_prop_types83.default.bool,
  /**
   * @ignore
   */
  id: import_prop_types83.default.string,
  /**
   * If `true`, the children with an implicit color prop invert their colors to match the component's variant and color.
   * @default false
   */
  invertedColors: import_prop_types83.default.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: import_prop_types83.default.bool,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: import_prop_types83.default.arrayOf(import_prop_types83.default.shape({
    data: import_prop_types83.default.object,
    effect: import_prop_types83.default.func,
    enabled: import_prop_types83.default.bool,
    fn: import_prop_types83.default.func,
    name: import_prop_types83.default.any,
    options: import_prop_types83.default.object,
    phase: import_prop_types83.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: import_prop_types83.default.arrayOf(import_prop_types83.default.string),
    requiresIfExists: import_prop_types83.default.arrayOf(import_prop_types83.default.string)
  })),
  /**
   * Triggered when focus leaves the menu and the menu should close.
   */
  onClose: import_prop_types83.default.func,
  /**
   * Function called when the items displayed in the menu change.
   */
  onItemsChange: import_prop_types83.default.func,
  /**
   * Controls whether the menu is displayed.
   * @default false
   */
  open: import_prop_types83.default.bool,
  /**
   * The size of the component (affect other nested list* components because the `Menu` inherits `List`).
   * @default 'md'
   */
  size: import_prop_types83.default.oneOfType([import_prop_types83.default.oneOf(["sm", "md", "lg"]), import_prop_types83.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types83.default.shape({
    root: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types83.default.shape({
    root: import_prop_types83.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types83.default.oneOfType([import_prop_types83.default.arrayOf(import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object, import_prop_types83.default.bool])), import_prop_types83.default.func, import_prop_types83.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types83.default.oneOfType([import_prop_types83.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types83.default.string])
} : void 0;
var Menu_default = Menu3;

// node_modules/@mui/joy/MenuButton/MenuButton.js
var React166 = __toESM(require_react());
var import_prop_types84 = __toESM(require_prop_types());

// node_modules/@mui/joy/MenuButton/menuButtonClasses.js
function getMenuButtonUtilityClass2(slot) {
  return generateUtilityClass2("MuiMenuButton", slot);
}
var menuButtonClasses2 = generateUtilityClasses2("MuiMenuButton", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "disabled", "sizeSm", "sizeMd", "sizeLg", "fullWidth", "startDecorator", "endDecorator", "loading", "loadingIndicatorCenter"]);
var menuButtonClasses_default = menuButtonClasses2;

// node_modules/@mui/joy/MenuButton/MenuButton.js
var import_jsx_runtime126 = __toESM(require_jsx_runtime());
var import_jsx_runtime127 = __toESM(require_jsx_runtime());
var _excluded80 = ["children", "color", "component", "disabled", "endDecorator", "loading", "loadingPosition", "loadingIndicator", "size", "slotProps", "slots", "startDecorator", "variant"];
var useUtilityClasses70 = (ownerState) => {
  const {
    color,
    disabled,
    fullWidth,
    size: size3,
    variant,
    loading
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", fullWidth && "fullWidth", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`, loading && "loading"],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"],
    loadingIndicatorCenter: ["loadingIndicatorCenter"]
  };
  return composeClasses2(slots, getMenuButtonUtilityClass2, {});
};
var MenuButtonRoot = styled_default("button", {
  name: "JoyMenuButton",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(getButtonStyles);
var MenuButtonStartDecorator = styled_default("span", {
  name: "JoyMenuButton",
  slot: "StartDecorator",
  overridesResolver: (props, styles2) => styles2.startDecorator
})({
  "--Icon-margin": "0 0 0 calc(var(--Button-gap) / -2)",
  "--CircularProgress-margin": "0 0 0 calc(var(--Button-gap) / -2)",
  display: "inherit",
  marginRight: "var(--Button-gap)"
});
var MenuButtonEndDecorator = styled_default("span", {
  name: "JoyMenuButton",
  slot: "EndDecorator",
  overridesResolver: (props, styles2) => styles2.endDecorator
})({
  "--Icon-margin": "0 calc(var(--Button-gap) / -2) 0 0",
  "--CircularProgress-margin": "0 calc(var(--Button-gap) / -2) 0 0",
  display: "inherit",
  marginLeft: "var(--Button-gap)"
});
var MenuButtonLoadingCenter = styled_default("span", {
  name: "JoyMenuButton",
  slot: "LoadingCenter",
  overridesResolver: (props, styles2) => styles2.loadingIndicatorCenter
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants2;
  return _extends({
    display: "inherit",
    position: "absolute",
    left: "50%",
    transform: "translateX(-50%)",
    color: (_theme$variants = theme.variants[ownerState.variant]) == null || (_theme$variants = _theme$variants[ownerState.color]) == null ? void 0 : _theme$variants.color
  }, ownerState.disabled && {
    color: (_theme$variants2 = theme.variants[`${ownerState.variant}Disabled`]) == null || (_theme$variants2 = _theme$variants2[ownerState.color]) == null ? void 0 : _theme$variants2.color
  });
});
var MenuButton3 = React166.forwardRef(function MenuButton4(inProps, forwardedRef) {
  var _inProps$disabled;
  const props = useThemeProps2({
    props: inProps,
    name: "JoyMenuButton"
  });
  const {
    children,
    color = "neutral",
    component,
    disabled: disabledProp = false,
    endDecorator,
    loading = false,
    loadingPosition = "center",
    loadingIndicator: loadingIndicatorProp,
    size: sizeProp = "md",
    slotProps = {},
    slots = {},
    startDecorator,
    variant: variantProp = "outlined"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded80);
  const buttonGroup = React166.useContext(ButtonGroupContext_default);
  const variant = inProps.variant || buttonGroup.variant || variantProp;
  const size3 = inProps.size || buttonGroup.size || sizeProp;
  const disabled = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : buttonGroup.disabled || disabledProp || loading;
  const {
    getRootProps,
    open,
    active
  } = useMenuButton({
    rootRef: forwardedRef,
    disabled
  });
  const loadingIndicator = loadingIndicatorProp != null ? loadingIndicatorProp : (0, import_jsx_runtime126.jsx)(CircularProgress_default, {
    color,
    thickness: {
      sm: 2,
      md: 3,
      lg: 4
    }[size3] || 3
  });
  const ownerState = _extends({}, props, {
    active,
    color,
    disabled,
    open,
    size: size3,
    variant
  });
  const classes = useUtilityClasses70(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    elementType: MenuButtonRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    ref: forwardedRef,
    ownerState,
    className: classes.root
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: MenuButtonStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: MenuButtonEndDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotLoadingIndicatorCenter, loadingIndicatorCenterProps] = useSlot("loadingIndicatorCenter", {
    className: classes.loadingIndicatorCenter,
    elementType: MenuButtonLoadingCenter,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime127.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [(startDecorator || loading && loadingPosition === "start") && (0, import_jsx_runtime126.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
      children: loading && loadingPosition === "start" ? loadingIndicator : startDecorator
    })), children, loading && loadingPosition === "center" && (0, import_jsx_runtime126.jsx)(SlotLoadingIndicatorCenter, _extends({}, loadingIndicatorCenterProps, {
      children: loadingIndicator
    })), (endDecorator || loading && loadingPosition === "end") && (0, import_jsx_runtime126.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
      children: loading && loadingPosition === "end" ? loadingIndicator : endDecorator
    }))]
  }));
});
true ? MenuButton3.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types84.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types84.default.oneOfType([import_prop_types84.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types84.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types84.default.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types84.default.bool,
  /**
   * Element placed after the children.
   */
  endDecorator: import_prop_types84.default.node,
  /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */
  fullWidth: import_prop_types84.default.bool,
  /**
   * If `true`, the loading indicator is shown.
   * @default false
   */
  loading: import_prop_types84.default.bool,
  /**
   * The node should contain an element with `role="progressbar"` with an accessible name.
   * By default we render a `CircularProgress` that is labelled by the button itself.
   * @default <CircularProgress />
   */
  loadingIndicator: import_prop_types84.default.node,
  /**
   * The loading indicator can be positioned on the start, end, or the center of the button.
   * @default 'center'
   */
  loadingPosition: import_prop_types84.default.oneOf(["center", "end", "start"]),
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types84.default.oneOfType([import_prop_types84.default.oneOf(["sm", "md", "lg"]), import_prop_types84.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types84.default.shape({
    endDecorator: import_prop_types84.default.oneOfType([import_prop_types84.default.func, import_prop_types84.default.object]),
    loadingIndicatorCenter: import_prop_types84.default.oneOfType([import_prop_types84.default.func, import_prop_types84.default.object]),
    root: import_prop_types84.default.oneOfType([import_prop_types84.default.func, import_prop_types84.default.object]),
    startDecorator: import_prop_types84.default.oneOfType([import_prop_types84.default.func, import_prop_types84.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types84.default.shape({
    endDecorator: import_prop_types84.default.elementType,
    loadingIndicatorCenter: import_prop_types84.default.elementType,
    root: import_prop_types84.default.elementType,
    startDecorator: import_prop_types84.default.elementType
  }),
  /**
   * Element placed before the children.
   */
  startDecorator: import_prop_types84.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types84.default.oneOfType([import_prop_types84.default.arrayOf(import_prop_types84.default.oneOfType([import_prop_types84.default.func, import_prop_types84.default.object, import_prop_types84.default.bool])), import_prop_types84.default.func, import_prop_types84.default.object]),
  /**
   * @default 0
   */
  tabIndex: import_prop_types84.default.number,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types84.default.oneOfType([import_prop_types84.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types84.default.string])
} : void 0;
var MenuButton_default = MenuButton3;

// node_modules/@mui/joy/MenuItem/MenuItem.js
var React167 = __toESM(require_react());
var import_prop_types85 = __toESM(require_prop_types());

// node_modules/@mui/joy/MenuItem/menuItemClasses.js
function getMenuItemUtilityClass2(slot) {
  return generateUtilityClass2("MuiMenuItem", slot);
}
var menuItemClasses2 = generateUtilityClasses2("MuiMenuItem", ["root", "focusVisible", "disabled", "selected", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var menuItemClasses_default = menuItemClasses2;

// node_modules/@mui/joy/MenuItem/MenuItem.js
var import_jsx_runtime128 = __toESM(require_jsx_runtime());
var _excluded81 = ["children", "disabled", "component", "selected", "color", "orientation", "variant", "slots", "slotProps", "id"];
var useUtilityClasses71 = (ownerState) => {
  const {
    focusVisible,
    disabled,
    selected,
    color,
    variant
  } = ownerState;
  const slots = {
    root: ["root", focusVisible && "focusVisible", disabled && "disabled", selected && "selected", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`]
  };
  const composedClasses = composeClasses2(slots, getMenuItemUtilityClass2, {});
  return composedClasses;
};
var MenuItemRoot = styled_default(StyledListItemButton, {
  name: "JoyMenuItem",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({});
var MenuItem4 = React167.memo(React167.forwardRef(function MenuItem5(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyMenuItem"
  });
  const row = React167.useContext(RowListContext_default);
  const {
    children,
    disabled: disabledProp = false,
    component = "li",
    selected = false,
    color: colorProp = "neutral",
    orientation = "horizontal",
    variant: variantProp = "plain",
    slots = {},
    slotProps = {},
    id
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded81);
  const {
    variant = variantProp,
    color = colorProp
  } = useVariantColor(inProps.variant, inProps.color);
  const {
    getRootProps,
    disabled,
    focusVisible
  } = useMenuItem({
    id,
    disabled: disabledProp,
    rootRef: ref
  });
  const ownerState = _extends({}, props, {
    component,
    color,
    disabled,
    focusVisible,
    orientation,
    selected,
    row,
    variant
  });
  const classes = useUtilityClasses71(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: MenuItemRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime128.jsx)(ListItemButtonOrientationContext_default.Provider, {
    value: orientation,
    children: (0, import_jsx_runtime128.jsx)(SlotRoot, _extends({}, rootProps, {
      children
    }))
  });
}));
var StableMenuItem = React167.forwardRef(function StableMenuItem2(props, ref) {
  const {
    contextValue,
    id
  } = useMenuItemContextStabilizer(props.id);
  return (0, import_jsx_runtime128.jsx)(ListContext.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime128.jsx)(MenuItem4, _extends({}, props, {
      id,
      ref
    }))
  });
});
true ? StableMenuItem.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types85.default.node,
  id: import_prop_types85.default.string
} : void 0;
var MenuItem_default = StableMenuItem;

// node_modules/@mui/joy/MenuList/MenuList.js
var React168 = __toESM(require_react());
var import_prop_types86 = __toESM(require_prop_types());

// node_modules/@mui/joy/MenuList/menuListClasses.js
function getMenuListUtilityClass(slot) {
  return generateUtilityClass2("MuiMenuList", slot);
}
var menuClasses3 = generateUtilityClasses2("MuiMenuList", ["root", "nested", "sizeSm", "sizeMd", "sizeLg", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var menuListClasses_default = menuClasses3;

// node_modules/@mui/joy/MenuList/MenuList.js
var import_jsx_runtime129 = __toESM(require_jsx_runtime());
var _excluded82 = ["actions", "id", "component", "children", "size", "variant", "color", "onItemsChange", "slots", "slotProps"];
var useUtilityClasses72 = (ownerState) => {
  const {
    variant,
    color,
    size: size3
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`]
  };
  return composeClasses2(slots, getMenuListUtilityClass, {});
};
var MenuListRoot = styled_default(StyledList, {
  name: "JoyMenuList",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return _extends({
    "--focus-outline-offset": `calc(${theme.vars.focus.thickness} * -1)`,
    // to prevent the focus outline from being cut by overflow
    "--ListItem-stickyBackground": (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.surface,
    "--ListItem-stickyTop": "calc(var(--List-padding, var(--ListDivider-gap)) * -1)"
  }, scopedVariables, {
    borderRadius: `var(--List-radius, ${theme.vars.radius.sm})`,
    overflow: "auto"
  }, !(variantStyle != null && variantStyle.backgroundColor) && {
    backgroundColor: theme.vars.palette.background.surface
  });
});
var MenuList = React168.forwardRef(function MenuList2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyMenuList"
  });
  const {
    actions,
    id: idProp,
    component,
    children,
    size: size3 = "md",
    variant = "outlined",
    color = "neutral",
    onItemsChange,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded82);
  const {
    contextValue: menuContextValue,
    getListboxProps,
    dispatch
  } = useMenu({
    listboxRef: ref,
    id: idProp,
    onItemsChange
  });
  React168.useImperativeHandle(actions, () => ({
    dispatch,
    resetHighlight: () => dispatch({
      type: ListActionTypes.resetHighlight,
      event: null
    })
  }), [dispatch]);
  const ownerState = _extends({}, props, {
    variant,
    color,
    size: size3,
    nesting: false,
    row: false
  });
  const classes = useUtilityClasses72(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: MenuListRoot,
    getSlotProps: getListboxProps,
    externalForwardedProps,
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime129.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime129.jsx)(MenuProvider, {
      value: menuContextValue,
      children: (0, import_jsx_runtime129.jsx)(GroupListContext_default.Provider, {
        value: "menu",
        children: (0, import_jsx_runtime129.jsx)(ListProvider_default, {
          nested: true,
          children
        })
      })
    })
  }));
});
true ? MenuList.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref with imperative actions.
   * It allows to select the first or last menu item.
   */
  actions: refType_default,
  /**
   * @ignore
   */
  children: import_prop_types86.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types86.default.oneOfType([import_prop_types86.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types86.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types86.default.elementType,
  /**
   * @ignore
   */
  id: import_prop_types86.default.string,
  /**
   * Function called when the items displayed in the menu change.
   */
  onItemsChange: import_prop_types86.default.func,
  /**
   * The size of the component (affect other nested list* components because the `Menu` inherits `List`).
   * @default 'md'
   */
  size: import_prop_types86.default.oneOfType([import_prop_types86.default.oneOf(["sm", "md", "lg"]), import_prop_types86.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types86.default.shape({
    root: import_prop_types86.default.oneOfType([import_prop_types86.default.func, import_prop_types86.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types86.default.shape({
    root: import_prop_types86.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types86.default.oneOfType([import_prop_types86.default.arrayOf(import_prop_types86.default.oneOfType([import_prop_types86.default.func, import_prop_types86.default.object, import_prop_types86.default.bool])), import_prop_types86.default.func, import_prop_types86.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types86.default.oneOfType([import_prop_types86.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types86.default.string])
} : void 0;
var MenuList_default = MenuList;

// node_modules/@mui/joy/ModalClose/ModalClose.js
var React169 = __toESM(require_react());
var import_prop_types87 = __toESM(require_prop_types());

// node_modules/@mui/joy/ModalClose/modalCloseClasses.js
function getModalCloseUtilityClass(slot) {
  return generateUtilityClass2("MuiModalClose", slot);
}
var modalCloseClasses = generateUtilityClasses2("MuiModalClose", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var modalCloseClasses_default = modalCloseClasses;

// node_modules/@mui/joy/ModalClose/ModalClose.js
var import_jsx_runtime130 = __toESM(require_jsx_runtime());
var _CloseIcon;
var _excluded83 = ["component", "color", "variant", "size", "onClick", "slots", "slotProps"];
var useUtilityClasses73 = (ownerState) => {
  const {
    variant,
    color,
    disabled,
    focusVisible,
    size: size3
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`]
  };
  return composeClasses2(slots, getModalCloseUtilityClass, {});
};
var ModalCloseRoot = styled_default(StyledIconButton, {
  name: "JoyModalClose",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants;
  return _extends({}, ownerState.size === "sm" && {
    "--IconButton-size": "1.75rem"
  }, ownerState.size === "md" && {
    "--IconButton-size": "2rem"
  }, ownerState.size === "lg" && {
    "--IconButton-size": "2.25rem"
  }, {
    position: "absolute",
    zIndex: 1,
    // stay on top of the title in case it is positioned relatively
    top: `var(--ModalClose-inset, 0.625rem)`,
    right: `var(--ModalClose-inset, 0.625rem)`,
    borderRadius: `var(--ModalClose-radius, ${theme.vars.radius.sm})`
  }, !((_theme$variants = theme.variants[ownerState.variant]) != null && (_theme$variants = _theme$variants[ownerState.color]) != null && _theme$variants.backgroundColor) && {
    color: theme.vars.palette.text.secondary
  });
});
var modalDialogVariantMapping = {
  plain: "plain",
  outlined: "plain",
  soft: "soft",
  solid: "solid"
};
var ModalClose = React169.forwardRef(function ModalClose2(inProps, ref) {
  var _ref, _inProps$variant, _ref2, _inProps$color, _ref3, _inProps$size;
  const props = useThemeProps2({
    props: inProps,
    name: "JoyModalClose"
  });
  const {
    component = "button",
    color: colorProp = "neutral",
    variant: variantProp = "plain",
    size: sizeProp = "md",
    onClick,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded83);
  const closeModalContext = React169.useContext(CloseModalContext_default);
  const modalDialogVariantColor = React169.useContext(ModalDialogVariantColorContext_default);
  const variant = (_ref = (_inProps$variant = inProps.variant) != null ? _inProps$variant : modalDialogVariantMapping[modalDialogVariantColor == null ? void 0 : modalDialogVariantColor.variant]) != null ? _ref : variantProp;
  const color = (_ref2 = (_inProps$color = inProps.color) != null ? _inProps$color : modalDialogVariantColor == null ? void 0 : modalDialogVariantColor.color) != null ? _ref2 : colorProp;
  const modalDialogSize = React169.useContext(ModalDialogSizeContext_default);
  const size3 = (_ref3 = (_inProps$size = inProps.size) != null ? _inProps$size : modalDialogSize) != null ? _ref3 : sizeProp;
  const {
    focusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    rootRef: ref
  }));
  const ownerState = _extends({}, props, {
    color,
    component,
    variant,
    size: size3,
    focusVisible
  });
  const classes = useUtilityClasses73(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: ModalCloseRoot,
    getSlotProps: getRootProps,
    externalForwardedProps: _extends({
      onClick: (event) => {
        closeModalContext == null || closeModalContext(event, "closeClick");
        onClick == null || onClick(event);
      }
    }, other, {
      component,
      slots,
      slotProps
    }),
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime130.jsx)(SlotRoot, _extends({}, rootProps, {
    children: _CloseIcon || (_CloseIcon = (0, import_jsx_runtime130.jsx)(Close_default, {}))
  }));
});
true ? ModalClose.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types87.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types87.default.oneOfType([import_prop_types87.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types87.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types87.default.elementType,
  /**
   * @ignore
   */
  onClick: import_prop_types87.default.func,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types87.default.oneOfType([import_prop_types87.default.oneOf(["sm", "md", "lg"]), import_prop_types87.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types87.default.shape({
    root: import_prop_types87.default.oneOfType([import_prop_types87.default.func, import_prop_types87.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types87.default.shape({
    root: import_prop_types87.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types87.default.oneOfType([import_prop_types87.default.arrayOf(import_prop_types87.default.oneOfType([import_prop_types87.default.func, import_prop_types87.default.object, import_prop_types87.default.bool])), import_prop_types87.default.func, import_prop_types87.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types87.default.oneOfType([import_prop_types87.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types87.default.string])
} : void 0;
var ModalClose_default = ModalClose;

// node_modules/@mui/joy/ModalDialog/ModalDialog.js
var React170 = __toESM(require_react());
var import_prop_types88 = __toESM(require_prop_types());
var import_jsx_runtime131 = __toESM(require_jsx_runtime());
var _excluded84 = ["className", "children", "invertedColors", "orientation", "color", "component", "variant", "size", "layout", "maxWidth", "minWidth", "slots", "slotProps"];
var useUtilityClasses74 = (ownerState) => {
  const {
    variant,
    color,
    size: size3,
    layout
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`, layout && `layout${capitalize(layout)}`]
  };
  return composeClasses2(slots, getModalDialogUtilityClass, {});
};
function getBreakpointValue(theme, breakpoint) {
  var _theme$breakpoints, _theme$breakpoints2;
  return breakpoint && (_theme$breakpoints = theme.breakpoints) != null && _theme$breakpoints.values[breakpoint] ? `${(_theme$breakpoints2 = theme.breakpoints) == null ? void 0 : _theme$breakpoints2.values[breakpoint]}px` : breakpoint;
}
var ModalDialogRoot = styled_default(StyledCardRoot, {
  name: "JoyModalDialog",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => _extends({
  "--ModalDialog-minWidth": typeof ownerState.minWidth === "number" ? `${ownerState.minWidth}px` : getBreakpointValue(theme, ownerState.minWidth),
  "--ModalDialog-maxWidth": typeof ownerState.maxWidth === "number" ? `${ownerState.maxWidth}px` : getBreakpointValue(theme, ownerState.maxWidth),
  "--ModalClose-radius": "max((var(--Card-radius) - var(--variant-borderWidth, 0px)) - var(--ModalClose-inset), min(var(--ModalClose-inset) / 2, (var(--Card-radius) - var(--variant-borderWidth, 0px)) / 2))"
}, ownerState.variant === "solid" && {
  "--DialogContent-color": "currentColor"
}, ownerState.size === "sm" && {
  "--Card-padding": "1rem",
  "--ModalDialog-titleOffset": theme.spacing(0.25),
  "--ModalDialog-descriptionOffset": theme.spacing(0.25),
  "--ModalClose-inset": "0.375rem"
}, ownerState.size === "md" && {
  "--Card-padding": "1.25rem",
  "--ModalDialog-titleOffset": theme.spacing(0.25),
  "--ModalDialog-descriptionOffset": theme.spacing(0.75),
  "--ModalClose-inset": "0.5rem"
}, ownerState.size === "lg" && {
  "--Card-padding": "1.5rem",
  "--ModalDialog-titleOffset": theme.spacing(0.5),
  "--ModalDialog-descriptionOffset": theme.spacing(1),
  "--ModalClose-inset": "0.625rem"
}, {
  boxSizing: "border-box",
  boxShadow: theme.shadow.md,
  minWidth: "min(calc(100vw - 2 * var(--Card-padding)), var(--ModalDialog-minWidth, 300px))",
  outline: 0,
  position: "absolute"
}, ownerState.layout === "fullscreen" && {
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  border: 0,
  borderRadius: 0
}, ownerState.layout === "center" && {
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  maxWidth: "min(calc(100vw - 2 * var(--Card-padding)), var(--ModalDialog-maxWidth, 100vw))",
  maxHeight: "calc(100% - 2 * var(--Card-padding))"
}, {
  [`& [id="${ownerState["aria-labelledby"]}"]`]: {
    "--Typography-margin": "calc(-1 * var(--ModalDialog-titleOffset)) 0 var(--ModalDialog-gap) 0",
    "--Typography-fontSize": "1.125em",
    [`& + [id="${ownerState["aria-describedby"]}"]`]: {
      "--unstable_ModalDialog-descriptionOffset": "calc(-1 * var(--ModalDialog-descriptionOffset))"
    }
  },
  [`& [id="${ownerState["aria-describedby"]}"]`]: {
    "--Typography-fontSize": "1em",
    "--Typography-margin": "var(--unstable_ModalDialog-descriptionOffset, var(--ModalDialog-gap)) 0 0 0",
    "&:not(:last-child)": {
      // create spacing between description and the next element.
      "--Typography-margin": "var(--unstable_ModalDialog-descriptionOffset, var(--ModalDialog-gap)) 0 var(--ModalDialog-gap) 0"
    }
  }
}));
var ModalDialog = React170.forwardRef(function ModalDialog2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyModalDialog"
  });
  const {
    className,
    children,
    invertedColors = false,
    orientation = "vertical",
    color = "neutral",
    component = "div",
    variant = "outlined",
    size: size3 = "md",
    layout = "center",
    maxWidth,
    minWidth,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded84);
  const ownerState = _extends({}, props, {
    color,
    component,
    maxWidth,
    minWidth,
    layout,
    size: size3,
    variant,
    invertedColors
  });
  const classes = useUtilityClasses74(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const labelledBy = useId();
  const describedBy = useId();
  const contextValue = React170.useMemo(() => ({
    variant,
    color,
    labelledBy,
    describedBy
  }), [color, variant, labelledBy, describedBy]);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: ModalDialogRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      as: component,
      role: "dialog",
      "aria-modal": "true",
      "aria-labelledby": labelledBy,
      "aria-describedby": describedBy
    }
  });
  return (0, import_jsx_runtime131.jsx)(ModalDialogSizeContext_default.Provider, {
    value: size3,
    children: (0, import_jsx_runtime131.jsx)(ModalDialogVariantColorContext_default.Provider, {
      value: contextValue,
      children: (0, import_jsx_runtime131.jsx)(SlotRoot, _extends({}, rootProps, {
        children: React170.Children.map(children, (child, index2) => {
          if (!React170.isValidElement(child)) {
            return child;
          }
          const extraProps = {};
          if (isMuiElement(child, ["Divider"])) {
            var _childProps$inset, _childProps$orientati;
            const childProps = child.props;
            extraProps.inset = (_childProps$inset = childProps == null ? void 0 : childProps.inset) != null ? _childProps$inset : "context";
            const dividerOrientation = orientation === "vertical" ? "horizontal" : "vertical";
            extraProps.orientation = (_childProps$orientati = childProps == null ? void 0 : childProps.orientation) != null ? _childProps$orientati : dividerOrientation;
          }
          if (index2 === 0) {
            extraProps["data-first-child"] = "";
          }
          if (index2 === React170.Children.count(children) - 1) {
            extraProps["data-last-child"] = "";
          }
          return React170.cloneElement(child, extraProps);
        })
      }))
    })
  });
});
true ? ModalDialog.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types88.default.node,
  /**
   * @ignore
   */
  className: import_prop_types88.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types88.default.oneOfType([import_prop_types88.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types88.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types88.default.elementType,
  /**
   * If `true`, the children with an implicit color prop invert their colors to match the component's variant and color.
   * @default false
   */
  invertedColors: import_prop_types88.default.bool,
  /**
   * The layout of the dialog
   * @default 'center'
   */
  layout: import_prop_types88.default.oneOfType([import_prop_types88.default.oneOf(["center", "fullscreen"]), import_prop_types88.default.string]),
  /**
   * The maximum width of the component.
   * @example 'md' will use the theme's `md` breakpoint value
   * @example 360 is the number of pixels
   * @example '60ch' can be any valid CSS max-width unit
   */
  maxWidth: import_prop_types88.default.oneOfType([import_prop_types88.default.number, import_prop_types88.default.string]),
  /**
   * The minimum width of the component.
   * @example 'md' will use the theme's `md` breakpoint value
   * @example 360 is the number of pixels
   * @example '60ch' can be any valid CSS min-width unit
   */
  minWidth: import_prop_types88.default.oneOfType([import_prop_types88.default.number, import_prop_types88.default.string]),
  /**
   * The component orientation.
   * @default 'vertical'
   */
  orientation: import_prop_types88.default.oneOf(["horizontal", "vertical"]),
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types88.default.oneOfType([import_prop_types88.default.oneOf(["sm", "md", "lg"]), import_prop_types88.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types88.default.shape({
    root: import_prop_types88.default.oneOfType([import_prop_types88.default.func, import_prop_types88.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types88.default.shape({
    root: import_prop_types88.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types88.default.oneOfType([import_prop_types88.default.arrayOf(import_prop_types88.default.oneOfType([import_prop_types88.default.func, import_prop_types88.default.object, import_prop_types88.default.bool])), import_prop_types88.default.func, import_prop_types88.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types88.default.oneOfType([import_prop_types88.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types88.default.string])
} : void 0;
var ModalDialog_default = ModalDialog;

// node_modules/@mui/joy/ModalOverflow/ModalOverflow.js
var React171 = __toESM(require_react());
var import_prop_types89 = __toESM(require_prop_types());

// node_modules/@mui/joy/ModalOverflow/modalOverflowClasses.js
function getModalOverflowUtilityClass(slot) {
  return generateUtilityClass2("MuiModalOverflow", slot);
}
var modalOverflowClasses = generateUtilityClasses2("MuiModalOverflow", ["root"]);
var modalOverflowClasses_default = modalOverflowClasses;

// node_modules/@mui/joy/ModalOverflow/ModalOverflow.js
var import_jsx_runtime132 = __toESM(require_jsx_runtime());
var _excluded85 = ["children", "onClick"];
var useUtilityClasses75 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses2(slots, getModalOverflowUtilityClass, {});
};
var ModalOverflowRoot = styled_default("div", {
  name: "JoyModalOverflow",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({
  "--ModalOverflow-paddingY": "1.5rem",
  position: "absolute",
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  height: "100%",
  overflow: "hidden auto",
  outline: "none",
  display: "flex",
  flexDirection: "column",
  // required for fullscreen ModalDialog, using `row` cannot be achieved.
  padding: "var(--ModalOverflow-paddingY) 0",
  // let's not create `size` prop to only control the `padding`.
  [`& .${modalDialogClasses_default.layoutCenter}`]: {
    position: "relative",
    margin: "auto",
    // to make the dialog stay at center when content does not overflow the screen.
    height: "max-content",
    // height is based on content, otherwise `margin: auto` will take place.
    maxHeight: "unset",
    transform: "none",
    top: "unset",
    left: "unset"
  },
  [`& .${modalDialogClasses_default.layoutFullscreen}`]: {
    position: "relative",
    width: "100%",
    margin: "calc(-1 * var(--ModalOverflow-paddingY)) 0",
    flex: 1
  }
});
var ModalOverflow = React171.forwardRef(function ModalOverflow2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyModalOverflow"
  });
  const {
    children,
    onClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded85);
  const onClose = React171.useContext(CloseModalContext_default);
  const ownerState = props;
  const classes = useUtilityClasses75();
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: ModalOverflowRoot,
    externalForwardedProps: other,
    ownerState,
    additionalProps: {
      role: "presentation",
      tabIndex: -1,
      onClick: (event) => {
        if (event.target === event.currentTarget) {
          onClose == null || onClose(event, "backdropClick");
        }
        onClick == null || onClick(event);
      }
    }
  });
  return (0, import_jsx_runtime132.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? ModalOverflow.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types89.default.node,
  /**
   * @ignore
   */
  onClick: import_prop_types89.default.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types89.default.oneOfType([import_prop_types89.default.arrayOf(import_prop_types89.default.oneOfType([import_prop_types89.default.func, import_prop_types89.default.object, import_prop_types89.default.bool])), import_prop_types89.default.func, import_prop_types89.default.object])
} : void 0;
var ModalOverflow_default = ModalOverflow;

// node_modules/@mui/joy/Option/Option.js
var React172 = __toESM(require_react());
var import_prop_types90 = __toESM(require_prop_types());

// node_modules/@mui/joy/Option/optionClasses.js
function getOptionUtilityClass2(slot) {
  return generateUtilityClass2("MuiOption", slot);
}
var optionClasses2 = generateUtilityClasses2("MuiOption", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "focusVisible", "disabled", "selected", "highlighted", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var optionClasses_default = optionClasses2;

// node_modules/@mui/joy/Option/Option.js
var import_jsx_runtime133 = __toESM(require_jsx_runtime());
var _excluded86 = ["component", "children", "disabled", "value", "label", "variant", "color", "slots", "slotProps"];
var useUtilityClasses76 = (ownerState) => {
  const {
    disabled,
    highlighted,
    selected
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", highlighted && "highlighted", selected && "selected"]
  };
  return composeClasses2(slots, getOptionUtilityClass2, {});
};
var OptionRoot = styled_default(StyledListItemButton, {
  name: "JoyOption",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const variantStyle = (_theme$variants = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants[ownerState.color];
  return {
    [`&.${optionClasses_default.highlighted}:not([aria-selected="true"])`]: {
      backgroundColor: variantStyle == null ? void 0 : variantStyle.backgroundColor
    }
  };
});
var Option4 = React172.memo(React172.forwardRef(function Option5(inProps, ref) {
  var _optionRef$current;
  const props = useThemeProps2({
    props: inProps,
    name: "JoyOption"
  });
  const {
    component = "li",
    children,
    disabled = false,
    value,
    label,
    variant: variantProp = "plain",
    color: colorProp = "neutral",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded86);
  const row = React172.useContext(RowListContext_default);
  const {
    variant = variantProp,
    color = colorProp
  } = useVariantColor(inProps.variant, inProps.color);
  const optionRef = React172.useRef(null);
  const combinedRef = useForkRef(optionRef, ref);
  const computedLabel = label != null ? label : typeof children === "string" ? children : (_optionRef$current = optionRef.current) == null ? void 0 : _optionRef$current.innerText;
  const {
    getRootProps,
    selected,
    highlighted,
    index: index2
  } = useOption({
    disabled,
    label: computedLabel,
    value,
    rootRef: combinedRef
  });
  const ownerState = _extends({}, props, {
    disabled,
    selected,
    highlighted,
    index: index2,
    component,
    variant,
    color,
    row
  });
  const classes = useUtilityClasses76(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    getSlotProps: getRootProps,
    elementType: OptionRoot,
    externalForwardedProps,
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime133.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
}));
var StableOption = React172.forwardRef(function StableOption2(props, ref) {
  const {
    contextValue
  } = useOptionContextStabilizer(props.value);
  return (0, import_jsx_runtime133.jsx)(ListContext.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime133.jsx)(Option4, _extends({}, props, {
      ref
    }))
  });
});
true ? StableOption.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types90.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types90.default.oneOfType([import_prop_types90.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types90.default.string]),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types90.default.bool,
  /**
   * A text representation of the option's content.
   * Used for keyboard text navigation matching.
   */
  label: import_prop_types90.default.oneOfType([import_prop_types90.default.element, import_prop_types90.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types90.default.oneOfType([import_prop_types90.default.arrayOf(import_prop_types90.default.oneOfType([import_prop_types90.default.func, import_prop_types90.default.object, import_prop_types90.default.bool])), import_prop_types90.default.func, import_prop_types90.default.object]),
  /**
   * The option value.
   */
  value: import_prop_types90.default.any.isRequired,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types90.default.oneOfType([import_prop_types90.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types90.default.string])
} : void 0;
var Option_default = StableOption;

// node_modules/@mui/joy/Radio/Radio.js
var React173 = __toESM(require_react());
var import_prop_types91 = __toESM(require_prop_types());

// node_modules/@mui/joy/Radio/radioClasses.js
function getRadioUtilityClass(slot) {
  return generateUtilityClass2("MuiRadio", slot);
}
var radioClasses = generateUtilityClasses2("MuiRadio", ["root", "radio", "icon", "action", "input", "label", "checked", "disabled", "focusVisible", "colorPrimary", "colorDanger", "colorNeutral", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantOutlined", "variantSoft", "variantSolid"]);
var radioClasses_default = radioClasses;

// node_modules/@mui/joy/Radio/Radio.js
var import_jsx_runtime134 = __toESM(require_jsx_runtime());
var import_jsx_runtime135 = __toESM(require_jsx_runtime());
var _excluded87 = ["checked", "checkedIcon", "defaultChecked", "disabled", "disableIcon", "overlay", "label", "id", "name", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required", "color", "variant", "size", "uncheckedIcon", "value", "component", "slots", "slotProps"];
var useUtilityClasses77 = (ownerState) => {
  const {
    checked,
    disabled,
    disableIcon,
    focusVisible,
    color,
    variant,
    size: size3
  } = ownerState;
  const slots = {
    root: ["root", checked && "checked", disabled && "disabled", focusVisible && "focusVisible", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`],
    radio: ["radio", checked && "checked", disabled && "disabled"],
    // disabled class is necessary for displaying global variant
    icon: ["icon"],
    action: [
      "action",
      checked && "checked",
      disableIcon && disabled && "disabled",
      // add disabled class to action element for displaying global variant
      focusVisible && "focusVisible"
    ],
    input: ["input"],
    label: ["label"]
  };
  return composeClasses2(slots, getRadioUtilityClass, {});
};
function areEqualValues(a, b) {
  if (typeof b === "object" && b !== null) {
    return a === b;
  }
  return String(a) === String(b);
}
var RadioRoot = styled_default("span", {
  name: "JoyRadio",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants$plain, _theme$variants, _theme$variants2;
  return [_extends({
    "--Icon-fontSize": "var(--Radio-size)",
    "--Icon-color": "currentColor"
  }, ownerState.size === "sm" && {
    "--Radio-size": "1rem",
    // --FormHelperText-margin is equal to --Radio-size + --Radio-gap but we can't use calc() with CSS variables because the FormHelperText is a sibling element
    "& ~ *": {
      "--FormHelperText-margin": "0 0 0 1.5rem"
    },
    fontSize: theme.vars.fontSize.sm,
    gap: "var(--Radio-gap, 0.5rem)"
  }, ownerState.size === "md" && {
    "--Radio-size": "1.25rem",
    "& ~ *": {
      "--FormHelperText-margin": "0.25rem 0 0 1.875rem"
    },
    fontSize: theme.vars.fontSize.md,
    gap: "var(--Radio-gap, 0.625rem)"
  }, ownerState.size === "lg" && {
    "--Radio-size": "1.5rem",
    "& ~ *": {
      "--FormHelperText-margin": "0.375rem 0 0 2.25rem"
    },
    fontSize: theme.vars.fontSize.lg,
    gap: "var(--Radio-gap, 0.75rem)"
  }, {
    position: ownerState.overlay ? "initial" : "relative",
    display: "inline-flex",
    boxSizing: "border-box",
    minWidth: 0,
    fontFamily: theme.vars.fontFamily.body,
    lineHeight: "var(--Radio-size)",
    // prevent label from having larger height than the checkbox
    color: theme.vars.palette.text.primary,
    [`&.${radioClasses_default.disabled}`]: {
      color: (_theme$variants$plain = theme.variants.plainDisabled) == null || (_theme$variants$plain = _theme$variants$plain[ownerState.color]) == null ? void 0 : _theme$variants$plain.color
    }
  }, ownerState.disableIcon && {
    color: (_theme$variants = theme.variants[ownerState.variant]) == null || (_theme$variants = _theme$variants[ownerState.color]) == null ? void 0 : _theme$variants.color,
    [`&.${radioClasses_default.disabled}`]: {
      color: (_theme$variants2 = theme.variants[`${ownerState.variant}Disabled`]) == null || (_theme$variants2 = _theme$variants2[ownerState.color]) == null ? void 0 : _theme$variants2.color
    }
  }, ownerState["data-parent"] === "RadioGroup" && ownerState["data-first-child"] === void 0 && {
    marginInlineStart: ownerState.orientation === "horizontal" ? "var(--RadioGroup-gap)" : void 0,
    marginBlockStart: ownerState.orientation === "horizontal" ? void 0 : "var(--RadioGroup-gap)"
  })];
});
var RadioRadio = styled_default("span", {
  name: "JoyRadio",
  slot: "Radio",
  overridesResolver: (props, styles2) => styles2.radio
})(({
  ownerState,
  theme
}) => {
  var _theme$variants3, _variantStyle$backgro, _theme$variants4, _theme$variants5, _theme$variants6;
  const variantStyle = (_theme$variants3 = theme.variants[`${ownerState.variant}`]) == null ? void 0 : _theme$variants3[ownerState.color];
  return [_extends({
    "--Icon-color": ownerState.color !== "neutral" || ownerState.variant === "solid" ? "currentColor" : theme.vars.palette.text.icon,
    margin: 0,
    boxSizing: "border-box",
    width: "var(--Radio-size)",
    height: "var(--Radio-size)",
    borderRadius: "var(--Radio-size)",
    display: "inline-flex",
    justifyContent: "center",
    alignItems: "center",
    flexShrink: 0
  }, ownerState.disableIcon && {
    display: "contents"
  }, {
    [`&.${radioClasses_default.checked}`]: {
      "--Icon-color": "currentColor"
    }
  }), ...!ownerState.disableIcon ? [_extends({}, variantStyle, {
    backgroundColor: (_variantStyle$backgro = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro : theme.vars.palette.background.surface
  }), {
    "&:hover": {
      "@media (hover: hover)": (_theme$variants4 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants4[ownerState.color]
    }
  }, {
    "&:active": (_theme$variants5 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants5[ownerState.color]
  }, {
    [`&.${radioClasses_default.disabled}`]: (_theme$variants6 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants6[ownerState.color]
  }] : []];
});
var RadioAction = styled_default("span", {
  name: "JoyRadio",
  slot: "Action",
  overridesResolver: (props, styles2) => styles2.action
})(({
  theme,
  ownerState
}) => {
  var _theme$variants7, _theme$variants8, _theme$variants9, _theme$variants10;
  return [{
    position: "absolute",
    textAlign: "left",
    // prevent text-align inheritance
    borderRadius: `var(--Radio-actionRadius, ${// Automatic radius adjustment when composing with ListItem or Sheet
    ownerState.overlay ? "var(--unstable_actionRadius, inherit)" : "inherit"})`,
    top: "calc(-1 * var(--variant-borderWidth, 0px))",
    // clickable on the border and focus outline does not move when checked/unchecked
    left: "calc(-1 * var(--variant-borderWidth, 0px))",
    bottom: "calc(-1 * var(--variant-borderWidth, 0px))",
    right: "calc(-1 * var(--variant-borderWidth, 0px))",
    zIndex: 1,
    // The action element usually cover the area of nearest positioned parent
    [theme.focus.selector]: theme.focus.default
  }, ...ownerState.disableIcon ? [(_theme$variants7 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants7[ownerState.color], {
    "&:hover": {
      "@media (hover: hover)": (_theme$variants8 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants8[ownerState.color]
    }
  }, {
    "&:active": (_theme$variants9 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants9[ownerState.color]
  }, {
    [`&.${radioClasses_default.disabled}`]: (_theme$variants10 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants10[ownerState.color]
  }] : []];
});
var RadioInput = styled_default("input", {
  name: "JoyRadio",
  slot: "Input",
  overridesResolver: (props, styles2) => styles2.input
})(() => ({
  margin: 0,
  opacity: 0,
  position: "absolute",
  height: "100%",
  width: "100%",
  cursor: "pointer"
}));
var RadioLabel = styled_default("label", {
  name: "JoyRadio",
  slot: "Label",
  overridesResolver: (props, styles2) => styles2.label
})(({
  ownerState
}) => _extends({
  flex: 1,
  minWidth: 0
}, ownerState.disableIcon && {
  zIndex: 1,
  // label should stay on top of the action.
  pointerEvents: "none"
  // makes hover ineffect.
}));
var RadioIcon = styled_default("span", {
  name: "JoyRadio",
  slot: "Icon",
  overridesResolver: (props, styles2) => styles2.icon
})(({
  ownerState
}) => ({
  width: "calc(var(--Radio-size) / 2)",
  height: "calc(var(--Radio-size) / 2)",
  borderRadius: "inherit",
  color: "inherit",
  backgroundColor: "currentColor",
  transform: ownerState.checked ? "scale(1)" : "scale(0)"
}));
var Radio = React173.forwardRef(function Radio2(inProps, ref) {
  var _ref, _ref2, _inProps$color, _ref3, _ref4, _inProps$color2, _inProps$color3;
  const props = useThemeProps2({
    props: inProps,
    name: "JoyRadio"
  });
  const {
    checked: checkedProp,
    checkedIcon,
    defaultChecked,
    disabled: disabledProp,
    disableIcon: disableIconProp = false,
    overlay: overlayProp = false,
    label,
    id: idOverride,
    name: nameProp,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible,
    readOnly,
    required,
    color: colorProp,
    variant = "outlined",
    size: sizeProp = "md",
    uncheckedIcon,
    value,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded87);
  const formControl = React173.useContext(FormControlContext_default);
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React173.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const id = useId(idOverride != null ? idOverride : formControl == null ? void 0 : formControl.htmlFor);
  const radioGroup = React173.useContext(RadioGroupContext_default);
  const activeColor = formControl != null && formControl.error ? "danger" : (_ref = (_ref2 = (_inProps$color = inProps.color) != null ? _inProps$color : formControl == null ? void 0 : formControl.color) != null ? _ref2 : colorProp) != null ? _ref : "primary";
  const inactiveColor = formControl != null && formControl.error ? "danger" : (_ref3 = (_ref4 = (_inProps$color2 = inProps.color) != null ? _inProps$color2 : formControl == null ? void 0 : formControl.color) != null ? _ref4 : colorProp) != null ? _ref3 : "neutral";
  const size3 = inProps.size || (formControl == null ? void 0 : formControl.size) || (radioGroup == null ? void 0 : radioGroup.size) || sizeProp;
  const name = inProps.name || (radioGroup == null ? void 0 : radioGroup.name) || nameProp;
  const disableIcon = inProps.disableIcon || (radioGroup == null ? void 0 : radioGroup.disableIcon) || disableIconProp;
  const overlay = inProps.overlay || (radioGroup == null ? void 0 : radioGroup.overlay) || overlayProp;
  const radioChecked = typeof checkedProp === "undefined" && value != null ? areEqualValues(radioGroup == null ? void 0 : radioGroup.value, value) : checkedProp;
  const useRadioProps = {
    checked: radioChecked,
    defaultChecked,
    disabled: inProps.disabled || (formControl == null ? void 0 : formControl.disabled) || disabledProp,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible
  };
  const {
    getInputProps,
    checked,
    disabled,
    focusVisible
  } = useSwitch(useRadioProps);
  const color = (_inProps$color3 = inProps.color) != null ? _inProps$color3 : checked ? activeColor : inactiveColor;
  const ownerState = _extends({}, props, {
    checked,
    disabled,
    focusVisible,
    color,
    variant,
    size: size3,
    disableIcon,
    overlay,
    orientation: radioGroup == null ? void 0 : radioGroup.orientation
  });
  const classes = useUtilityClasses77(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: RadioRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotRadio, radioProps] = useSlot("radio", {
    className: classes.radio,
    elementType: RadioRadio,
    externalForwardedProps,
    ownerState
  });
  const [SlotIcon, iconProps] = useSlot("icon", {
    className: classes.icon,
    elementType: RadioIcon,
    externalForwardedProps,
    ownerState
  });
  const [SlotAction, actionProps] = useSlot("action", {
    className: classes.action,
    elementType: RadioAction,
    externalForwardedProps,
    ownerState
  });
  const [SlotInput, inputProps] = useSlot("input", {
    additionalProps: {
      type: "radio",
      role: void 0,
      id,
      name,
      readOnly,
      required: required != null ? required : formControl == null ? void 0 : formControl.required,
      value: String(value),
      "aria-describedby": formControl == null ? void 0 : formControl["aria-describedby"]
    },
    className: classes.input,
    elementType: RadioInput,
    externalForwardedProps,
    getSlotProps: () => getInputProps({
      onChange: radioGroup == null ? void 0 : radioGroup.onChange
    }),
    ownerState
  });
  const [SlotLabel, labelProps] = useSlot("label", {
    additionalProps: {
      htmlFor: id
    },
    className: classes.label,
    elementType: RadioLabel,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime135.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime135.jsxs)(SlotRadio, _extends({}, radioProps, {
      children: [checked && !disableIcon && checkedIcon, !checked && !disableIcon && uncheckedIcon, !checkedIcon && !uncheckedIcon && !disableIcon && (0, import_jsx_runtime134.jsx)(SlotIcon, _extends({}, iconProps)), (0, import_jsx_runtime134.jsx)(SlotAction, _extends({}, actionProps, {
        children: (0, import_jsx_runtime134.jsx)(SlotInput, _extends({}, inputProps))
      }))]
    })), label && (0, import_jsx_runtime134.jsx)(SlotLabel, _extends({}, labelProps, {
      children: (0, import_jsx_runtime134.jsx)(TypographyNestedContext.Provider, {
        value: true,
        children: label
      })
    }))]
  }));
});
true ? Radio.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the component is checked.
   */
  checked: import_prop_types91.default.bool,
  /**
   * The icon to display when the component is checked.
   */
  checkedIcon: import_prop_types91.default.node,
  /**
   * @ignore
   */
  children: import_prop_types91.default.node,
  /**
   * Class name applied to the root element.
   */
  className: import_prop_types91.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types91.default.oneOfType([import_prop_types91.default.oneOf(["danger", "primary", "success", "warning"]), import_prop_types91.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types91.default.elementType,
  /**
   * The default checked state. Use when the component is not controlled.
   */
  defaultChecked: import_prop_types91.default.bool,
  /**
   * If `true`, the component is disabled.
   */
  disabled: import_prop_types91.default.bool,
  /**
   * If `true`, the checked icon is removed and the selected variant is applied on the `action` element instead.
   * @default false
   */
  disableIcon: import_prop_types91.default.bool,
  /**
   * @ignore
   */
  id: import_prop_types91.default.string,
  /**
   * The label element at the end the radio.
   */
  label: import_prop_types91.default.node,
  /**
   * The `name` attribute of the input.
   */
  name: import_prop_types91.default.string,
  /**
   * @ignore
   */
  onBlur: import_prop_types91.default.func,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: import_prop_types91.default.func,
  /**
   * @ignore
   */
  onFocus: import_prop_types91.default.func,
  /**
   * @ignore
   */
  onFocusVisible: import_prop_types91.default.func,
  /**
   * If `true`, the root element's position is set to initial which allows the action area to fill the nearest positioned parent.
   * This prop is useful for composing Radio with ListItem component.
   * @default false
   */
  overlay: import_prop_types91.default.bool,
  /**
   * If `true`, the component is read only.
   */
  readOnly: import_prop_types91.default.bool,
  /**
   * If `true`, the `input` element is required.
   */
  required: import_prop_types91.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types91.default.oneOfType([import_prop_types91.default.oneOf(["sm", "md", "lg"]), import_prop_types91.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types91.default.shape({
    action: import_prop_types91.default.oneOfType([import_prop_types91.default.func, import_prop_types91.default.object]),
    icon: import_prop_types91.default.oneOfType([import_prop_types91.default.func, import_prop_types91.default.object]),
    input: import_prop_types91.default.oneOfType([import_prop_types91.default.func, import_prop_types91.default.object]),
    label: import_prop_types91.default.oneOfType([import_prop_types91.default.func, import_prop_types91.default.object]),
    radio: import_prop_types91.default.oneOfType([import_prop_types91.default.func, import_prop_types91.default.object]),
    root: import_prop_types91.default.oneOfType([import_prop_types91.default.func, import_prop_types91.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types91.default.shape({
    action: import_prop_types91.default.elementType,
    icon: import_prop_types91.default.elementType,
    input: import_prop_types91.default.elementType,
    label: import_prop_types91.default.elementType,
    radio: import_prop_types91.default.elementType,
    root: import_prop_types91.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types91.default.oneOfType([import_prop_types91.default.arrayOf(import_prop_types91.default.oneOfType([import_prop_types91.default.func, import_prop_types91.default.object, import_prop_types91.default.bool])), import_prop_types91.default.func, import_prop_types91.default.object]),
  /**
   * The icon to display when the component is not checked.
   */
  uncheckedIcon: import_prop_types91.default.node,
  /**
   * The value of the component. The DOM API casts this to a string.
   */
  value: import_prop_types91.default.any,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types91.default.oneOfType([import_prop_types91.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types91.default.string])
} : void 0;
var Radio_default = Radio;

// node_modules/@mui/joy/RadioGroup/RadioGroup.js
var React174 = __toESM(require_react());
var import_prop_types92 = __toESM(require_prop_types());

// node_modules/@mui/joy/RadioGroup/radioGroupClasses.js
function getRadioGroupUtilityClass(slot) {
  return generateUtilityClass2("MuiRadioGroup", slot);
}
var radioGroupClasses = generateUtilityClasses2("MuiRadioGroup", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "horizontal", "vertical"]);
var radioGroupClasses_default = radioGroupClasses;

// node_modules/@mui/joy/RadioGroup/RadioGroup.js
var import_jsx_runtime136 = __toESM(require_jsx_runtime());
var _excluded88 = ["className", "component", "children", "name", "defaultValue", "disableIcon", "overlay", "value", "onChange", "color", "variant", "size", "orientation", "role", "slots", "slotProps"];
var useUtilityClasses78 = (ownerState) => {
  const {
    orientation,
    size: size3,
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`]
  };
  return composeClasses2(slots, getRadioGroupUtilityClass, {});
};
var RadioGroupRoot = styled_default("div", {
  name: "JoyRadioGroup",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants;
  return _extends({}, ownerState.size === "sm" && {
    "--RadioGroup-gap": "0.625rem"
  }, ownerState.size === "md" && {
    "--RadioGroup-gap": "0.875rem"
  }, ownerState.size === "lg" && {
    "--RadioGroup-gap": "1.25rem"
  }, {
    display: "flex",
    margin: "var(--unstable_RadioGroup-margin)",
    flexDirection: ownerState.orientation === "horizontal" ? "row" : "column",
    borderRadius: theme.vars.radius.sm
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
var RadioGroup = React174.forwardRef(function RadioGroup2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyRadioGroup"
  });
  const {
    className,
    component,
    children,
    name: nameProp,
    defaultValue,
    disableIcon = false,
    overlay,
    value: valueProp,
    onChange,
    color = "neutral",
    variant = "plain",
    size: sizeProp = "md",
    orientation = "vertical",
    role = "radiogroup",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded88);
  const [value, setValueState] = useControlled({
    controlled: valueProp,
    default: defaultValue,
    name: "RadioGroup"
  });
  const formControl = React174.useContext(FormControlContext_default);
  const size3 = inProps.size || (formControl == null ? void 0 : formControl.size) || sizeProp;
  const ownerState = _extends({
    orientation,
    size: size3,
    variant,
    color,
    role
  }, props);
  const classes = useUtilityClasses78(ownerState);
  const name = useId(nameProp);
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React174.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const contextValue = React174.useMemo(() => ({
    disableIcon,
    overlay,
    orientation,
    size: size3,
    name,
    value,
    onChange: (event) => {
      setValueState(event.target.value);
      if (onChange) {
        onChange(event);
      }
    }
  }), [disableIcon, name, onChange, overlay, orientation, setValueState, size3, value]);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: RadioGroupRoot,
    externalForwardedProps: _extends({}, other, {
      component,
      slots,
      slotProps
    }),
    ownerState,
    additionalProps: {
      as: component,
      role,
      // The `id` is just for the completeness, it does not have any effect because RadioGroup (div) is non-labelable element
      // MDN: "If it is not a labelable element, then the for attribute has no effect"
      // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label#attr-for
      id: formControl == null ? void 0 : formControl.htmlFor,
      "aria-labelledby": formControl == null ? void 0 : formControl.labelId,
      "aria-describedby": formControl == null ? void 0 : formControl["aria-describedby"]
    }
  });
  return (0, import_jsx_runtime136.jsx)(RadioGroupContext_default.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime136.jsx)(SlotRoot, _extends({}, rootProps, {
      children: (0, import_jsx_runtime136.jsx)(FormControlContext_default.Provider, {
        value: void 0,
        children: React174.Children.map(children, (child, index2) => React174.isValidElement(child) ? React174.cloneElement(child, _extends({}, index2 === 0 && {
          "data-first-child": ""
        }, index2 === React174.Children.count(children) - 1 && {
          "data-last-child": ""
        }, {
          "data-parent": "RadioGroup"
        })) : child)
      })
    }))
  });
});
true ? RadioGroup.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types92.default.node,
  /**
   * Class name applied to the root element.
   */
  className: import_prop_types92.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types92.default.oneOfType([import_prop_types92.default.oneOf(["danger", "primary", "success", "warning"]), import_prop_types92.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types92.default.elementType,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: import_prop_types92.default.any,
  /**
   * The radio's `disabledIcon` prop. If specified, the value is passed down to every radios under this element.
   * @default false
   */
  disableIcon: import_prop_types92.default.bool,
  /**
   * The name used to reference the value of the control.
   * If you don't provide this prop, it falls back to a randomly generated name.
   */
  name: import_prop_types92.default.string,
  /**
   * Callback fired when a radio button is selected.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: import_prop_types92.default.func,
  /**
   * The component orientation.
   * @default 'vertical'
   */
  orientation: import_prop_types92.default.oneOf(["horizontal", "vertical"]),
  /**
   * The radio's `overlay` prop. If specified, the value is passed down to every radios under this element.
   * @default false
   */
  overlay: import_prop_types92.default.bool,
  /**
   * @ignore
   */
  role: import_prop_types92.default.string,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types92.default.oneOfType([import_prop_types92.default.oneOf(["sm", "md", "lg"]), import_prop_types92.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types92.default.shape({
    root: import_prop_types92.default.oneOfType([import_prop_types92.default.func, import_prop_types92.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types92.default.shape({
    root: import_prop_types92.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types92.default.oneOfType([import_prop_types92.default.arrayOf(import_prop_types92.default.oneOfType([import_prop_types92.default.func, import_prop_types92.default.object, import_prop_types92.default.bool])), import_prop_types92.default.func, import_prop_types92.default.object]),
  /**
   * Value of the selected radio button. The DOM API casts this to a string.
   */
  value: import_prop_types92.default.any,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types92.default.oneOfType([import_prop_types92.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types92.default.string])
} : void 0;
var RadioGroup_default = RadioGroup;

// node_modules/@mui/joy/ScopedCssBaseline/ScopedCssBaseline.js
var React175 = __toESM(require_react());
var import_prop_types93 = __toESM(require_prop_types());

// node_modules/@mui/joy/ScopedCssBaseline/scopedCssBaselineClasses.js
function getScopedCssBaselineUtilityClass(slot) {
  return generateUtilityClass2("MuiScopedCssBaseline", slot);
}
var scopedCssBaselineClasses = generateUtilityClasses2("MuiScopedCssBaseline", ["root"]);
var scopedCssBaselineClasses_default = scopedCssBaselineClasses;

// node_modules/@mui/joy/ScopedCssBaseline/ScopedCssBaseline.js
var import_jsx_runtime137 = __toESM(require_jsx_runtime());
var _excluded89 = ["className", "component", "disableColorScheme", "slots", "slotProps"];
var useUtilityClasses79 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses2(slots, getScopedCssBaselineUtilityClass, {});
};
var ScopedCssBaselineRoot = styled_default("div", {
  name: "JoyScopedCssBaseline",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  const colorSchemeStyles = {};
  if (!ownerState.disableColorScheme && theme.colorSchemes) {
    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {
      var _scheme$palette;
      colorSchemeStyles[`&${theme.getColorSchemeSelector(key).replace(/\s*&/, "")}`] = {
        colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode
      };
    });
  }
  return _extends({
    WebkitFontSmoothing: "antialiased",
    MozOsxFontSmoothing: "grayscale",
    // Change from `box-sizing: content-box` so that `width`
    // is not affected by `padding` or `border`.
    boxSizing: "border-box",
    // Fix font resize problem in iOS
    WebkitTextSizeAdjust: "100%",
    color: theme.vars.palette.text.primary
  }, theme.typography["body-md"], {
    backgroundColor: theme.vars.palette.background.body,
    "@media print": {
      // Save printer ink.
      backgroundColor: "#fff"
    },
    "& *, & *::before, & *::after": {
      boxSizing: "inherit"
    },
    "& strong, & b": {
      fontWeight: "bold"
    }
  }, colorSchemeStyles);
});
var ScopedCssBaseline = React175.forwardRef(function ScopedCssBaseline2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyScopedCssBaseline"
  });
  const {
    className,
    component = "div",
    disableColorScheme = false,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded89);
  const ownerState = _extends({}, props, {
    component,
    disableColorScheme
  });
  const classes = useUtilityClasses79();
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: ScopedCssBaselineRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime137.jsx)(SlotRoot, _extends({}, rootProps));
});
true ? ScopedCssBaseline.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * You can wrap a node.
   */
  children: import_prop_types93.default.node,
  /**
   * @ignore
   */
  className: import_prop_types93.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types93.default.elementType,
  /**
   * Disable `color-scheme` CSS property.
   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
   * For browser support, check out https://caniuse.com/?search=color-scheme
   * @default false
   */
  disableColorScheme: import_prop_types93.default.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types93.default.shape({
    root: import_prop_types93.default.oneOfType([import_prop_types93.default.func, import_prop_types93.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types93.default.shape({
    root: import_prop_types93.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types93.default.oneOfType([import_prop_types93.default.arrayOf(import_prop_types93.default.oneOfType([import_prop_types93.default.func, import_prop_types93.default.object, import_prop_types93.default.bool])), import_prop_types93.default.func, import_prop_types93.default.object])
} : void 0;
var ScopedCssBaseline_default = ScopedCssBaseline;

// node_modules/@mui/joy/Select/Select.js
var React177 = __toESM(require_react());
var import_prop_types94 = __toESM(require_prop_types());

// node_modules/@mui/joy/internal/svg-icons/Unfold.js
var React176 = __toESM(require_react());
var import_jsx_runtime138 = __toESM(require_jsx_runtime());
var Unfold_default = createSvgIcon((0, import_jsx_runtime138.jsx)("path", {
  d: "m12 5.83 2.46 2.46c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L12.7 3.7a.9959.9959 0 0 0-1.41 0L8.12 6.88c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0L12 5.83zm0 12.34-2.46-2.46a.9959.9959 0 0 0-1.41 0c-.39.39-.39 1.02 0 1.41l3.17 3.18c.39.39 1.02.39 1.41 0l3.17-3.17c.39-.39.39-1.02 0-1.41a.9959.9959 0 0 0-1.41 0L12 18.17z"
}), "Unfold");

// node_modules/@mui/joy/Select/selectClasses.js
function getSelectUtilityClass2(slot) {
  return generateUtilityClass2("MuiSelect", slot);
}
var selectClasses2 = generateUtilityClasses2("MuiSelect", ["root", "button", "indicator", "startDecorator", "endDecorator", "popper", "listbox", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "focusVisible", "disabled", "expanded", "multiple"]);
var selectClasses_default = selectClasses2;

// node_modules/@mui/joy/Select/Select.js
var import_jsx_runtime139 = __toESM(require_jsx_runtime());
var import_jsx_runtime140 = __toESM(require_jsx_runtime());
var _Unfold;
var _excluded90 = ["action", "autoFocus", "children", "defaultValue", "defaultListboxOpen", "disabled", "getSerializedValue", "placeholder", "listboxId", "listboxOpen", "onChange", "onListboxOpenChange", "onClose", "renderValue", "required", "value", "size", "variant", "color", "startDecorator", "endDecorator", "indicator", "aria-describedby", "aria-label", "aria-labelledby", "id", "name", "multiple", "slots", "slotProps"];
function defaultRenderValue2(selectedOptions) {
  var _selectedOptions$labe;
  if (Array.isArray(selectedOptions)) {
    return (0, import_jsx_runtime139.jsx)(React177.Fragment, {
      children: selectedOptions.map((o) => o.label).join(", ")
    });
  }
  return (_selectedOptions$labe = selectedOptions == null ? void 0 : selectedOptions.label) != null ? _selectedOptions$labe : "";
}
var defaultModifiers = [{
  name: "offset",
  options: {
    offset: [0, 4]
  }
}, {
  // popper will have the same width as root element when open
  name: "equalWidth",
  enabled: true,
  phase: "beforeWrite",
  requires: ["computeStyles"],
  fn: ({
    state
  }) => {
    state.styles.popper.width = `${state.rects.reference.width}px`;
  }
}];
var useUtilityClasses80 = (ownerState) => {
  const {
    color,
    disabled,
    focusVisible,
    size: size3,
    variant,
    open,
    multiple
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", open && "expanded", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`, multiple && "multiple"],
    button: ["button"],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"],
    indicator: ["indicator", open && "expanded"],
    listbox: ["listbox", open && "expanded", disabled && "disabled"]
  };
  return composeClasses2(slots, getSelectUtilityClass2, {});
};
var SelectRoot = styled_default("div", {
  name: "JoySelect",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$vars$palette, _theme$vars$palette2, _theme$variants2, _theme$variants3;
  const variantStyle = (_theme$variants = theme.variants[`${ownerState.variant}`]) == null ? void 0 : _theme$variants[ownerState.color];
  const {
    borderRadius
  } = resolveSxValue({
    theme,
    ownerState
  }, ["borderRadius"]);
  return [_extends({
    "--Select-radius": theme.vars.radius.sm,
    "--Select-gap": "0.5rem",
    "--Select-placeholderOpacity": 0.64,
    "--Select-decoratorColor": theme.vars.palette.text.icon,
    "--Select-focusedThickness": theme.vars.focus.thickness,
    "--Select-focusedHighlight": (_theme$vars$palette = theme.vars.palette[ownerState.color === "neutral" ? "primary" : ownerState.color]) == null ? void 0 : _theme$vars$palette[500],
    '&:not([data-inverted-colors="false"])': _extends({}, ownerState.instanceColor && {
      "--_Select-focusedHighlight": (_theme$vars$palette2 = theme.vars.palette[ownerState.instanceColor === "neutral" ? "primary" : ownerState.instanceColor]) == null ? void 0 : _theme$vars$palette2[500]
    }, {
      "--Select-focusedHighlight": theme.vars.palette.focusVisible
    }),
    "--Select-indicatorColor": variantStyle != null && variantStyle.backgroundColor ? variantStyle == null ? void 0 : variantStyle.color : theme.vars.palette.text.tertiary
  }, ownerState.size === "sm" && {
    "--Select-minHeight": "2rem",
    "--Select-paddingInline": "0.5rem",
    "--Select-decoratorChildHeight": "min(1.5rem, var(--Select-minHeight))",
    "--Icon-fontSize": theme.vars.fontSize.xl
  }, ownerState.size === "md" && {
    "--Select-minHeight": "2.25rem",
    "--Select-paddingInline": "0.75rem",
    "--Select-decoratorChildHeight": "min(1.75rem, var(--Select-minHeight))",
    "--Icon-fontSize": theme.vars.fontSize.xl2
  }, ownerState.size === "lg" && {
    "--Select-minHeight": "2.75rem",
    "--Select-paddingInline": "1rem",
    "--Select-decoratorChildHeight": "min(2.375rem, var(--Select-minHeight))",
    "--Icon-fontSize": theme.vars.fontSize.xl2
  }, {
    // variables for controlling child components
    "--Select-decoratorChildOffset": "min(calc(var(--Select-paddingInline) - (var(--Select-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Select-decoratorChildHeight)) / 2), var(--Select-paddingInline))",
    "--_Select-paddingBlock": "max((var(--Select-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Select-decoratorChildHeight)) / 2, 0px)",
    "--Select-decoratorChildRadius": "max(var(--Select-radius) - var(--variant-borderWidth, 0px) - var(--_Select-paddingBlock), min(var(--_Select-paddingBlock) + var(--variant-borderWidth, 0px), var(--Select-radius) / 2))",
    "--Button-minHeight": "var(--Select-decoratorChildHeight)",
    "--Button-paddingBlock": "0px",
    // to ensure that the height of the button is equal to --Button-minHeight
    "--IconButton-size": "var(--Select-decoratorChildHeight)",
    "--Button-radius": "var(--Select-decoratorChildRadius)",
    "--IconButton-radius": "var(--Select-decoratorChildRadius)",
    boxSizing: "border-box"
  }, ownerState.variant !== "plain" && {
    boxShadow: theme.shadow.xs
  }, {
    minWidth: 0,
    minHeight: "var(--Select-minHeight)",
    position: "relative",
    display: "flex",
    alignItems: "center",
    borderRadius: "var(--Select-radius)",
    cursor: "pointer"
  }, !(variantStyle != null && variantStyle.backgroundColor) && {
    backgroundColor: theme.vars.palette.background.surface
  }, ownerState.size && {
    paddingBlock: {
      sm: 2,
      md: 3,
      lg: 4
    }[ownerState.size]
    // the padding-block act as a minimum spacing between content and root element
  }, {
    paddingInline: `var(--Select-paddingInline)`
  }, theme.typography[`body-${ownerState.size}`], variantStyle, {
    "&::before": {
      boxSizing: "border-box",
      content: '""',
      display: "block",
      position: "absolute",
      pointerEvents: "none",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      zIndex: 1,
      borderRadius: "inherit",
      margin: "calc(var(--variant-borderWidth, 0px) * -1)"
      // for outlined variant
    },
    [`&.${selectClasses_default.focusVisible}`]: {
      "--Select-indicatorColor": variantStyle == null ? void 0 : variantStyle.color,
      "&::before": {
        boxShadow: `inset 0 0 0 var(--Select-focusedThickness) var(--Select-focusedHighlight)`
      }
    },
    [`&.${selectClasses_default.disabled}`]: {
      "--Select-indicatorColor": "inherit"
    }
  }), {
    "&:hover": (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants2[ownerState.color],
    [`&.${selectClasses_default.disabled}`]: (_theme$variants3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants3[ownerState.color]
  }, borderRadius !== void 0 && {
    "--Select-radius": borderRadius
  }];
});
var SelectButton = styled_default("button", {
  name: "JoySelect",
  slot: "Button",
  overridesResolver: (props, styles2) => styles2.button
})(({
  ownerState
}) => _extends({
  // reset user-agent button style
  border: 0,
  outline: 0,
  background: "none",
  padding: 0,
  fontSize: "inherit",
  color: "inherit",
  alignSelf: "stretch",
  // make children horizontally aligned
  display: "flex",
  alignItems: "center",
  flex: 1,
  fontFamily: "inherit",
  cursor: "pointer",
  whiteSpace: "nowrap",
  overflow: "hidden"
}, (ownerState.value === null || ownerState.value === void 0) && {
  opacity: "var(--Select-placeholderOpacity)"
}, {
  "&::before": {
    content: '""',
    display: "block",
    position: "absolute",
    // TODO: use https://caniuse.com/?search=inset when ~94%
    top: "calc(-1 * var(--variant-borderWidth, 0px))",
    left: "calc(-1 * var(--variant-borderWidth, 0px))",
    right: "calc(-1 * var(--variant-borderWidth, 0px))",
    bottom: "calc(-1 * var(--variant-borderWidth, 0px))",
    borderRadius: "var(--Select-radius)"
  }
}));
var SelectListbox = styled_default(StyledList, {
  name: "JoySelect",
  slot: "Listbox",
  overridesResolver: (props, styles2) => styles2.listbox
})(({
  theme,
  ownerState
}) => {
  var _theme$variants4;
  const variantStyle = (_theme$variants4 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants4[ownerState.color];
  return _extends({
    "--focus-outline-offset": `calc(${theme.vars.focus.thickness} * -1)`,
    // to prevent the focus outline from being cut by overflow
    "--ListItem-stickyBackground": (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.popup,
    "--ListItem-stickyTop": "calc(var(--List-padding, var(--ListDivider-gap)) * -1)"
  }, scopedVariables, {
    minWidth: "max-content",
    // prevent options from shrinking if some of them is wider than the Select's root.
    maxHeight: "44vh",
    // the best value from what I tried so far which does not cause screen flicker when listbox is open.
    overflow: "auto",
    outline: 0,
    boxShadow: theme.shadow.md,
    borderRadius: `var(--List-radius, ${theme.vars.radius.sm})`,
    // `unstable_popup-zIndex` is a private variable that lets other component, for example Modal, to override the z-index so that the listbox can be displayed above the Modal.
    zIndex: `var(--unstable_popup-zIndex, ${theme.vars.zIndex.popup})`
  }, !(variantStyle != null && variantStyle.backgroundColor) && {
    backgroundColor: theme.vars.palette.background.popup
  });
});
var SelectStartDecorator = styled_default("span", {
  name: "JoySelect",
  slot: "StartDecorator",
  overridesResolver: (props, styles2) => styles2.startDecorator
})({
  "--Button-margin": "0 0 0 calc(var(--Select-decoratorChildOffset) * -1)",
  "--IconButton-margin": "0 0 0 calc(var(--Select-decoratorChildOffset) * -1)",
  "--Icon-margin": "0 0 0 calc(var(--Select-paddingInline) / -4)",
  display: "inherit",
  alignItems: "center",
  color: "var(--Select-decoratorColor)",
  marginInlineEnd: "var(--Select-gap)"
});
var SelectEndDecorator = styled_default("span", {
  name: "JoySelect",
  slot: "EndDecorator",
  overridesResolver: (props, styles2) => styles2.endDecorator
})({
  "--Button-margin": "0 calc(var(--Select-decoratorChildOffset) * -1) 0 0",
  "--IconButton-margin": "0 calc(var(--Select-decoratorChildOffset) * -1) 0 0",
  "--Icon-margin": "0 calc(var(--Select-paddingInline) / -4) 0 0",
  display: "inherit",
  alignItems: "center",
  color: "var(--Select-decoratorColor)",
  marginInlineStart: "var(--Select-gap)"
});
var SelectIndicator = styled_default("span", {
  name: "JoySelect",
  slot: "Indicator"
})(({
  ownerState,
  theme
}) => _extends({}, ownerState.size === "sm" && {
  "--Icon-fontSize": theme.vars.fontSize.lg
}, ownerState.size === "md" && {
  "--Icon-fontSize": theme.vars.fontSize.xl
}, ownerState.size === "lg" && {
  "--Icon-fontSize": theme.vars.fontSize.xl2
}, {
  "--Icon-color": ownerState.color !== "neutral" || ownerState.variant === "solid" ? "currentColor" : theme.vars.palette.text.icon,
  display: "inherit",
  alignItems: "center",
  marginInlineStart: "var(--Select-gap)",
  marginInlineEnd: "calc(var(--Select-paddingInline) / -4)",
  [`.${selectClasses_default.endDecorator} + &`]: {
    marginInlineStart: "calc(var(--Select-gap) / 2)"
  },
  [`&.${selectClasses_default.expanded}, .${selectClasses_default.disabled} > &`]: {
    "--Icon-color": "currentColor"
  }
}));
var Select3 = React177.forwardRef(function Select4(inProps, ref) {
  var _ref2, _inProps$disabled, _ref3, _inProps$size, _inProps$color, _formControl$color, _props$slots;
  const props = useThemeProps2({
    props: inProps,
    name: "JoySelect"
  });
  const _ref = props, {
    action,
    autoFocus,
    children,
    defaultValue,
    defaultListboxOpen = false,
    disabled: disabledExternalProp,
    getSerializedValue,
    placeholder,
    listboxId,
    listboxOpen: listboxOpenProp,
    onChange,
    onListboxOpenChange,
    onClose,
    renderValue: renderValueProp,
    required = false,
    value: valueProp,
    size: sizeProp = "md",
    variant = "outlined",
    color: colorProp = "neutral",
    startDecorator,
    endDecorator,
    indicator = _Unfold || (_Unfold = (0, import_jsx_runtime139.jsx)(Unfold_default, {})),
    // props to forward to the button (all handlers should go through slotProps.button)
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    id,
    name,
    multiple = false,
    slots = {},
    slotProps = {}
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded90);
  const formControl = React177.useContext(FormControlContext_default);
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React177.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const disabledProp = (_ref2 = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : formControl == null ? void 0 : formControl.disabled) != null ? _ref2 : disabledExternalProp;
  const size3 = (_ref3 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref3 : sizeProp;
  const color = (_inProps$color = inProps.color) != null ? _inProps$color : formControl != null && formControl.error ? "danger" : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp;
  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderValue2;
  const [anchorEl, setAnchorEl] = React177.useState(null);
  const rootRef = React177.useRef(null);
  const buttonRef = React177.useRef(null);
  const handleRef = useForkRef(ref, rootRef);
  React177.useImperativeHandle(action, () => ({
    focusVisible: () => {
      var _buttonRef$current;
      (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();
    }
  }), []);
  React177.useEffect(() => {
    setAnchorEl(rootRef.current);
  }, []);
  React177.useEffect(() => {
    if (autoFocus) {
      buttonRef.current.focus();
    }
  }, [autoFocus]);
  const handleOpenChange = React177.useCallback((isOpen) => {
    onListboxOpenChange == null || onListboxOpenChange(isOpen);
    if (!isOpen) {
      onClose == null || onClose();
    }
  }, [onClose, onListboxOpenChange]);
  const {
    buttonActive,
    buttonFocusVisible,
    contextValue,
    disabled,
    getButtonProps,
    getListboxProps,
    getHiddenInputProps,
    getOptionMetadata,
    open: listboxOpen,
    value
  } = useSelect({
    buttonRef,
    defaultOpen: defaultListboxOpen,
    defaultValue,
    disabled: disabledProp,
    getSerializedValue,
    listboxId,
    multiple,
    name,
    required,
    onChange,
    onOpenChange: handleOpenChange,
    open: listboxOpenProp,
    value: valueProp
  });
  const ownerState = _extends({}, props, {
    active: buttonActive,
    defaultListboxOpen,
    disabled,
    focusVisible: buttonFocusVisible,
    open: listboxOpen,
    renderValue,
    value,
    size: size3,
    variant,
    color
  });
  const classes = useUtilityClasses80(ownerState);
  const externalForwardedProps = _extends({}, other, {
    slots,
    slotProps
  });
  const selectedOption = React177.useMemo(() => {
    let selectedOptionsMetadata;
    if (multiple) {
      selectedOptionsMetadata = value.map((v) => getOptionMetadata(v)).filter((o) => o !== void 0);
    } else {
      var _getOptionMetadata;
      selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(value)) != null ? _getOptionMetadata : null;
    }
    return selectedOptionsMetadata;
  }, [getOptionMetadata, value, multiple]);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref: handleRef,
    className: classes.root,
    elementType: SelectRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotButton, buttonProps] = useSlot("button", {
    additionalProps: {
      "aria-describedby": ariaDescribedby != null ? ariaDescribedby : formControl == null ? void 0 : formControl["aria-describedby"],
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledby != null ? ariaLabelledby : formControl == null ? void 0 : formControl.labelId,
      "aria-required": required ? "true" : void 0,
      id: id != null ? id : formControl == null ? void 0 : formControl.htmlFor,
      name
    },
    className: classes.button,
    elementType: SelectButton,
    externalForwardedProps,
    getSlotProps: getButtonProps,
    ownerState
  });
  const [SlotListbox, listboxProps] = useSlot("listbox", {
    additionalProps: {
      anchorEl,
      open: listboxOpen,
      placement: "bottom",
      keepMounted: true
    },
    className: classes.listbox,
    elementType: SelectListbox,
    externalForwardedProps,
    getSlotProps: getListboxProps,
    ownerState: _extends({}, ownerState, {
      nesting: false,
      row: false,
      wrap: false
    }),
    getSlotOwnerState: (mergedProps) => ({
      size: mergedProps.size || size3,
      variant: mergedProps.variant || variant,
      color: mergedProps.color || (!mergedProps.disablePortal ? colorProp : color),
      disableColorInversion: !mergedProps.disablePortal
    })
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: SelectStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: SelectEndDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotIndicator, indicatorProps] = useSlot("indicator", {
    className: classes.indicator,
    elementType: SelectIndicator,
    externalForwardedProps,
    ownerState
  });
  const modifiers = React177.useMemo(() => [...defaultModifiers, ...listboxProps.modifiers || []], [listboxProps.modifiers]);
  let displayValue = placeholder;
  if (Array.isArray(selectedOption) && selectedOption.length > 0 || !Array.isArray(selectedOption) && !!selectedOption) {
    displayValue = renderValue(selectedOption);
  }
  return (0, import_jsx_runtime140.jsxs)(React177.Fragment, {
    children: [(0, import_jsx_runtime140.jsxs)(SlotRoot, _extends({}, rootProps, {
      children: [startDecorator && (0, import_jsx_runtime139.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
        children: startDecorator
      })), (0, import_jsx_runtime139.jsx)(SlotButton, _extends({}, buttonProps, {
        children: displayValue
      })), endDecorator && (0, import_jsx_runtime139.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
        children: endDecorator
      })), indicator && (0, import_jsx_runtime139.jsx)(SlotIndicator, _extends({}, indicatorProps, {
        children: indicator
      })), (0, import_jsx_runtime139.jsx)("input", _extends({}, getHiddenInputProps()))]
    })), anchorEl && (0, import_jsx_runtime139.jsx)(SlotListbox, _extends({}, listboxProps, {
      className: clsx_default(listboxProps.className),
      modifiers
    }, !((_props$slots = props.slots) != null && _props$slots.listbox) && {
      as: Popper,
      slots: {
        root: listboxProps.as || "ul"
      }
    }, {
      children: (0, import_jsx_runtime139.jsx)(SelectProvider, {
        value: contextValue,
        children: (0, import_jsx_runtime139.jsx)(VariantColorProvider, {
          variant,
          color: colorProp,
          children: (0, import_jsx_runtime139.jsx)(GroupListContext_default.Provider, {
            value: "select",
            children: (0, import_jsx_runtime139.jsx)(ListProvider_default, {
              nested: true,
              children
            })
          })
        })
      })
    }))]
  });
});
true ? Select3.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */
  action: import_prop_types94.default.oneOfType([import_prop_types94.default.func, import_prop_types94.default.shape({
    current: import_prop_types94.default.shape({
      focusVisible: import_prop_types94.default.func.isRequired
    })
  })]),
  /**
   * If `true`, the select element is focused during the first mount
   * @default false
   */
  autoFocus: import_prop_types94.default.bool,
  /**
   * @ignore
   */
  children: import_prop_types94.default.node,
  /**
   * @ignore
   */
  className: import_prop_types94.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types94.default.oneOfType([import_prop_types94.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types94.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types94.default.elementType,
  /**
   * If `true`, the select will be initially open.
   * @default false
   */
  defaultListboxOpen: import_prop_types94.default.bool,
  /**
   * The default selected value. Use when the component is not controlled.
   */
  defaultValue: import_prop_types94.default.any,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types94.default.bool,
  /**
   * Trailing adornment for the select.
   */
  endDecorator: import_prop_types94.default.node,
  /**
   * A function to convert the currently selected value to a string.
   * Used to set a value of a hidden input associated with the select,
   * so that the selected value can be posted with a form.
   */
  getSerializedValue: import_prop_types94.default.func,
  /**
   * The indicator(*) for the select.
   *    ________________
   *   [ value        * ]
   *    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   */
  indicator: import_prop_types94.default.node,
  /**
   * `id` attribute of the listbox element.
   * Also used to derive the `id` attributes of options.
   */
  listboxId: import_prop_types94.default.string,
  /**
   * Controls the open state of the select's listbox.
   * @default undefined
   */
  listboxOpen: import_prop_types94.default.bool,
  /**
   * If `true`, selecting multiple values is allowed.
   * This affects the type of the `value`, `defaultValue`, and `onChange` props.
   */
  multiple: import_prop_types94.default.bool,
  /**
   * Name of the element. For example used by the server to identify the fields in form submits.
   */
  name: import_prop_types94.default.string,
  /**
   * Callback fired when an option is selected.
   */
  onChange: import_prop_types94.default.func,
  /**
   * Triggered when focus leaves the menu and the menu should close.
   */
  onClose: import_prop_types94.default.func,
  /**
   * Callback fired when the component requests to be opened.
   * Use in controlled mode (see listboxOpen).
   */
  onListboxOpenChange: import_prop_types94.default.func,
  /**
   * Text to show when there is no selected value.
   */
  placeholder: import_prop_types94.default.node,
  /**
   * Function that customizes the rendering of the selected value.
   */
  renderValue: import_prop_types94.default.func,
  /**
   * If `true`, the Select cannot be empty when submitting form.
   * @default false
   */
  required: import_prop_types94.default.bool,
  /**
   * The size of the component.
   */
  size: import_prop_types94.default.oneOfType([import_prop_types94.default.oneOf(["sm", "md", "lg"]), import_prop_types94.default.string]),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types94.default.shape({
    button: import_prop_types94.default.elementType,
    endDecorator: import_prop_types94.default.elementType,
    indicator: import_prop_types94.default.elementType,
    listbox: import_prop_types94.default.elementType,
    root: import_prop_types94.default.elementType,
    startDecorator: import_prop_types94.default.elementType
  }),
  /**
   * Leading adornment for the select.
   */
  startDecorator: import_prop_types94.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types94.default.oneOfType([import_prop_types94.default.arrayOf(import_prop_types94.default.oneOfType([import_prop_types94.default.func, import_prop_types94.default.object, import_prop_types94.default.bool])), import_prop_types94.default.func, import_prop_types94.default.object]),
  /**
   * The selected value.
   * Set to `null` to deselect all options.
   */
  value: import_prop_types94.default.any,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types94.default.oneOfType([import_prop_types94.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types94.default.string])
} : void 0;
var Select_default = Select3;

// node_modules/@mui/joy/Sheet/Sheet.js
var React178 = __toESM(require_react());
var import_prop_types95 = __toESM(require_prop_types());

// node_modules/@mui/joy/Sheet/sheetClasses.js
function getSheetUtilityClass(slot) {
  return generateUtilityClass2("MuiSheet", slot);
}
var sheetClasses = generateUtilityClasses2("MuiSheet", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var sheetClasses_default = sheetClasses;

// node_modules/@mui/joy/Sheet/Sheet.js
var import_jsx_runtime141 = __toESM(require_jsx_runtime());
var _excluded91 = ["className", "color", "component", "variant", "invertedColors", "slots", "slotProps"];
var useUtilityClasses81 = (ownerState) => {
  const {
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses2(slots, getSheetUtilityClass, {});
};
var SheetRoot = styled_default("div", {
  name: "JoySheet",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants2;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  const {
    borderRadius: childRadius,
    bgcolor,
    backgroundColor,
    background
  } = resolveSxValue({
    theme,
    ownerState
  }, ["borderRadius", "bgcolor", "backgroundColor", "background"]);
  const resolvedBg = getPath(theme, `palette.${bgcolor}`) || bgcolor || getPath(theme, `palette.${backgroundColor}`) || backgroundColor || background || (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.surface;
  return [_extends({
    "--Icon-color": ownerState.color !== "neutral" || ownerState.variant === "solid" ? "currentColor" : theme.vars.palette.text.icon,
    "--ListItem-stickyBackground": resolvedBg === "transparent" ? "initial" : resolvedBg,
    // for sticky List
    "--Sheet-background": resolvedBg === "transparent" ? "initial" : resolvedBg
  }, childRadius !== void 0 && {
    "--List-radius": `calc(${childRadius} - var(--variant-borderWidth, 0px))`,
    "--unstable_actionRadius": `calc(${childRadius} - var(--variant-borderWidth, 0px))`
  }, {
    backgroundColor: theme.vars.palette.background.surface,
    position: "relative"
  }), _extends({}, theme.typography["body-md"], ownerState.variant === "solid" && ownerState.color && ownerState.invertedColors && applySolidInversion(ownerState.color)(theme), ownerState.variant === "soft" && ownerState.color && ownerState.invertedColors && applySoftInversion(ownerState.color)(theme), (_theme$variants2 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants2[ownerState.color], variantStyle)];
});
var Sheet = React178.forwardRef(function Sheet2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoySheet"
  });
  const {
    className,
    color = "neutral",
    component = "div",
    variant = "plain",
    invertedColors = false,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded91);
  const ownerState = _extends({}, props, {
    color,
    component,
    invertedColors,
    variant
  });
  const classes = useUtilityClasses81(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: SheetRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime141.jsx)(SlotRoot, _extends({}, rootProps));
});
true ? Sheet.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types95.default.node,
  /**
   * @ignore
   */
  className: import_prop_types95.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types95.default.oneOfType([import_prop_types95.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types95.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types95.default.elementType,
  /**
   * If `true`, the children with an implicit color prop invert their colors to match the component's variant and color.
   * @default false
   */
  invertedColors: import_prop_types95.default.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types95.default.shape({
    root: import_prop_types95.default.oneOfType([import_prop_types95.default.func, import_prop_types95.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types95.default.shape({
    root: import_prop_types95.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types95.default.oneOfType([import_prop_types95.default.arrayOf(import_prop_types95.default.oneOfType([import_prop_types95.default.func, import_prop_types95.default.object, import_prop_types95.default.bool])), import_prop_types95.default.func, import_prop_types95.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types95.default.oneOfType([import_prop_types95.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types95.default.string])
} : void 0;
var Sheet_default = Sheet;

// node_modules/@mui/joy/Skeleton/Skeleton.js
var React179 = __toESM(require_react());
var import_prop_types96 = __toESM(require_prop_types());

// node_modules/@mui/joy/Skeleton/skeletonClasses.js
function getSkeletonUtilityClass(slot) {
  return generateUtilityClass2("MuiSkeleton", slot);
}
var skeletonClasses = generateUtilityClasses2("MuiSkeleton", ["root", "variantOverlay", "variantCircular", "variantRectangular", "variantText", "variantInline", "h1", "h2", "h3", "h4", "title-lg", "title-md", "title-sm", "body-lg", "body-md", "body-sm", "body-xs"]);
var skeletonClasses_default = skeletonClasses;

// node_modules/@mui/joy/Skeleton/Skeleton.js
var import_jsx_runtime142 = __toESM(require_jsx_runtime());
var _excluded92 = ["className", "component", "children", "animation", "overlay", "loading", "variant", "level", "height", "width", "sx", "slots", "slotProps"];
var _3 = (t) => t;
var _t3;
var _t23;
var _t32;
var _t4;
var _t5;
var useUtilityClasses82 = (ownerState) => {
  const {
    variant,
    level
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, level && `level${capitalize(level)}`]
  };
  return composeClasses2(slots, getSkeletonUtilityClass, {});
};
var pulseKeyframe = keyframes(_t3 || (_t3 = _3`
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0.8;
    background: var(--unstable_pulse-bg);
  }

  100% {
    opacity: 1;
  }
`));
var waveKeyframe = keyframes(_t23 || (_t23 = _3`
  0% {
    transform: translateX(-100%);
  }

  50% {
    /* +0.5s of delay between each loop */
    transform: translateX(100%);
  }

  100% {
    transform: translateX(100%);
  }
`));
var SkeletonRoot = styled_default("span", {
  name: "JoySkeleton",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(
  /**
   * Animations
   */
  ({
    ownerState,
    theme
  }) => ownerState.animation === "pulse" && ownerState.variant !== "inline" && css(_t32 || (_t32 = _3`
      &::before {
        animation: ${0} 2s ease-in-out 0.5s infinite;
        background: ${0};
      }
    `), pulseKeyframe, theme.vars.palette.background.level3),
  ({
    ownerState,
    theme
  }) => ownerState.animation === "pulse" && ownerState.variant === "inline" && css(_t4 || (_t4 = _3`
      &::after {
        animation: ${0} 2s ease-in-out 0.5s infinite;
        background: ${0};
      }
    `), pulseKeyframe, theme.vars.palette.background.level3),
  ({
    ownerState,
    theme
  }) => ownerState.animation === "wave" && css(_t5 || (_t5 = _3`
      /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */
      -webkit-mask-image: -webkit-radial-gradient(white, black);
      background: ${0};

      &::after {
        content: ' ';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: var(--unstable_pseudo-zIndex);
        animation: ${0} 1.6s linear 0.5s infinite;
        background: linear-gradient(
          90deg,
          transparent,
          var(--unstable_wave-bg, rgba(0 0 0 / 0.08)),
          transparent
        );
        transform: translateX(-100%); /* Avoid flash during server-side hydration */
      }
    `), theme.vars.palette.background.level3, waveKeyframe),
  /**
   * Implementation notes:
   * 1. The `Skeleton` has 3 parts:
   *  - the root (span) element as a container
   *  - the ::before pseudo-element for covering the content
   *  - the ::after pseudo-element for animation on top of the ::before pseudo-element
   *
   * 2. The root element and ::before will change to absolute position when shape="overlay" to cover the parent's content.
   *
   * 3. For geometry shape (rectangular, circular), the typography styles are applied to the root element so that width, height can be customized based on the font-size.
   */
  ({
    ownerState,
    theme
  }) => {
    var _components, _theme$typography, _theme$typography2, _theme$typography3;
    const defaultLevel = ((_components = theme.components) == null || (_components = _components.JoyTypography) == null || (_components = _components.defaultProps) == null ? void 0 : _components.level) || "body1";
    return [{
      display: "block",
      position: "relative",
      "--unstable_pseudo-zIndex": 9,
      "--unstable_pulse-bg": theme.vars.palette.background.level1,
      overflow: "hidden",
      cursor: "default",
      color: "transparent",
      "& *": {
        visibility: "hidden"
      },
      "&::before": {
        display: "block",
        content: '" "',
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
        zIndex: "var(--unstable_pseudo-zIndex)",
        borderRadius: "inherit"
      },
      [theme.getColorSchemeSelector("dark")]: {
        "--unstable_wave-bg": "rgba(255 255 255 / 0.1)"
      }
    }, ownerState.variant === "rectangular" && _extends({
      borderRadius: "min(0.15em, 6px)",
      height: "auto",
      width: "100%",
      "&::before": {
        position: "absolute"
      }
    }, !ownerState.animation && {
      backgroundColor: theme.vars.palette.background.level3
    }, ownerState.level !== "inherit" && _extends({}, theme.typography[ownerState.level])), ownerState.variant === "circular" && _extends({
      borderRadius: "50%",
      width: "100%",
      height: "100%",
      "&::before": {
        position: "absolute"
      }
    }, !ownerState.animation && {
      backgroundColor: theme.vars.palette.background.level3
    }, ownerState.level !== "inherit" && _extends({}, theme.typography[ownerState.level])), ownerState.variant === "text" && _extends({
      borderRadius: "min(0.15em, 6px)",
      background: "transparent",
      width: "100%"
    }, ownerState.level !== "inherit" && _extends({}, theme.typography[ownerState.level || defaultLevel], {
      paddingBlockStart: `calc((${((_theme$typography = theme.typography[ownerState.level || defaultLevel]) == null ? void 0 : _theme$typography.lineHeight) || 1} - 1) * 0.56em)`,
      paddingBlockEnd: `calc((${((_theme$typography2 = theme.typography[ownerState.level || defaultLevel]) == null ? void 0 : _theme$typography2.lineHeight) || 1} - 1) * 0.44em)`,
      "&::before": _extends({
        height: "1em"
      }, theme.typography[ownerState.level || defaultLevel], ownerState.animation === "wave" && {
        backgroundColor: theme.vars.palette.background.level3
      }, !ownerState.animation && {
        backgroundColor: theme.vars.palette.background.level3
      }),
      "&::after": _extends({
        height: "1em",
        top: `calc((${((_theme$typography3 = theme.typography[ownerState.level || defaultLevel]) == null ? void 0 : _theme$typography3.lineHeight) || 1} - 1) * 0.56em)`
      }, theme.typography[ownerState.level || defaultLevel])
    })), ownerState.variant === "inline" && _extends({
      display: "inline",
      position: "initial",
      borderRadius: "min(0.15em, 6px)"
    }, !ownerState.animation && {
      backgroundColor: theme.vars.palette.background.level3
    }, ownerState.level !== "inherit" && _extends({}, theme.typography[ownerState.level]), {
      WebkitMaskImage: "-webkit-radial-gradient(white, black)",
      "&::before": {
        position: "absolute",
        zIndex: "var(--unstable_pseudo-zIndex)",
        backgroundColor: theme.vars.palette.background.level3
      }
    }, ownerState.animation === "pulse" && {
      "&::after": {
        content: '""',
        position: "absolute",
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        zIndex: "var(--unstable_pseudo-zIndex)",
        backgroundColor: theme.vars.palette.background.level3
      }
    }), ownerState.variant === "overlay" && _extends({
      borderRadius: theme.vars.radius.xs,
      position: "absolute",
      width: "100%",
      height: "100%",
      zIndex: "var(--unstable_pseudo-zIndex)"
    }, ownerState.animation === "pulse" && {
      backgroundColor: theme.vars.palette.background.surface
    }, ownerState.level !== "inherit" && _extends({}, theme.typography[ownerState.level]), {
      "&::before": {
        position: "absolute"
      }
    })];
  }
);
var Skeleton = React179.forwardRef(function Skeleton2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoySkeleton"
  });
  const {
    className,
    component = "span",
    children,
    animation = "pulse",
    overlay = false,
    loading = true,
    variant = "overlay",
    level = variant === "text" ? "body-md" : "inherit",
    height,
    width,
    sx,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded92);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps,
    sx: [{
      width,
      height
    }, ...Array.isArray(sx) ? sx : [sx]]
  });
  const ownerState = _extends({}, props, {
    animation,
    component,
    level,
    loading,
    overlay,
    variant,
    width,
    height
  });
  const classes = useUtilityClasses82(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: SkeletonRoot,
    externalForwardedProps,
    ownerState
  });
  return loading ? (0, import_jsx_runtime142.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  })) : (0, import_jsx_runtime142.jsx)(React179.Fragment, {
    children: React179.Children.map(children, (child, index2) => index2 === 0 && React179.isValidElement(child) ? React179.cloneElement(child, {
      "data-first-child": ""
    }) : child)
  });
});
true ? Skeleton.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The animation.
   * If `false` the animation effect is disabled.
   * @default 'pulse'
   */
  animation: import_prop_types96.default.oneOf(["pulse", "wave", false]),
  /**
   * Used to render icon or text elements inside the Skeleton if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types96.default.node,
  /**
   * @ignore
   */
  className: import_prop_types96.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types96.default.elementType,
  /**
   * Height of the skeleton.
   * Useful when you don't want to adapt the skeleton to a text element but for instance a card.
   */
  height: import_prop_types96.default.oneOfType([import_prop_types96.default.arrayOf(import_prop_types96.default.oneOfType([import_prop_types96.default.number, import_prop_types96.default.string])), import_prop_types96.default.number, import_prop_types96.default.shape({
    lg: import_prop_types96.default.oneOfType([import_prop_types96.default.number, import_prop_types96.default.string]),
    md: import_prop_types96.default.oneOfType([import_prop_types96.default.number, import_prop_types96.default.string]),
    sm: import_prop_types96.default.oneOfType([import_prop_types96.default.number, import_prop_types96.default.string]),
    xl: import_prop_types96.default.oneOfType([import_prop_types96.default.number, import_prop_types96.default.string]),
    xs: import_prop_types96.default.oneOfType([import_prop_types96.default.number, import_prop_types96.default.string])
  }), import_prop_types96.default.string]),
  /**
   * Applies the theme typography styles.
   * @default variant === 'text' ? 'body-md' : 'inherit'
   */
  level: import_prop_types96.default.oneOfType([import_prop_types96.default.oneOf(["h1", "h2", "h3", "h4", "title-lg", "title-md", "title-sm", "body-lg", "body-md", "body-sm", "body-xs", "inherit"]), import_prop_types96.default.string]),
  /**
   * If `true`, the skeleton appears.
   * @default true
   */
  loading: import_prop_types96.default.bool,
  /**
   * If `true`, the skeleton's position will change to `absolute` to fill the available space of the nearest parent.
   * This prop is useful to create a placeholder that has the element's dimensions.
   * @default false
   */
  overlay: import_prop_types96.default.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types96.default.shape({
    root: import_prop_types96.default.oneOfType([import_prop_types96.default.func, import_prop_types96.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types96.default.shape({
    root: import_prop_types96.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types96.default.oneOfType([import_prop_types96.default.arrayOf(import_prop_types96.default.oneOfType([import_prop_types96.default.func, import_prop_types96.default.object, import_prop_types96.default.bool])), import_prop_types96.default.func, import_prop_types96.default.object]),
  /**
   * The type of content that will be rendered.
   * @default 'overlay'
   */
  variant: import_prop_types96.default.oneOfType([import_prop_types96.default.oneOf(["circular", "inline", "overlay", "rectangular", "text"]), import_prop_types96.default.string]),
  /**
   * Width of the skeleton.
   * Useful when the skeleton is inside an inline element with no width of its own.
   */
  width: import_prop_types96.default.oneOfType([import_prop_types96.default.arrayOf(import_prop_types96.default.oneOfType([import_prop_types96.default.number, import_prop_types96.default.string])), import_prop_types96.default.number, import_prop_types96.default.shape({
    lg: import_prop_types96.default.oneOfType([import_prop_types96.default.number, import_prop_types96.default.string]),
    md: import_prop_types96.default.oneOfType([import_prop_types96.default.number, import_prop_types96.default.string]),
    sm: import_prop_types96.default.oneOfType([import_prop_types96.default.number, import_prop_types96.default.string]),
    xl: import_prop_types96.default.oneOfType([import_prop_types96.default.number, import_prop_types96.default.string]),
    xs: import_prop_types96.default.oneOfType([import_prop_types96.default.number, import_prop_types96.default.string])
  }), import_prop_types96.default.string])
} : void 0;
Skeleton.muiName = "Skeleton";
var Skeleton_default = Skeleton;

// node_modules/@mui/joy/Slider/Slider.js
var React180 = __toESM(require_react());
var import_prop_types97 = __toESM(require_prop_types());

// node_modules/@mui/joy/Slider/sliderClasses.js
function getSliderUtilityClass2(slot) {
  return generateUtilityClass2("MuiSlider", slot);
}
var sliderClasses2 = generateUtilityClasses2("MuiSlider", ["root", "disabled", "dragging", "focusVisible", "marked", "vertical", "trackInverted", "trackFalse", "rail", "track", "mark", "markActive", "markLabel", "thumb", "thumbStart", "thumbEnd", "valueLabel", "valueLabelOpen", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "disabled", "sizeSm", "sizeMd", "sizeLg", "input"]);
var sliderClasses_default = sliderClasses2;

// node_modules/@mui/joy/Slider/Slider.js
var import_jsx_runtime143 = __toESM(require_jsx_runtime());
var import_jsx_runtime144 = __toESM(require_jsx_runtime());
var _excluded93 = ["aria-label", "aria-valuetext", "className", "classes", "disableSwap", "disabled", "defaultValue", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "onMouseDown", "orientation", "shiftStep", "scale", "step", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat", "isRtl", "color", "size", "variant", "component", "slots", "slotProps"];
function Identity3(x) {
  return x;
}
var useUtilityClasses83 = (ownerState) => {
  const {
    disabled,
    dragging,
    marked,
    orientation,
    track,
    variant,
    color,
    size: size3
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`],
    rail: ["rail"],
    track: ["track"],
    thumb: ["thumb", disabled && "disabled"],
    input: ["input"],
    mark: ["mark"],
    markActive: ["markActive"],
    markLabel: ["markLabel"],
    markLabelActive: ["markLabelActive"],
    valueLabel: ["valueLabel"],
    valueLabelOpen: ["valueLabelOpen"],
    active: ["active"],
    focusVisible: ["focusVisible"]
  };
  return composeClasses(slots, getSliderUtilityClass2, {});
};
var sliderColorVariables = ({
  theme,
  ownerState
}) => (data = {}) => {
  var _theme$variants, _styles$VariantBor;
  const styles2 = ((_theme$variants = theme.variants[`${ownerState.variant}${data.state || ""}`]) == null ? void 0 : _theme$variants[ownerState.color]) || {};
  return _extends({}, !data.state && {
    "--variant-borderWidth": (_styles$VariantBor = styles2["--variant-borderWidth"]) != null ? _styles$VariantBor : "0px"
  }, {
    "--Slider-trackColor": styles2.color,
    "--Slider-thumbBackground": styles2.color,
    "--Slider-thumbColor": styles2.backgroundColor || theme.vars.palette.background.surface,
    "--Slider-trackBackground": styles2.backgroundColor || theme.vars.palette.background.surface,
    "--Slider-trackBorderColor": styles2.borderColor,
    "--Slider-railBackground": theme.vars.palette.background.level2
  });
};
var SliderRoot = styled_default("span", {
  name: "JoySlider",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  const getColorVariables = sliderColorVariables({
    theme,
    ownerState
  });
  return [_extends({
    "--Slider-size": "max(42px, max(var(--Slider-thumbSize), var(--Slider-trackSize)))",
    // Reach 42px touch target, about ~8mm on screen.
    "--Slider-trackRadius": "var(--Slider-size)",
    "--Slider-markBackground": theme.vars.palette.text.tertiary,
    [`& .${sliderClasses_default.markActive}`]: {
      "--Slider-markBackground": "var(--Slider-trackColor)"
    }
  }, ownerState.size === "sm" && {
    "--Slider-markSize": "2px",
    "--Slider-trackSize": "4px",
    "--Slider-thumbSize": "14px",
    "--Slider-valueLabelArrowSize": "6px"
  }, ownerState.size === "md" && {
    "--Slider-markSize": "2px",
    "--Slider-trackSize": "6px",
    "--Slider-thumbSize": "18px",
    "--Slider-valueLabelArrowSize": "8px"
  }, ownerState.size === "lg" && {
    "--Slider-markSize": "3px",
    "--Slider-trackSize": "8px",
    "--Slider-thumbSize": "24px",
    "--Slider-valueLabelArrowSize": "10px"
  }, {
    "--Slider-thumbRadius": "calc(var(--Slider-thumbSize) / 2)",
    "--Slider-thumbWidth": "var(--Slider-thumbSize)"
  }, getColorVariables(), {
    "&:hover": {
      "@media (hover: hover)": _extends({}, getColorVariables({
        state: "Hover"
      }))
    },
    "&:active": _extends({}, getColorVariables({
      state: "Active"
    })),
    [`&.${sliderClasses_default.disabled}`]: _extends({
      pointerEvents: "none",
      color: theme.vars.palette.text.tertiary
    }, getColorVariables({
      state: "Disabled"
    })),
    boxSizing: "border-box",
    display: "inline-block",
    position: "relative",
    cursor: "pointer",
    touchAction: "none",
    WebkitTapHighlightColor: "transparent"
  }, ownerState.orientation === "horizontal" && {
    padding: "calc(var(--Slider-size) / 2) 0",
    width: "100%"
  }, ownerState.orientation === "vertical" && {
    padding: "0 calc(var(--Slider-size) / 2)",
    height: "100%"
  }, {
    "@media print": {
      colorAdjust: "exact"
    }
  })];
});
var SliderRail = styled_default("span", {
  name: "JoySlider",
  slot: "Rail",
  overridesResolver: (props, styles2) => styles2.rail
})(({
  ownerState
}) => [_extends({
  display: "block",
  position: "absolute",
  backgroundColor: ownerState.track === "inverted" ? "var(--Slider-trackBackground)" : "var(--Slider-railBackground)",
  border: ownerState.track === "inverted" ? "var(--variant-borderWidth, 0px) solid var(--Slider-trackBorderColor)" : "initial",
  borderRadius: "var(--Slider-trackRadius)"
}, ownerState.orientation === "horizontal" && {
  height: "var(--Slider-trackSize)",
  top: "50%",
  left: 0,
  right: 0,
  transform: "translateY(-50%)"
}, ownerState.orientation === "vertical" && {
  width: "var(--Slider-trackSize)",
  top: 0,
  bottom: 0,
  left: "50%",
  transform: "translateX(-50%)"
}, ownerState.track === "inverted" && {
  opacity: 1
})]);
var SliderTrack = styled_default("span", {
  name: "JoySlider",
  slot: "Track",
  overridesResolver: (props, styles2) => styles2.track
})(({
  ownerState
}) => {
  return [_extends({
    display: "block",
    position: "absolute",
    color: "var(--Slider-trackColor)",
    border: ownerState.track === "inverted" ? "initial" : "var(--variant-borderWidth, 0px) solid var(--Slider-trackBorderColor)",
    backgroundColor: ownerState.track === "inverted" ? "var(--Slider-railBackground)" : "var(--Slider-trackBackground)"
  }, ownerState.orientation === "horizontal" && {
    height: "var(--Slider-trackSize)",
    top: "50%",
    transform: "translateY(-50%)",
    borderRadius: "var(--Slider-trackRadius) 0 0 var(--Slider-trackRadius)"
  }, ownerState.orientation === "vertical" && {
    width: "var(--Slider-trackSize)",
    left: "50%",
    transform: "translateX(-50%)",
    borderRadius: "0 0 var(--Slider-trackRadius) var(--Slider-trackRadius)"
  }, ownerState.track === false && {
    display: "none"
  })];
});
var SliderThumb = styled_default("span", {
  name: "JoySlider",
  slot: "Thumb",
  overridesResolver: (props, styles2) => styles2.thumb
})(({
  ownerState,
  theme
}) => {
  var _theme$vars$palette;
  return _extends({
    position: "absolute",
    boxSizing: "border-box",
    outline: 0,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    width: "var(--Slider-thumbWidth)",
    height: "var(--Slider-thumbSize)",
    border: "var(--variant-borderWidth, 0px) solid var(--Slider-trackBorderColor)",
    borderRadius: "var(--Slider-thumbRadius)",
    boxShadow: "var(--Slider-thumbShadow)",
    color: "var(--Slider-thumbColor)",
    backgroundColor: "var(--Slider-thumbBackground)",
    [theme.focus.selector]: _extends({}, theme.focus.default, {
      outlineOffset: 0,
      outlineWidth: "max(4px, var(--Slider-thumbSize) / 3.6)",
      outlineColor: `rgba(${(_theme$vars$palette = theme.vars.palette) == null || (_theme$vars$palette = _theme$vars$palette[ownerState.color]) == null ? void 0 : _theme$vars$palette.mainChannel} / 0.32)`
    })
  }, ownerState.orientation === "horizontal" && {
    top: "50%",
    transform: "translate(-50%, -50%)"
  }, ownerState.orientation === "vertical" && {
    left: "50%",
    transform: "translate(-50%, 50%)"
  }, {
    "&::before": {
      // use pseudo element to create thumb's ring
      boxSizing: "border-box",
      content: '""',
      display: "block",
      position: "absolute",
      background: "transparent",
      // to not block the thumb's child
      top: 0,
      left: 0,
      width: "100%",
      height: "100%",
      border: "2px solid",
      borderColor: "var(--Slider-thumbColor)",
      borderRadius: "inherit"
    }
  });
});
var SliderMark = styled_default("span", {
  name: "JoySlider",
  slot: "Mark",
  overridesResolver: (props, styles2) => styles2.mark
})(({
  ownerState
}) => {
  return _extends({
    position: "absolute",
    width: "var(--Slider-markSize)",
    height: "var(--Slider-markSize)",
    borderRadius: "var(--Slider-markSize)",
    backgroundColor: "var(--Slider-markBackground)"
  }, ownerState.orientation === "horizontal" && _extends({
    top: "50%",
    transform: `translate(calc(var(--Slider-markSize) / -2), -50%)`
  }, ownerState.percent === 0 && {
    transform: `translate(min(var(--Slider-markSize), 3px), -50%)`
  }, ownerState.percent === 100 && {
    transform: `translate(calc(var(--Slider-markSize) * -1 - min(var(--Slider-markSize), 3px)), -50%)`
  }), ownerState.orientation === "vertical" && _extends({
    left: "50%",
    transform: "translate(-50%, calc(var(--Slider-markSize) / 2))"
  }, ownerState.percent === 0 && {
    transform: `translate(-50%, calc(min(var(--Slider-markSize), 3px) * -1))`
  }, ownerState.percent === 100 && {
    transform: `translate(-50%, calc(var(--Slider-markSize) * 1 + min(var(--Slider-markSize), 3px)))`
  }));
});
var SliderValueLabel = styled_default("span", {
  name: "JoySlider",
  slot: "ValueLabel",
  overridesResolver: (props, styles2) => styles2.valueLabel
})(({
  theme,
  ownerState
}) => _extends({}, ownerState.size === "sm" && {
  fontSize: theme.fontSize.xs,
  lineHeight: theme.lineHeight.md,
  paddingInline: "0.25rem",
  minWidth: "20px"
}, ownerState.size === "md" && {
  fontSize: theme.fontSize.sm,
  lineHeight: theme.lineHeight.md,
  paddingInline: "0.375rem",
  minWidth: "24px"
}, ownerState.size === "lg" && {
  fontSize: theme.fontSize.md,
  lineHeight: theme.lineHeight.md,
  paddingInline: "0.5rem",
  minWidth: "28px"
}, {
  zIndex: 1,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  whiteSpace: "nowrap",
  fontFamily: theme.vars.fontFamily.body,
  fontWeight: theme.vars.fontWeight.md,
  bottom: 0,
  transformOrigin: "bottom center",
  transform: "translateY(calc((var(--Slider-thumbSize) + var(--Slider-valueLabelArrowSize)) * -1)) scale(0)",
  position: "absolute",
  backgroundColor: theme.vars.palette.background.tooltip,
  boxShadow: theme.shadow.sm,
  borderRadius: theme.vars.radius.xs,
  color: "#fff",
  "&::before": {
    display: "var(--Slider-valueLabelArrowDisplay)",
    position: "absolute",
    content: '""',
    color: theme.vars.palette.background.tooltip,
    bottom: 0,
    border: "calc(var(--Slider-valueLabelArrowSize) / 2) solid",
    borderColor: "currentColor",
    borderRightColor: "transparent",
    borderBottomColor: "transparent",
    borderLeftColor: "transparent",
    left: "50%",
    transform: "translate(-50%, 100%)",
    backgroundColor: "transparent"
  },
  [`&.${sliderClasses_default.valueLabelOpen}`]: {
    transform: "translateY(calc((var(--Slider-thumbSize) + var(--Slider-valueLabelArrowSize)) * -1)) scale(1)"
  }
}));
var SliderMarkLabel = styled_default("span", {
  name: "JoySlider",
  slot: "MarkLabel",
  overridesResolver: (props, styles2) => styles2.markLabel
})(({
  theme,
  ownerState
}) => _extends({
  fontFamily: theme.vars.fontFamily.body
}, ownerState.size === "sm" && {
  fontSize: theme.vars.fontSize.xs
}, ownerState.size === "md" && {
  fontSize: theme.vars.fontSize.sm
}, ownerState.size === "lg" && {
  fontSize: theme.vars.fontSize.md
}, {
  color: theme.palette.text.tertiary,
  position: "absolute",
  whiteSpace: "nowrap"
}, ownerState.orientation === "horizontal" && {
  top: "calc(50% + 4px + (max(var(--Slider-trackSize), var(--Slider-thumbSize)) / 2))",
  transform: "translateX(-50%)"
}, ownerState.orientation === "vertical" && {
  left: "calc(50% + 8px + (max(var(--Slider-trackSize), var(--Slider-thumbSize)) / 2))",
  transform: "translateY(50%)"
}));
var SliderInput = styled_default("input", {
  name: "JoySlider",
  slot: "Input",
  overridesResolver: (props, styles2) => styles2.input
})({});
var Slider3 = React180.forwardRef(function Slider4(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoySlider"
  });
  const {
    "aria-label": ariaLabel,
    "aria-valuetext": ariaValuetext,
    className,
    classes: classesProp,
    disableSwap = false,
    disabled = false,
    defaultValue,
    getAriaLabel,
    getAriaValueText,
    marks: marksProp = false,
    max: max2 = 100,
    min: min2 = 0,
    orientation = "horizontal",
    shiftStep = 10,
    scale = Identity3,
    step = 1,
    track = "normal",
    valueLabelDisplay = "off",
    valueLabelFormat = Identity3,
    isRtl = false,
    color = "primary",
    size: size3 = "md",
    variant = "solid",
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded93);
  const ownerState = _extends({}, props, {
    marks: marksProp,
    classes: classesProp,
    disabled,
    defaultValue,
    disableSwap,
    isRtl,
    max: max2,
    min: min2,
    orientation,
    shiftStep,
    scale,
    step,
    track,
    valueLabelDisplay,
    valueLabelFormat,
    color,
    size: size3,
    variant
  });
  const {
    axisProps: axisProps2,
    getRootProps,
    getHiddenInputProps,
    getThumbProps,
    open,
    active,
    axis,
    focusedThumbIndex,
    range,
    dragging,
    marks,
    values,
    trackOffset,
    trackLeap,
    getThumbStyle
  } = useSlider(_extends({}, ownerState, {
    rootRef: ref
  }));
  ownerState.marked = marks.length > 0 && marks.some((mark) => mark.label);
  ownerState.dragging = dragging;
  const trackStyle = _extends({}, axisProps2[axis].offset(trackOffset), axisProps2[axis].leap(trackLeap));
  const classes = useUtilityClasses83(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: SliderRoot,
    externalForwardedProps,
    getSlotProps: getRootProps,
    ownerState
  });
  const [SlotRail, railProps] = useSlot("rail", {
    className: classes.rail,
    elementType: SliderRail,
    externalForwardedProps,
    ownerState
  });
  const [SlotTrack, trackProps] = useSlot("track", {
    additionalProps: {
      style: trackStyle
    },
    className: classes.track,
    elementType: SliderTrack,
    externalForwardedProps,
    ownerState
  });
  const [SlotMark, markProps] = useSlot("mark", {
    className: classes.mark,
    elementType: SliderMark,
    externalForwardedProps,
    ownerState
  });
  const [SlotMarkLabel, markLabelProps] = useSlot("markLabel", {
    className: classes.markLabel,
    elementType: SliderMarkLabel,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      "aria-hidden": true
    }
  });
  const [SlotThumb, thumbProps] = useSlot("thumb", {
    className: classes.thumb,
    elementType: SliderThumb,
    externalForwardedProps,
    getSlotProps: getThumbProps,
    ownerState
  });
  const [SlotInput, inputProps] = useSlot("input", {
    className: classes.input,
    elementType: SliderInput,
    externalForwardedProps,
    getSlotProps: getHiddenInputProps,
    ownerState
  });
  const [SlotValueLabel, valueLabelProps] = useSlot("valueLabel", {
    className: classes.valueLabel,
    elementType: SliderValueLabel,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime144.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime143.jsx)(SlotRail, _extends({}, railProps)), (0, import_jsx_runtime143.jsx)(SlotTrack, _extends({}, trackProps)), marks.filter((mark) => mark.value >= min2 && mark.value <= max2).map((mark, index2) => {
      const percent = valueToPercent(mark.value, min2, max2);
      const style = axisProps2[axis].offset(percent);
      let markActive;
      if (track === false) {
        markActive = values.indexOf(mark.value) !== -1;
      } else {
        markActive = track === "normal" && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === "inverted" && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
      }
      return (0, import_jsx_runtime144.jsxs)(React180.Fragment, {
        children: [(0, import_jsx_runtime143.jsx)(SlotMark, _extends({
          "data-index": index2
        }, markProps, !isHostComponent_default(SlotMark) && {
          ownerState: _extends({}, markProps.ownerState, {
            percent
          })
        }, {
          style: _extends({}, style, markProps.style),
          className: clsx_default(markProps.className, markActive && classes.markActive)
        })), mark.label != null ? (0, import_jsx_runtime143.jsx)(SlotMarkLabel, _extends({
          "data-index": index2
        }, markLabelProps, {
          style: _extends({}, style, markLabelProps.style),
          className: clsx_default(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
          children: mark.label
        })) : null]
      }, mark.value);
    }), values.map((value, index2) => {
      const percent = valueToPercent(value, min2, max2);
      const style = axisProps2[axis].offset(percent);
      return (0, import_jsx_runtime144.jsxs)(SlotThumb, _extends({
        "data-index": index2
      }, thumbProps, {
        className: clsx_default(thumbProps.className, active === index2 && classes.active, focusedThumbIndex === index2 && classes.focusVisible),
        style: _extends({}, style, getThumbStyle(index2), thumbProps.style),
        children: [(0, import_jsx_runtime143.jsx)(SlotInput, _extends({
          "data-index": index2,
          "aria-label": getAriaLabel ? getAriaLabel(index2) : ariaLabel,
          "aria-valuenow": scale(value),
          "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index2) : ariaValuetext,
          value: values[index2]
        }, inputProps)), valueLabelDisplay !== "off" ? (0, import_jsx_runtime143.jsx)(SlotValueLabel, _extends({}, valueLabelProps, {
          className: clsx_default(valueLabelProps.className, (open === index2 || active === index2 || valueLabelDisplay === "on") && classes.valueLabelOpen),
          children: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value), index2) : valueLabelFormat
        })) : null]
      }), index2);
    })]
  }));
});
true ? Slider3.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The label of the slider.
   */
  "aria-label": import_prop_types97.default.string,
  /**
   * A string value that provides a user-friendly name for the current value of the slider.
   */
  "aria-valuetext": import_prop_types97.default.string,
  /**
   * @ignore
   */
  children: import_prop_types97.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types97.default.object,
  /**
   * @ignore
   */
  className: import_prop_types97.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: import_prop_types97.default.oneOfType([import_prop_types97.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types97.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types97.default.elementType,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: import_prop_types97.default.oneOfType([import_prop_types97.default.arrayOf(import_prop_types97.default.number), import_prop_types97.default.number]),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types97.default.bool,
  /**
   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
   * @default false
   */
  disableSwap: import_prop_types97.default.bool,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
   * This is important for screen reader users.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */
  getAriaLabel: import_prop_types97.default.func,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
   * This is important for screen reader users.
   * @param {number} value The thumb label's value to format.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */
  getAriaValueText: import_prop_types97.default.func,
  /**
   * If `true` the Slider will be rendered right-to-left (with the lowest value on the right-hand side).
   * @default false
   */
  isRtl: import_prop_types97.default.bool,
  /**
   * Marks indicate predetermined values to which the user can move the slider.
   * If `true` the marks are spaced according the value of the `step` prop.
   * If an array, it should contain objects with `value` and an optional `label` keys.
   * @default false
   */
  marks: import_prop_types97.default.oneOfType([import_prop_types97.default.arrayOf(import_prop_types97.default.shape({
    label: import_prop_types97.default.node,
    value: import_prop_types97.default.number.isRequired
  })), import_prop_types97.default.bool]),
  /**
   * The maximum allowed value of the slider.
   * Should not be equal to min.
   * @default 100
   */
  max: import_prop_types97.default.number,
  /**
   * The minimum allowed value of the slider.
   * Should not be equal to max.
   * @default 0
   */
  min: import_prop_types97.default.number,
  /**
   * Name attribute of the hidden `input` element.
   */
  name: import_prop_types97.default.string,
  /**
   * Callback function that is fired when the slider's value changed.
   *
   * @param {Event} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   * @param {number} activeThumb Index of the currently moved thumb.
   */
  onChange: import_prop_types97.default.func,
  /**
   * Callback function that is fired when the `mouseup` is triggered.
   *
   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   */
  onChangeCommitted: import_prop_types97.default.func,
  /**
   * @ignore
   */
  onMouseDown: import_prop_types97.default.func,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types97.default.oneOf(["horizontal", "vertical"]),
  /**
   * A transformation function, to change the scale of the slider.
   * @param {any} x
   * @returns {any}
   * @default function Identity(x) {
   *   return x;
   * }
   */
  scale: import_prop_types97.default.func,
  /**
   * The granularity with which the slider can step through values when using Page Up/Page Down or Shift + Arrow Up/Arrow Down.
   * @default 10
   */
  shiftStep: import_prop_types97.default.number,
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types97.default.oneOfType([import_prop_types97.default.oneOf(["sm", "md", "lg"]), import_prop_types97.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types97.default.shape({
    input: import_prop_types97.default.oneOfType([import_prop_types97.default.func, import_prop_types97.default.object]),
    mark: import_prop_types97.default.oneOfType([import_prop_types97.default.func, import_prop_types97.default.object]),
    markLabel: import_prop_types97.default.oneOfType([import_prop_types97.default.func, import_prop_types97.default.object]),
    rail: import_prop_types97.default.oneOfType([import_prop_types97.default.func, import_prop_types97.default.object]),
    root: import_prop_types97.default.oneOfType([import_prop_types97.default.func, import_prop_types97.default.object]),
    thumb: import_prop_types97.default.oneOfType([import_prop_types97.default.func, import_prop_types97.default.object]),
    track: import_prop_types97.default.oneOfType([import_prop_types97.default.func, import_prop_types97.default.object]),
    valueLabel: import_prop_types97.default.oneOfType([import_prop_types97.default.func, import_prop_types97.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types97.default.shape({
    input: import_prop_types97.default.elementType,
    mark: import_prop_types97.default.elementType,
    markLabel: import_prop_types97.default.elementType,
    rail: import_prop_types97.default.elementType,
    root: import_prop_types97.default.elementType,
    thumb: import_prop_types97.default.elementType,
    track: import_prop_types97.default.elementType,
    valueLabel: import_prop_types97.default.elementType
  }),
  /**
   * The granularity with which the slider can step through values. (A "discrete" slider.)
   * The `min` prop serves as the origin for the valid values.
   * We recommend (max - min) to be evenly divisible by the step.
   *
   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
   * @default 1
   */
  step: import_prop_types97.default.number,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types97.default.oneOfType([import_prop_types97.default.arrayOf(import_prop_types97.default.oneOfType([import_prop_types97.default.func, import_prop_types97.default.object, import_prop_types97.default.bool])), import_prop_types97.default.func, import_prop_types97.default.object]),
  /**
   * Tab index attribute of the hidden `input` element.
   */
  tabIndex: import_prop_types97.default.number,
  /**
   * The track presentation:
   *
   * - `normal` the track will render a bar representing the slider value.
   * - `inverted` the track will render a bar representing the remaining slider value.
   * - `false` the track will render without a bar.
   * @default 'normal'
   */
  track: import_prop_types97.default.oneOf(["inverted", "normal", false]),
  /**
   * The value of the slider.
   * For ranged sliders, provide an array with two values.
   */
  value: import_prop_types97.default.oneOfType([import_prop_types97.default.arrayOf(import_prop_types97.default.number), import_prop_types97.default.number]),
  /**
   * Controls when the value label is displayed:
   *
   * - `auto` the value label will display when the thumb is hovered or focused.
   * - `on` will display persistently.
   * - `off` will never display.
   * @default 'off'
   */
  valueLabelDisplay: import_prop_types97.default.oneOf(["auto", "off", "on"]),
  /**
   * The format function the value label's value.
   *
   * When a function is provided, it should have the following signature:
   *
   * - {number} value The value label's value to format
   * - {number} index The value label's index to format
   * @param {any} x
   * @returns {any}
   * @default function Identity(x) {
   *   return x;
   * }
   */
  valueLabelFormat: import_prop_types97.default.oneOfType([import_prop_types97.default.func, import_prop_types97.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'solid'
   */
  variant: import_prop_types97.default.oneOfType([import_prop_types97.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types97.default.string])
} : void 0;
var Slider_default = Slider3;

// node_modules/@mui/joy/Snackbar/Snackbar.js
var React181 = __toESM(require_react());
var import_prop_types98 = __toESM(require_prop_types());

// node_modules/@mui/joy/Snackbar/snackbarClasses.js
function getSnackbarUtilityClass2(slot) {
  return generateUtilityClass2("MuiSnackbar", slot);
}
var snackbarClasses2 = generateUtilityClasses2("MuiSnackbar", ["root", "anchorOriginTopCenter", "anchorOriginBottomCenter", "anchorOriginTopRight", "anchorOriginBottomRight", "anchorOriginTopLeft", "anchorOriginBottomLeft", "colorPrimary", "colorDanger", "colorNeutral", "colorSuccess", "colorWarning", "endDecorator", "sizeSm", "sizeMd", "sizeLg", "startDecorator", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var snackbarClasses_default = snackbarClasses2;

// node_modules/@mui/joy/Snackbar/Snackbar.js
var import_jsx_runtime145 = __toESM(require_jsx_runtime());
var import_jsx_runtime146 = __toESM(require_jsx_runtime());
var _excluded94 = ["anchorOrigin", "animationDuration", "autoHideDuration", "color", "children", "className", "component", "disableWindowBlurListener", "endDecorator", "invertedColors", "onBlur", "onClose", "onFocus", "onMouseEnter", "onMouseLeave", "onUnmount", "open", "resumeHideDuration", "size", "slots", "slotProps", "startDecorator", "variant"];
var _4 = (t) => t;
var _t6;
var _t24;
var useUtilityClasses84 = (ownerState) => {
  const {
    variant,
    color,
    size: size3,
    anchorOrigin
  } = ownerState;
  const slots = {
    root: ["root", size3 && `size${capitalize(size3)}`, color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`, `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses2(slots, getSnackbarUtilityClass2, {});
};
var enterAnimation = keyframes(_t6 || (_t6 = _4`
  0% {
    transform: translateX(var(--Snackbar-translateX, 0px)) translateY(calc(var(--_Snackbar-anchorBottom, 1) * 100%));
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
  100% {
    transform: translateX(var(--Snackbar-translateX, 0px)) translateY(0);
  }
`));
var exitAnimation = keyframes(_t24 || (_t24 = _4`
  0% {
    transform: translateX(var(--Snackbar-translateX, 0px)) translateY(0);
    opacity: 1;
  }
  100% {
    transform: translateX(var(--Snackbar-translateX, 0px)) translateY(calc(var(--_Snackbar-anchorBottom, 1) * 100%));
    opacity: 0;
  }
`));
var SnackbarRoot = styled_default("div", {
  name: "JoySnackbar",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _ownerState$anchorOri, _ownerState$anchorOri2, _ownerState$anchorOri3, _ownerState$anchorOri4, _ownerState$anchorOri5, _ownerState$anchorOri6, _theme$variants;
  const {
    p,
    padding,
    borderRadius
  } = resolveSxValue({
    theme,
    ownerState
  }, ["p", "padding", "borderRadius"]);
  return [_extends({
    "--Snackbar-radius": theme.vars.radius.sm,
    "--Snackbar-decoratorChildRadius": "max((var(--Snackbar-radius) - var(--variant-borderWidth, 0px)) - var(--Snackbar-padding), min(var(--Snackbar-padding) + var(--variant-borderWidth, 0px), var(--Snackbar-radius) / 2))",
    "--Button-minHeight": "var(--Snackbar-decoratorChildHeight)",
    "--IconButton-size": "var(--Snackbar-decoratorChildHeight)",
    "--Button-radius": "var(--Snackbar-decoratorChildRadius)",
    "--IconButton-radius": "var(--Snackbar-decoratorChildRadius)",
    "--Icon-color": "currentColor"
  }, ownerState.size === "sm" && {
    "--Snackbar-padding": "0.75rem",
    "--Snackbar-inset": "0.5rem",
    "--Snackbar-decoratorChildHeight": "1.5rem",
    "--Icon-fontSize": theme.vars.fontSize.xl,
    gap: "0.5rem"
  }, ownerState.size === "md" && {
    "--Snackbar-padding": "1rem",
    "--Snackbar-inset": "0.75rem",
    // the spacing between Snackbar and the viewport
    "--Snackbar-decoratorChildHeight": "2rem",
    "--Icon-fontSize": theme.vars.fontSize.xl,
    gap: "0.625rem"
  }, ownerState.size === "lg" && {
    "--Snackbar-padding": "1.25rem",
    "--Snackbar-inset": "1rem",
    "--Snackbar-decoratorChildHeight": "2.375rem",
    "--Icon-fontSize": theme.vars.fontSize.xl2,
    gap: "0.875rem"
  }, {
    zIndex: theme.vars.zIndex.snackbar,
    position: "fixed",
    display: "flex",
    alignItems: "center",
    minWidth: 300,
    top: ((_ownerState$anchorOri = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri.vertical) === "top" ? "var(--Snackbar-inset)" : void 0,
    left: ((_ownerState$anchorOri2 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri2.horizontal) === "left" ? "var(--Snackbar-inset)" : void 0,
    bottom: ((_ownerState$anchorOri3 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri3.vertical) === "bottom" ? "var(--Snackbar-inset)" : void 0,
    right: ((_ownerState$anchorOri4 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri4.horizontal) === "right" ? "var(--Snackbar-inset)" : void 0
  }, ((_ownerState$anchorOri5 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri5.horizontal) === "center" && {
    "--Snackbar-translateX": "-50%",
    left: "50%",
    transform: "translateX(var(--Snackbar-translateX))"
  }, ((_ownerState$anchorOri6 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri6.vertical) === "top" && {
    "--_Snackbar-anchorBottom": "-1"
  }, {
    animation: `${enterAnimation} ${ownerState.animationDuration}ms forwards`
  }, !ownerState.open && {
    animationName: exitAnimation
  }, {
    boxShadow: theme.vars.shadow.lg,
    backgroundColor: theme.vars.palette.background.surface,
    padding: `var(--Snackbar-padding)`,
    borderRadius: "var(--Snackbar-radius)"
  }, theme.typography[`body-${{
    sm: "xs",
    md: "sm",
    lg: "md"
  }[ownerState.size]}`], ownerState.variant === "solid" && ownerState.color && ownerState.invertedColors && applySolidInversion(ownerState.color)(theme), ownerState.variant === "soft" && ownerState.color && ownerState.invertedColors && applySoftInversion(ownerState.color)(theme), (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]), p !== void 0 && {
    "--Snackbar-padding": p
  }, padding !== void 0 && {
    "--Snackbar-padding": padding
  }, borderRadius !== void 0 && {
    "--Snackbar-radius": borderRadius
  }];
});
var SnackbarStartDecorator = styled_default("span", {
  name: "JoySnackbar",
  slot: "StartDecorator",
  overridesResolver: (props, styles2) => styles2.startDecorator
})({
  display: "inherit",
  flex: "none"
});
var SnackbarEndDecorator = styled_default("span", {
  name: "JoySnackbar",
  slot: "EndDecorator",
  overridesResolver: (props, styles2) => styles2.endDecorator
})({
  display: "inherit",
  flex: "none",
  marginLeft: "auto"
});
var defaultAnchorOrigin = {
  vertical: "bottom",
  horizontal: "right"
};
var Snackbar3 = React181.forwardRef(function Snackbar4(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoySnackbar"
  });
  const {
    anchorOrigin = defaultAnchorOrigin,
    animationDuration = 300,
    autoHideDuration = null,
    color = "neutral",
    children,
    className,
    component,
    disableWindowBlurListener = false,
    endDecorator,
    invertedColors = false,
    onUnmount,
    open,
    size: size3 = "md",
    slots = {},
    slotProps,
    startDecorator,
    variant = "outlined"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded94);
  const [exited, setExited] = React181.useState(true);
  const [exiting, setExiting] = React181.useState(false);
  const unmountRef = React181.useRef(onUnmount);
  unmountRef.current = onUnmount;
  React181.useEffect(() => {
    if (open) {
      setExiting(false);
      setExited(false);
    } else {
      setExiting(true);
      const timer = setTimeout(() => {
        var _unmountRef$current;
        setExited(true);
        setExiting(false);
        (_unmountRef$current = unmountRef.current) == null || _unmountRef$current.call(unmountRef);
      }, animationDuration);
      return () => {
        clearTimeout(timer);
      };
    }
    return void 0;
  }, [open, animationDuration]);
  const ownerState = _extends({}, props, {
    anchorOrigin,
    autoHideDuration,
    color,
    animationDuration,
    disableWindowBlurListener,
    invertedColors,
    size: size3,
    variant
  });
  delete ownerState.onUnmount;
  const classes = useUtilityClasses84(ownerState);
  const {
    getRootProps,
    onClickAway
  } = useSnackbar(ownerState);
  const handleClickAway = (event) => {
    if (!exiting) {
      onClickAway(event);
    }
  };
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: SnackbarRoot,
    externalForwardedProps,
    getSlotProps: getRootProps,
    ownerState
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: SnackbarStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: SnackbarEndDecorator,
    externalForwardedProps,
    ownerState
  });
  const SlotClickAway = slots.clickAway || ClickAwayListener;
  if (!open && exited) {
    return null;
  }
  return (0, import_jsx_runtime145.jsx)(SlotClickAway, _extends({
    onClickAway: handleClickAway
  }, typeof (slotProps == null ? void 0 : slotProps.clickAway) === "function" ? slotProps.clickAway(ownerState) : slotProps == null ? void 0 : slotProps.clickAway, {
    children: (0, import_jsx_runtime146.jsxs)(SlotRoot, _extends({}, rootProps, {
      children: [startDecorator && (0, import_jsx_runtime145.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
        children: startDecorator
      })), children, endDecorator && (0, import_jsx_runtime145.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
        children: endDecorator
      }))]
    }))
  }));
});
true ? Snackbar3.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The anchor of the `Snackbar`.
   * On smaller screens, the component grows to occupy all the available width,
   * the horizontal alignment is ignored.
   * @default { vertical: 'bottom', horizontal: 'right' }
   */
  anchorOrigin: import_prop_types98.default.shape({
    horizontal: import_prop_types98.default.oneOf(["center", "left", "right"]).isRequired,
    vertical: import_prop_types98.default.oneOf(["bottom", "top"]).isRequired
  }),
  /**
   * The duration of the animation in milliseconds. This value is used to control
   * the length of time it takes for an animation to complete one cycle. It is also
   * utilized for delaying the unmount of the component.
   * Provide this value if you have your own animation so that we can precisely
   * time the component's unmount to match your custom animation.
   * @default 300
   */
  animationDuration: import_prop_types98.default.number,
  /**
   * The number of milliseconds to wait before automatically calling the
   * `onClose` function. `onClose` should then set the state of the `open`
   * prop to hide the Snackbar. This behavior is disabled by default with
   * the `null` value.
   * @default null
   */
  autoHideDuration: import_prop_types98.default.number,
  /**
   * @ignore
   */
  children: import_prop_types98.default.node,
  /**
   * @ignore
   */
  className: import_prop_types98.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types98.default.oneOf(["danger", "neutral", "primary", "success", "warning"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types98.default.elementType,
  /**
   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
   * @default false
   */
  disableWindowBlurListener: import_prop_types98.default.bool,
  /**
   * Element placed after the children.
   */
  endDecorator: import_prop_types98.default.node,
  /**
   * If `true`, the children with an implicit color prop invert their colors to match the component's variant and color.
   * @default false
   */
  invertedColors: import_prop_types98.default.bool,
  /**
   * When displaying multiple consecutive snackbars using a single parent-rendered
   * `<Snackbar/>`, add the `key` prop to ensure independent treatment of each message.
   * For instance, use `<Snackbar key={message} />`. Otherwise, messages might update
   * in place, and features like `autoHideDuration` could be affected.
   */
  key: () => null,
  /**
   * @ignore
   */
  onBlur: import_prop_types98.default.func,
  /**
   * Callback fired when the component requests to be closed.
   * Typically `onClose` is used to set state in the parent component,
   * which is used to control the `Snackbar` `open` prop.
   * The `reason` parameter can optionally be used to control the response to `onClose`,
   * for example ignoring `clickaway`.
   *
   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.
   * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`, or `"escapeKeyDown"`.
   */
  onClose: import_prop_types98.default.func,
  /**
   * @ignore
   */
  onFocus: import_prop_types98.default.func,
  /**
   * @ignore
   */
  onMouseEnter: import_prop_types98.default.func,
  /**
   * @ignore
   */
  onMouseLeave: import_prop_types98.default.func,
  /**
   * A callback fired when the component is about to be unmounted.
   */
  onUnmount: import_prop_types98.default.func,
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types98.default.bool.isRequired,
  /**
   * The number of milliseconds to wait before dismissing after user interaction.
   * If `autoHideDuration` prop isn't specified, it does nothing.
   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
   * we default to `autoHideDuration / 2` ms.
   */
  resumeHideDuration: import_prop_types98.default.number,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types98.default.oneOf(["sm", "md", "lg"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types98.default.shape({
    clickAway: import_prop_types98.default.oneOfType([import_prop_types98.default.func, import_prop_types98.default.shape({
      children: import_prop_types98.default.element.isRequired,
      disableReactTree: import_prop_types98.default.bool,
      mouseEvent: import_prop_types98.default.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", false]),
      onClickAway: import_prop_types98.default.func.isRequired,
      touchEvent: import_prop_types98.default.oneOf(["onTouchEnd", "onTouchStart", false])
    })]),
    endDecorator: import_prop_types98.default.oneOfType([import_prop_types98.default.func, import_prop_types98.default.object]),
    root: import_prop_types98.default.oneOfType([import_prop_types98.default.func, import_prop_types98.default.object]),
    startDecorator: import_prop_types98.default.oneOfType([import_prop_types98.default.func, import_prop_types98.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types98.default.shape({
    clickAway: import_prop_types98.default.elementType,
    endDecorator: import_prop_types98.default.elementType,
    root: import_prop_types98.default.elementType,
    startDecorator: import_prop_types98.default.elementType
  }),
  /**
   * Element placed before the children.
   */
  startDecorator: import_prop_types98.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types98.default.oneOfType([import_prop_types98.default.arrayOf(import_prop_types98.default.oneOfType([import_prop_types98.default.func, import_prop_types98.default.object, import_prop_types98.default.bool])), import_prop_types98.default.func, import_prop_types98.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types98.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var Snackbar_default = Snackbar3;

// node_modules/@mui/joy/Stepper/Stepper.js
var React182 = __toESM(require_react());
var import_prop_types99 = __toESM(require_prop_types());

// node_modules/@mui/joy/Stepper/stepperClasses.js
function getStepperUtilityClass(slot) {
  return generateUtilityClass2("MuiStepper", slot);
}
var stepperClasses = generateUtilityClasses2("MuiStepper", ["root", "sizeSm", "sizeMd", "sizeLg", "horizontal", "vertical"]);
var stepperClasses_default = stepperClasses;

// node_modules/@mui/joy/Stepper/Stepper.js
var import_jsx_runtime147 = __toESM(require_jsx_runtime());
var _excluded95 = ["className", "component", "size", "children", "orientation", "slots", "slotProps"];
var useUtilityClasses85 = (ownerState) => {
  const {
    size: size3,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation, size3 && `size${capitalize(size3)}`]
  };
  return composeClasses2(slots, getStepperUtilityClass, {});
};
var StepperRoot = styled_default("ol", {
  name: "JoyStepper",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme
}) => {
  return {
    "--Stepper-indicatorColumn": "auto",
    // For vertical stepper, to control the column width of the indicator.
    "--Step-connectorThickness": "1px",
    "--Step-indicatorDotSize": "0.375rem",
    boxSizing: "border-box",
    display: "flex",
    margin: 0,
    // Reset browser default style.
    padding: 0,
    // Reset browser default style.
    variants: [{
      props: {
        size: "sm"
      },
      style: _extends({
        "--Stepper-verticalGap": "0.5rem",
        "--Step-gap": "0.375rem",
        "--Step-connectorInset": "0.25rem",
        "--StepIndicator-size": "1.25rem"
      }, theme.typography["title-sm"])
    }, {
      props: {
        size: "md"
      },
      style: _extends({
        "--Stepper-verticalGap": "0.75rem",
        "--Step-gap": "0.5rem",
        "--Step-connectorInset": "0.375rem",
        "--StepIndicator-size": "1.5rem"
      }, theme.typography["title-md"])
    }, {
      props: {
        size: "lg"
      },
      style: _extends({
        "--Stepper-verticalGap": "0.75rem",
        "--Step-gap": "0.5rem",
        "--Step-connectorInset": "0.5rem",
        "--StepIndicator-size": "1.75rem"
      }, theme.typography["title-lg"])
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        flexDirection: "column",
        gap: "var(--Stepper-verticalGap)"
      }
    }]
  };
});
var Stepper = React182.forwardRef(function Stepper2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyStepper"
  });
  const {
    className,
    component = "ol",
    size: size3 = "md",
    children,
    orientation = "horizontal",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded95);
  const ownerState = _extends({}, props, {
    component,
    orientation,
    size: size3
  });
  const classes = useUtilityClasses85(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: StepperRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime147.jsx)(SlotRoot, _extends({}, rootProps, {
    children: React182.Children.map(children, (child, index2) => {
      if (!React182.isValidElement(child)) {
        return child;
      }
      const extraProps = {};
      if (index2 === 0) {
        extraProps["data-first-child"] = "";
      }
      if (index2 === React182.Children.count(children) - 1) {
        extraProps["data-last-child"] = "";
      }
      return React182.cloneElement(child, extraProps);
    })
  }));
});
true ? Stepper.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the Stepper if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types99.default.node,
  /**
   * @ignore
   */
  className: import_prop_types99.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types99.default.elementType,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types99.default.oneOf(["horizontal", "vertical"]),
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types99.default.oneOfType([import_prop_types99.default.oneOf(["lg", "md", "sm"]), import_prop_types99.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types99.default.shape({
    root: import_prop_types99.default.oneOfType([import_prop_types99.default.func, import_prop_types99.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types99.default.shape({
    root: import_prop_types99.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types99.default.oneOfType([import_prop_types99.default.arrayOf(import_prop_types99.default.oneOfType([import_prop_types99.default.func, import_prop_types99.default.object, import_prop_types99.default.bool])), import_prop_types99.default.func, import_prop_types99.default.object])
} : void 0;
var Stepper_default = Stepper;

// node_modules/@mui/joy/Step/Step.js
var React183 = __toESM(require_react());
var import_prop_types100 = __toESM(require_prop_types());

// node_modules/@mui/joy/Step/stepClasses.js
function getStepUtilityClass(slot) {
  return generateUtilityClass2("MuiStep", slot);
}
var stepClasses = generateUtilityClasses2("MuiStep", ["root", "indicator", "horizontal", "vertical", "active", "completed", "disabled"]);
var stepClasses_default = stepClasses;

// node_modules/@mui/joy/Step/Step.js
var import_jsx_runtime148 = __toESM(require_jsx_runtime());
var import_jsx_runtime149 = __toESM(require_jsx_runtime());
var _excluded96 = ["active", "completed", "className", "component", "children", "disabled", "orientation", "indicator", "slots", "slotProps"];
var useUtilityClasses86 = (ownerState) => {
  const {
    orientation,
    active,
    completed,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", orientation, active && "active", completed && "completed", disabled && "disabled"],
    indicator: ["indicator"]
  };
  return composeClasses2(slots, getStepUtilityClass, {});
};
var StepRoot = styled_default("li", {
  name: "JoyStep",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme
}) => {
  return {
    position: "relative",
    display: "flex",
    gridTemplateColumns: "var(--Stepper-indicatorColumn) 1fr",
    // for vertical stepper. has no effect on horizontal stepper.
    gridAutoFlow: "dense",
    flex: "var(--_Step-flex)",
    flexDirection: "row",
    alignItems: "var(--_Step-alignItems, center)",
    justifyContent: "var(--_Step-justify, center)",
    gap: `var(--Step-gap)`,
    "& > *": {
      zIndex: 1,
      [`&:not(.${stepClasses_default.indicator})`]: {
        gridColumn: "2"
      }
    },
    "&::after": {
      content: '""',
      display: "block",
      borderRadius: "var(--Step-connectorRadius)",
      height: `var(--Step-connectorThickness)`,
      background: `var(--Step-connectorBg, ${theme.vars.palette.divider})`,
      flex: 1,
      marginInlineStart: `calc(var(--Step-connectorInset) - var(--Step-gap))`,
      marginInlineEnd: `var(--Step-connectorInset)`,
      zIndex: 0
    },
    "&[data-last-child]::after": {
      display: "none"
    },
    [`.${stepperClasses_default.horizontal} &:not([data-last-child])`]: {
      "--_Step-flex": "auto",
      // requires to be `auto` to make equally connectors.
      [`&.${stepClasses_default.vertical}`]: {
        "--_Step-flex": 1
        // requires to be `1` to make equally connectors.
      }
    },
    [`.${stepperClasses_default.vertical} &`]: {
      display: "grid",
      "--_Step-justify": "flex-start",
      "&::after": {
        gridColumn: "1",
        width: `var(--Step-connectorThickness)`,
        height: "auto",
        margin: `calc(var(--Step-connectorInset) - var(--Step-gap)) auto calc(var(--Step-connectorInset) - var(--Stepper-verticalGap))`,
        alignSelf: "stretch"
      }
    },
    variants: [{
      props: {
        orientation: "vertical"
      },
      style: {
        flexDirection: "column",
        [`.${stepperClasses_default.horizontal} &`]: {
          "&[data-last-child]": {
            // for horizontal stepper, all vertical steps must have flex `1` to stretch equally.
            "--_Step-flex": 1
          },
          "&[data-indicator]": {
            "--_Step-justify": "flex-start"
          },
          "&::after": {
            margin: 0,
            position: "absolute",
            height: `var(--Step-connectorThickness)`,
            zIndex: 0,
            top: `calc(var(--StepIndicator-size) / 2 - var(--Step-connectorThickness) / 2)`,
            left: `calc(50% + var(--StepIndicator-size) / 2 + var(--Step-connectorInset))`,
            width: `calc(100% - var(--StepIndicator-size) - 2 * var(--Step-connectorInset))`
          },
          // Eventhough `:has` is <90% support, we can use it because this is an edge case for vertical step without an indicator.
          [`&:has(.${stepClasses_default.indicator}:empty)::after`]: {
            "--StepIndicator-size": "0px",
            "--Step-connectorInset": "0px",
            top: `calc(50% - var(--Step-connectorThickness) / 2)`
          }
        }
      }
    }]
  };
});
var StepIndicator = styled_default("div", {
  name: "JoyStep",
  slot: "Indicator",
  overridesResolver: (props, styles2) => styles2.root
})({
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  placeSelf: "center",
  // for vertical stepper
  width: `var(--StepIndicator-size)`,
  height: `var(--StepIndicator-size)`,
  [`.${stepperClasses_default.horizontal} &:empty`]: {
    display: "none"
  },
  [`.${stepperClasses_default.vertical} &:empty`]: {
    height: "auto",
    "&::before": {
      content: '""',
      display: "block",
      width: "var(--Step-indicatorDotSize)",
      height: "var(--Step-indicatorDotSize)",
      borderRadius: "var(--Step-indicatorDotSize)",
      color: "inherit",
      background: "currentColor"
    }
  }
});
var Step = React183.forwardRef(function Step2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyStep"
  });
  const {
    active = false,
    completed = false,
    className,
    component = "li",
    children,
    disabled = false,
    orientation = "horizontal",
    indicator,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded96);
  const ownerState = _extends({}, props, {
    active,
    completed,
    component,
    disabled,
    orientation
  });
  const classes = useUtilityClasses86(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: StepRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      "data-indicator": indicator ? "" : void 0
    }
  });
  const [SlotIndicator, indicatorProps] = useSlot("indicator", {
    ref,
    className: classes.indicator,
    elementType: StepIndicator,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime149.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime148.jsx)(SlotIndicator, _extends({}, indicatorProps, {
      children: indicator
    })), children]
  }));
});
true ? Step.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the active className is appended.
   * You can customize the active state from the Stepper's `sx` prop.
   * @default false
   */
  active: import_prop_types100.default.bool,
  /**
   * Used to render icon or text elements inside the Step if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types100.default.node,
  /**
   * @ignore
   */
  className: import_prop_types100.default.string,
  /**
   * If `true`, the completed className is appended.
   * You can customize the active state from the Stepper's `sx` prop.
   * @default false
   */
  completed: import_prop_types100.default.bool,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types100.default.elementType,
  /**
   * If `true`, the active className is appended.
   * You can customize the active state from the Stepper's `sx` prop.
   * @default false
   */
  disabled: import_prop_types100.default.bool,
  /**
   * The indicator to display. If provided, a wrapper element will be used.
   */
  indicator: import_prop_types100.default.node,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types100.default.oneOf(["horizontal", "vertical"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types100.default.shape({
    indicator: import_prop_types100.default.oneOfType([import_prop_types100.default.func, import_prop_types100.default.object]),
    root: import_prop_types100.default.oneOfType([import_prop_types100.default.func, import_prop_types100.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types100.default.shape({
    indicator: import_prop_types100.default.elementType,
    root: import_prop_types100.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types100.default.oneOfType([import_prop_types100.default.arrayOf(import_prop_types100.default.oneOfType([import_prop_types100.default.func, import_prop_types100.default.object, import_prop_types100.default.bool])), import_prop_types100.default.func, import_prop_types100.default.object])
} : void 0;
var Step_default = Step;

// node_modules/@mui/joy/StepButton/StepButton.js
var React184 = __toESM(require_react());
var import_prop_types101 = __toESM(require_prop_types());

// node_modules/@mui/joy/StepButton/stepButtonClasses.js
function getStepButtonUtilityClass(slot) {
  return generateUtilityClass2("MuiStepButton", slot);
}
var stepButtonClasses = generateUtilityClasses2("MuiStepButton", ["root"]);
var stepButtonClasses_default = stepButtonClasses;

// node_modules/@mui/joy/StepButton/StepButton.js
var import_jsx_runtime150 = __toESM(require_jsx_runtime());
var _excluded97 = ["className", "component", "children", "slots", "slotProps"];
var StepButtonRoot = styled_default("button", {
  name: "JoyStepButton",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme
}) => {
  return {
    [`.${stepClasses_default.indicator}:empty + &`]: {
      "--StepIndicator-size": "0px",
      "--Step-gap": "0px"
    },
    [`.${stepClasses_default.horizontal} &`]: {
      "--_StepButton-alignSelf": "stretch",
      "--_StepButton-gap": "var(--Step-gap)"
    },
    [`.${stepClasses_default.horizontal} &::before`]: {
      "--_StepButton-left": "calc(-1 * (var(--StepIndicator-size) + var(--Step-gap)))"
    },
    [`.${stepClasses_default.vertical} &::before`]: {
      "--_StepButton-top": "calc(-1 * (var(--StepIndicator-size) + var(--Step-gap)))"
    },
    [`.${stepperClasses_default.vertical} .${stepClasses_default.vertical} &`]: {
      "--_StepButton-alignItems": "flex-start"
    },
    [`.${stepperClasses_default.vertical} &::before`]: {
      "--_StepButton-left": "calc(-1 * (var(--StepIndicator-size) + var(--Step-gap)))",
      "--_StepButton-top": "0px"
    },
    WebkitTapHighlightColor: "transparent",
    boxSizing: "border-box",
    border: "none",
    backgroundColor: "transparent",
    cursor: "pointer",
    position: "relative",
    padding: 0,
    textDecoration: "none",
    // prevent user agent underline when used as anchor
    font: "inherit",
    display: "inline-flex",
    flexDirection: "inherit",
    alignItems: "var(--_StepButton-alignItems, inherit)",
    alignSelf: "var(--_StepButton-alignSelf)",
    gap: "var(--_StepButton-gap)",
    [theme.focus.selector]: theme.focus.default,
    "&::before": {
      content: '""',
      display: "block",
      position: "absolute",
      top: "var(--_StepButton-top, 0)",
      right: 0,
      bottom: 0,
      left: "var(--_StepButton-left, 0)"
    }
  };
});
var StepButton = React184.forwardRef(function StepButton2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyStepButton"
  });
  const {
    className,
    component = "button",
    children,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded97);
  const ownerState = _extends({}, props, {
    component
  });
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(stepButtonClasses_default.root, className),
    elementType: StepButtonRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      type: "button"
    }
  });
  return (0, import_jsx_runtime150.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? StepButton.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the StepButton if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types101.default.node,
  /**
   * @ignore
   */
  className: import_prop_types101.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types101.default.elementType,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types101.default.shape({
    root: import_prop_types101.default.oneOfType([import_prop_types101.default.func, import_prop_types101.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types101.default.shape({
    root: import_prop_types101.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types101.default.oneOfType([import_prop_types101.default.arrayOf(import_prop_types101.default.oneOfType([import_prop_types101.default.func, import_prop_types101.default.object, import_prop_types101.default.bool])), import_prop_types101.default.func, import_prop_types101.default.object])
} : void 0;
var StepButton_default = StepButton;

// node_modules/@mui/joy/StepIndicator/StepIndicator.js
var React185 = __toESM(require_react());
var import_prop_types102 = __toESM(require_prop_types());

// node_modules/@mui/joy/StepIndicator/stepIndicatorClasses.js
function getStepIndicatorUtilityClass(slot) {
  return generateUtilityClass2("MuiStepIndicator", slot);
}
var stepIndicatorClasses = generateUtilityClasses2("MuiStepIndicator", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "horizontal", "vertical"]);
var stepIndicatorClasses_default = stepIndicatorClasses;

// node_modules/@mui/joy/StepIndicator/StepIndicator.js
var import_jsx_runtime151 = __toESM(require_jsx_runtime());
var _excluded98 = ["className", "component", "color", "children", "variant", "slots", "slotProps"];
var useUtilityClasses87 = (ownerState) => {
  const {
    color,
    variant
  } = ownerState;
  const slots = {
    root: ["root", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`]
  };
  return composeClasses2(slots, getStepIndicatorUtilityClass, {});
};
var StepIndicatorRoot = styled_default("div", {
  name: "JoyStepIndicator",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return _extends({
    "--Icon-fontSize": "calc(var(--StepIndicator-size, 2rem) / 2)",
    "--Icon-color": "currentColor",
    boxSizing: "border-box",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    font: "inherit",
    borderRadius: "50%",
    width: "var(--StepIndicator-size, 1.5rem)",
    height: "var(--StepIndicator-size, 1.5rem)"
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
var StepIndicator2 = React185.forwardRef(function StepIndicator3(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyStepIndicator"
  });
  const {
    className,
    component = "div",
    color = "neutral",
    children,
    variant = "soft",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded98);
  const ownerState = _extends({}, props, {
    component,
    color,
    variant
  });
  const classes = useUtilityClasses87(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: StepIndicatorRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime151.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? StepIndicator2.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the StepIndicator if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types102.default.node,
  /**
   * @ignore
   */
  className: import_prop_types102.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types102.default.oneOfType([import_prop_types102.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types102.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types102.default.elementType,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types102.default.shape({
    root: import_prop_types102.default.oneOfType([import_prop_types102.default.func, import_prop_types102.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types102.default.shape({
    root: import_prop_types102.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types102.default.oneOfType([import_prop_types102.default.arrayOf(import_prop_types102.default.oneOfType([import_prop_types102.default.func, import_prop_types102.default.object, import_prop_types102.default.bool])), import_prop_types102.default.func, import_prop_types102.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'soft'
   */
  variant: import_prop_types102.default.oneOfType([import_prop_types102.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types102.default.string])
} : void 0;
var StepIndicator_default = StepIndicator2;

// node_modules/@mui/joy/Stack/Stack.js
var import_prop_types103 = __toESM(require_prop_types());
var Stack = createStack({
  createStyledComponent: styled_default("div", {
    name: "JoyStack",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  }),
  useThemeProps: (inProps) => useThemeProps2({
    props: inProps,
    name: "JoyStack"
  })
});
true ? Stack.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types103.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types103.default.elementType,
  /**
   * Defines the `flex-direction` style property.
   * It is applied for all screen sizes.
   * @default 'column'
   */
  direction: import_prop_types103.default.oneOfType([import_prop_types103.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types103.default.arrayOf(import_prop_types103.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types103.default.object]),
  /**
   * Add an element between each child.
   */
  divider: import_prop_types103.default.node,
  /**
   * Defines the space between immediate children.
   * @default 0
   */
  spacing: import_prop_types103.default.oneOfType([import_prop_types103.default.arrayOf(import_prop_types103.default.oneOfType([import_prop_types103.default.number, import_prop_types103.default.string])), import_prop_types103.default.number, import_prop_types103.default.object, import_prop_types103.default.string]),
  /**
   * The system prop, which allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types103.default.oneOfType([import_prop_types103.default.arrayOf(import_prop_types103.default.oneOfType([import_prop_types103.default.func, import_prop_types103.default.object, import_prop_types103.default.bool])), import_prop_types103.default.func, import_prop_types103.default.object]),
  /**
   * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
   *
   * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
   * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
   *
   * To enable this flag globally, follow the [theme's default props](https://mui.com/joy-ui/customization/themed-components/#default-props) configuration.
   * @default false
   */
  useFlexGap: import_prop_types103.default.bool
} : void 0;
var Stack_default = Stack;

// node_modules/@mui/joy/Stack/stackClasses.js
function getStackUtilityClass(slot) {
  return generateUtilityClass2("MuiStack", slot);
}
var stackClasses = generateUtilityClasses2("MuiStack", ["root"]);
var stackClasses_default = stackClasses;

// node_modules/@mui/joy/Switch/Switch.js
var React186 = __toESM(require_react());
var import_prop_types104 = __toESM(require_prop_types());
var import_jsx_runtime152 = __toESM(require_jsx_runtime());
var import_jsx_runtime153 = __toESM(require_jsx_runtime());
var _excluded99 = ["checked", "defaultChecked", "disabled", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required", "id", "color", "variant", "size", "startDecorator", "endDecorator", "component", "slots", "slotProps"];
var useUtilityClasses88 = (ownerState) => {
  const {
    checked,
    disabled,
    focusVisible,
    readOnly,
    color,
    variant,
    size: size3
  } = ownerState;
  const slots = {
    root: ["root", checked && "checked", disabled && "disabled", focusVisible && "focusVisible", readOnly && "readOnly", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`],
    thumb: ["thumb", checked && "checked"],
    track: ["track", checked && "checked"],
    action: ["action", focusVisible && "focusVisible"],
    input: ["input"],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses2(slots, getSwitchUtilityClass2, {});
};
var switchColorVariables = ({
  theme,
  ownerState
}) => (data = {}) => {
  var _theme$variants, _styles$backgroundCol, _styles$backgroundCol2;
  const styles2 = ((_theme$variants = theme.variants[`${ownerState.variant}${data.state || ""}`]) == null ? void 0 : _theme$variants[ownerState.color]) || {};
  return {
    "--Switch-trackBackground": (_styles$backgroundCol = styles2.backgroundColor) != null ? _styles$backgroundCol : theme.vars.palette.background.surface,
    "--Switch-trackColor": styles2.color,
    "--Switch-trackBorderColor": ownerState.variant === "outlined" ? styles2.borderColor : "currentColor",
    "--Switch-thumbBackground": styles2.color,
    "--Switch-thumbColor": (_styles$backgroundCol2 = styles2.backgroundColor) != null ? _styles$backgroundCol2 : theme.vars.palette.background.surface
  };
};
var SwitchRoot = styled_default("div", {
  name: "JoySwitch",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants2;
  const getColorVariables = switchColorVariables({
    theme,
    ownerState
  });
  return _extends({
    "--Icon-color": "currentColor",
    "--variant-borderWidth": (_theme$variants2 = theme.variants[ownerState.variant]) == null || (_theme$variants2 = _theme$variants2[ownerState.color]) == null ? void 0 : _theme$variants2["--variant-borderWidth"],
    "--Switch-trackRadius": theme.vars.radius.xl,
    "--Switch-thumbShadow": ownerState.variant === "soft" ? "none" : "0 0 0 1px var(--Switch-trackBackground)"
  }, ownerState.size === "sm" && {
    "--Switch-trackWidth": "26px",
    "--Switch-trackHeight": "16px",
    "--Switch-thumbSize": "10px",
    fontSize: theme.vars.fontSize.sm,
    gap: "var(--Switch-gap, 6px)"
  }, ownerState.size === "md" && {
    "--Switch-trackWidth": "32px",
    "--Switch-trackHeight": "20px",
    "--Switch-thumbSize": "14px",
    fontSize: theme.vars.fontSize.md,
    gap: "var(--Switch-gap, 8px)"
  }, ownerState.size === "lg" && {
    "--Switch-trackWidth": "40px",
    "--Switch-trackHeight": "24px",
    "--Switch-thumbSize": "18px",
    gap: "var(--Switch-gap, 12px)"
  }, {
    "--unstable_paddingBlock": `max((var(--Switch-trackHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Switch-thumbSize)) / 2, 0px)`,
    "--Switch-thumbRadius": `max(var(--Switch-trackRadius) - var(--unstable_paddingBlock), min(var(--unstable_paddingBlock) / 2, var(--Switch-trackRadius) / 2))`,
    "--Switch-thumbWidth": "var(--Switch-thumbSize)",
    "--Switch-thumbOffset": `max((var(--Switch-trackHeight) - var(--Switch-thumbSize)) / 2, 0px)`
  }, getColorVariables(), {
    "&:hover": {
      "@media (hover: hover)": _extends({}, getColorVariables({
        state: "Hover"
      }))
    },
    [`&.${switchClasses_default.checked}`]: _extends({}, getColorVariables(), {
      "&:hover": {
        "@media (hover: hover)": _extends({}, getColorVariables({
          state: "Hover"
        }))
      }
    }),
    [`&.${switchClasses_default.disabled}`]: _extends({
      pointerEvents: "none",
      color: theme.vars.palette.text.tertiary
    }, getColorVariables({
      state: "Disabled"
    })),
    display: "inline-flex",
    alignItems: "center",
    alignSelf: "center",
    fontFamily: theme.vars.fontFamily.body,
    position: "relative",
    padding: "calc((var(--Switch-thumbSize) / 2) - (var(--Switch-trackHeight) / 2)) calc(-1 * var(--Switch-thumbOffset))",
    backgroundColor: "initial",
    // clear background in case `outlined` variant contain background.
    border: "none",
    margin: "var(--unstable_Switch-margin)"
  });
});
var SwitchAction = styled_default("div", {
  name: "JoySwitch",
  slot: "Action",
  overridesResolver: (props, styles2) => styles2.action
})(({
  theme
}) => ({
  borderRadius: "var(--Switch-trackRadius)",
  position: "absolute",
  top: 0,
  left: 0,
  bottom: 0,
  right: 0,
  [theme.focus.selector]: theme.focus.default
}));
var SwitchInput = styled_default("input", {
  name: "JoySwitch",
  slot: "Input",
  overridesResolver: (props, styles2) => styles2.input
})({
  margin: 0,
  height: "100%",
  width: "100%",
  opacity: 0,
  position: "absolute",
  cursor: "pointer"
});
var SwitchTrack = styled_default("span", {
  name: "JoySwitch",
  slot: "Track",
  overridesResolver: (props, styles2) => styles2.track
})(({
  theme,
  ownerState
}) => _extends({
  position: "relative",
  color: "var(--Switch-trackColor)",
  height: "var(--Switch-trackHeight)",
  width: "var(--Switch-trackWidth)",
  display: "flex",
  flexShrink: 0,
  justifyContent: "space-between",
  alignItems: "center",
  boxSizing: "border-box",
  border: "var(--variant-borderWidth, 0px) solid",
  borderColor: "var(--Switch-trackBorderColor)",
  backgroundColor: "var(--Switch-trackBackground)",
  borderRadius: "var(--Switch-trackRadius)",
  fontFamily: theme.vars.fontFamily.body
}, ownerState.size === "sm" && {
  fontSize: theme.vars.fontSize.xs
}, ownerState.size === "md" && {
  fontSize: theme.vars.fontSize.sm
}, ownerState.size === "lg" && {
  fontSize: theme.vars.fontSize.md
}));
var SwitchThumb = styled_default("span", {
  name: "JoySwitch",
  slot: "Thumb",
  overridesResolver: (props, styles2) => styles2.thumb
})({
  "--Icon-fontSize": "calc(var(--Switch-thumbSize) * 0.75)",
  display: "inline-flex",
  justifyContent: "center",
  alignItems: "center",
  position: "absolute",
  top: "50%",
  left: "calc(50% - var(--Switch-trackWidth) / 2 + var(--Switch-thumbWidth) / 2 + var(--Switch-thumbOffset))",
  transform: "translate(-50%, -50%)",
  width: "var(--Switch-thumbWidth)",
  height: "var(--Switch-thumbSize)",
  borderRadius: "var(--Switch-thumbRadius)",
  boxShadow: "var(--Switch-thumbShadow)",
  color: "var(--Switch-thumbColor)",
  backgroundColor: "var(--Switch-thumbBackground)",
  [`&.${switchClasses_default.checked}`]: {
    left: "calc(50% + var(--Switch-trackWidth) / 2 - var(--Switch-thumbWidth) / 2 - var(--Switch-thumbOffset))"
  }
});
var SwitchStartDecorator = styled_default("span", {
  name: "JoySwitch",
  slot: "StartDecorator",
  overridesResolver: (props, styles2) => styles2.startDecorator
})({
  display: "inline-flex"
});
var SwitchEndDecorator = styled_default("span", {
  name: "JoySwitch",
  slot: "EndDecorator",
  overridesResolver: (props, styles2) => styles2.endDecorator
})({
  display: "inline-flex"
});
var Switch3 = React186.forwardRef(function Switch4(inProps, ref) {
  var _ref, _inProps$size, _inProps$color, _formControl$color, _ref2, _inProps$disabled;
  const props = useThemeProps2({
    props: inProps,
    name: "JoySwitch"
  });
  const {
    disabled: disabledExternalProp,
    id,
    color: colorProp,
    variant = "solid",
    size: sizeProp = "md",
    startDecorator,
    endDecorator,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded99);
  const formControl = React186.useContext(FormControlContext_default);
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React186.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const size3 = (_ref = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref : sizeProp;
  const color = (_inProps$color = inProps.color) != null ? _inProps$color : formControl != null && formControl.error ? "danger" : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp;
  const useSwitchProps = _extends({
    disabled: (_ref2 = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : formControl == null ? void 0 : formControl.disabled) != null ? _ref2 : disabledExternalProp
  }, props);
  const {
    getInputProps,
    checked,
    disabled,
    focusVisible,
    readOnly
  } = useSwitch(useSwitchProps);
  const ownerState = _extends({}, props, {
    id,
    checked,
    disabled,
    focusVisible,
    readOnly,
    color: checked ? color || "primary" : color || "neutral",
    variant,
    size: size3
  });
  const classes = useUtilityClasses88(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: SwitchRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    additionalProps: {
      "aria-hidden": true
      // hide the decorator from assistive technology
    },
    className: classes.startDecorator,
    elementType: SwitchStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    additionalProps: {
      "aria-hidden": true
      // hide the decorator from assistive technology
    },
    className: classes.endDecorator,
    elementType: SwitchEndDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotTrack, trackProps] = useSlot("track", {
    className: classes.track,
    elementType: SwitchTrack,
    externalForwardedProps,
    ownerState
  });
  const [SlotThumb, thumbProps] = useSlot("thumb", {
    className: classes.thumb,
    elementType: SwitchThumb,
    externalForwardedProps,
    ownerState
  });
  const [SlotAction, actionProps] = useSlot("action", {
    className: classes.action,
    elementType: SwitchAction,
    externalForwardedProps,
    ownerState
  });
  const [SlotInput, inputProps] = useSlot("input", {
    additionalProps: {
      id: id != null ? id : formControl == null ? void 0 : formControl.htmlFor,
      "aria-describedby": formControl == null ? void 0 : formControl["aria-describedby"]
    },
    className: classes.input,
    elementType: SwitchInput,
    externalForwardedProps,
    getSlotProps: getInputProps,
    ownerState
  });
  return (0, import_jsx_runtime153.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [startDecorator && (0, import_jsx_runtime152.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
      children: typeof startDecorator === "function" ? startDecorator(ownerState) : startDecorator
    })), (0, import_jsx_runtime153.jsxs)(SlotTrack, _extends({}, trackProps, {
      children: [trackProps == null ? void 0 : trackProps.children, (0, import_jsx_runtime152.jsx)(SlotThumb, _extends({}, thumbProps))]
    })), (0, import_jsx_runtime152.jsx)(SlotAction, _extends({}, actionProps, {
      children: (0, import_jsx_runtime152.jsx)(SlotInput, _extends({}, inputProps))
    })), endDecorator && (0, import_jsx_runtime152.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
      children: typeof endDecorator === "function" ? endDecorator(ownerState) : endDecorator
    }))]
  }));
});
true ? Switch3.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the component is checked.
   */
  checked: import_prop_types104.default.bool,
  /**
   * @ignore
   */
  children: import_prop_types104.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types104.default.oneOfType([import_prop_types104.default.oneOf(["danger", "primary", "success", "warning"]), import_prop_types104.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types104.default.elementType,
  /**
   * The default checked state. Use when the component is not controlled.
   */
  defaultChecked: import_prop_types104.default.bool,
  /**
   * If `true`, the component is disabled.
   */
  disabled: import_prop_types104.default.bool,
  /**
   * The element that appears at the end of the switch.
   */
  endDecorator: import_prop_types104.default.oneOfType([import_prop_types104.default.node, import_prop_types104.default.func]),
  /**
   * @ignore
   */
  id: import_prop_types104.default.string,
  /**
   * @ignore
   */
  onBlur: import_prop_types104.default.func,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: import_prop_types104.default.func,
  /**
   * @ignore
   */
  onFocus: import_prop_types104.default.func,
  /**
   * @ignore
   */
  onFocusVisible: import_prop_types104.default.func,
  /**
   * If `true`, the component is read only.
   */
  readOnly: import_prop_types104.default.bool,
  /**
   * If `true`, the `input` element is required.
   */
  required: import_prop_types104.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types104.default.oneOfType([import_prop_types104.default.oneOf(["sm", "md", "lg"]), import_prop_types104.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types104.default.shape({
    action: import_prop_types104.default.oneOfType([import_prop_types104.default.func, import_prop_types104.default.object]),
    endDecorator: import_prop_types104.default.oneOfType([import_prop_types104.default.func, import_prop_types104.default.object]),
    input: import_prop_types104.default.oneOfType([import_prop_types104.default.func, import_prop_types104.default.object]),
    root: import_prop_types104.default.oneOfType([import_prop_types104.default.func, import_prop_types104.default.object]),
    startDecorator: import_prop_types104.default.oneOfType([import_prop_types104.default.func, import_prop_types104.default.object]),
    thumb: import_prop_types104.default.oneOfType([import_prop_types104.default.func, import_prop_types104.default.object]),
    track: import_prop_types104.default.oneOfType([import_prop_types104.default.func, import_prop_types104.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types104.default.shape({
    action: import_prop_types104.default.elementType,
    endDecorator: import_prop_types104.default.elementType,
    input: import_prop_types104.default.elementType,
    root: import_prop_types104.default.elementType,
    startDecorator: import_prop_types104.default.elementType,
    thumb: import_prop_types104.default.elementType,
    track: import_prop_types104.default.elementType
  }),
  /**
   * The element that appears at the end of the switch.
   */
  startDecorator: import_prop_types104.default.oneOfType([import_prop_types104.default.node, import_prop_types104.default.func]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types104.default.oneOfType([import_prop_types104.default.arrayOf(import_prop_types104.default.oneOfType([import_prop_types104.default.func, import_prop_types104.default.object, import_prop_types104.default.bool])), import_prop_types104.default.func, import_prop_types104.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'solid'
   */
  variant: import_prop_types104.default.oneOfType([import_prop_types104.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types104.default.string])
} : void 0;
var Switch_default = Switch3;

// node_modules/@mui/joy/Tab/Tab.js
var React187 = __toESM(require_react());
var import_prop_types105 = __toESM(require_prop_types());

// node_modules/@mui/joy/Tab/tabClasses.js
function getTabUtilityClass2(slot) {
  return generateUtilityClass2("MuiTab", slot);
}
var tabListClasses = generateUtilityClasses2("MuiTab", ["root", "disabled", "focusVisible", "selected", "horizontal", "vertical", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var tabClasses_default = tabListClasses;

// node_modules/@mui/joy/Tab/Tab.js
var import_jsx_runtime154 = __toESM(require_jsx_runtime());
var _excluded100 = ["action", "children", "value", "disabled", "onChange", "onClick", "onFocus", "component", "orientation", "variant", "color", "disableIndicator", "indicatorPlacement", "indicatorInset", "slots", "slotProps"];
var useUtilityClasses89 = (ownerState) => {
  const {
    selected,
    disabled,
    focusVisible,
    variant,
    color,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation, disabled && "disabled", focusVisible && "focusVisible", selected && "selected", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses2(slots, getTabUtilityClass2, {});
};
var TabRoot = styled_default(StyledListItemButton, {
  name: "JoyTab",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  ownerState
}) => [
  {
    flex: "initial",
    justifyContent: ownerState.row ? "center" : "initial",
    "--unstable_ListItemDecorator-alignItems": "center",
    "--unstable_offset": "min(calc(-1 * var(--variant-borderWidth, 0px)), -1px)"
  },
  !ownerState.disableIndicator && {
    '&[aria-selected="true"]': {
      "--Tab-indicatorColor": "currentColor",
      zIndex: 1
      // to stay above other tab elements
    },
    // using pseudo element for showing active indicator is best for controlling the size and customization.
    // for example, developers can customize the radius, width or background.
    // (border and box-shadow are not flexible when it comes to customization).
    "&::after": {
      content: '""',
      display: "block",
      position: "absolute",
      margin: "auto",
      background: "var(--Tab-indicatorColor)",
      borderRadius: "var(--Tab-indicatorRadius)"
    }
  },
  // the padding is to account for the indicator's thickness to make the text proportional.
  !ownerState.disableIndicator && ownerState.indicatorPlacement === "bottom" && {
    paddingBottom: "calc(var(--ListItem-paddingY) - var(--variant-borderWidth, 0px) + var(--Tab-indicatorThickness) - 1px)",
    "&::after": {
      height: "var(--Tab-indicatorThickness)",
      width: "var(--Tab-indicatorSize)",
      left: ownerState.indicatorInset ? "var(--ListItem-paddingLeft)" : "var(--unstable_offset)",
      right: ownerState.indicatorInset ? "var(--ListItem-paddingRight)" : "var(--unstable_offset)",
      bottom: "calc(-1px - var(--unstable_TabList-underlineBottom, 0px))"
    }
  },
  !ownerState.disableIndicator && ownerState.indicatorPlacement === "top" && {
    paddingTop: "calc(var(--ListItem-paddingY) - var(--variant-borderWidth, 0px) + var(--Tab-indicatorThickness) - 1px)",
    "&::after": {
      height: "var(--Tab-indicatorThickness)",
      width: "var(--Tab-indicatorSize)",
      left: ownerState.indicatorInset ? "var(--ListItem-paddingLeft)" : "var(--unstable_offset)",
      right: ownerState.indicatorInset ? "var(--ListItem-paddingRight)" : "var(--unstable_offset)",
      top: "calc(-1px - var(--unstable_TabList-underlineTop, 0px))"
    }
  },
  !ownerState.disableIndicator && ownerState.indicatorPlacement === "right" && {
    paddingRight: "calc(var(--ListItem-paddingRight) + var(--Tab-indicatorThickness) - 1px)",
    "&::after": {
      height: "var(--Tab-indicatorSize)",
      width: "var(--Tab-indicatorThickness)",
      top: ownerState.indicatorInset ? "var(--ListItem-paddingY)" : "var(--unstable_offset)",
      bottom: ownerState.indicatorInset ? "var(--ListItem-paddingY)" : "var(--unstable_offset)",
      right: "calc(-1px - var(--unstable_TabList-underlineRight, 0px))"
    }
  },
  !ownerState.disableIndicator && ownerState.indicatorPlacement === "left" && {
    paddingLeft: "calc(var(--ListItem-paddingLeft) + var(--Tab-indicatorThickness) - 1px)",
    "&::after": {
      height: "var(--Tab-indicatorSize)",
      width: "var(--Tab-indicatorThickness)",
      top: ownerState.indicatorInset ? "var(--ListItem-paddingY)" : "var(--unstable_offset)",
      bottom: ownerState.indicatorInset ? "var(--ListItem-paddingY)" : "var(--unstable_offset)",
      left: "calc(-1px - var(--unstable_TabList-underlineLeft, 0px))"
    }
  }
]);
var Tab3 = React187.forwardRef(function Tab4(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyTab"
  });
  const row = React187.useContext(RowListContext_default);
  const {
    action,
    children,
    disabled = false,
    component = "button",
    orientation = "horizontal",
    variant = "plain",
    color = "neutral",
    disableIndicator = false,
    indicatorPlacement = row ? "bottom" : "right",
    indicatorInset = false,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded100);
  const tabRef = React187.useRef(null);
  const handleRef = useForkRef(tabRef, ref);
  const {
    active,
    focusVisible,
    setFocusVisible,
    selected,
    getRootProps
  } = useTab(_extends({}, props, {
    rootRef: handleRef
  }));
  React187.useImperativeHandle(action, () => ({
    focusVisible: () => {
      setFocusVisible(true);
      tabRef.current.focus();
    }
  }), [setFocusVisible]);
  const ownerState = _extends({}, props, {
    disableIndicator,
    indicatorPlacement,
    indicatorInset,
    orientation,
    row,
    active,
    focusVisible,
    disabled,
    selected,
    variant,
    color
  });
  const classes = useUtilityClasses89(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: TabRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime154.jsx)(ListItemButtonOrientationContext_default.Provider, {
    value: orientation,
    children: (0, import_jsx_runtime154.jsx)(SlotRoot, _extends({}, rootProps, {
      children
    }))
  });
});
true ? Tab3.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */
  action: import_prop_types105.default.oneOfType([import_prop_types105.default.func, import_prop_types105.default.shape({
    current: import_prop_types105.default.shape({
      focusVisible: import_prop_types105.default.func.isRequired
    })
  })]),
  /**
   * @ignore
   */
  children: import_prop_types105.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types105.default.oneOfType([import_prop_types105.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types105.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types105.default.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types105.default.bool,
  /**
   * If `true`, the pseudo element indicator is hidden.
   * @default false
   */
  disableIndicator: import_prop_types105.default.bool,
  /**
   * If `true`, the indicator stay within the padding based on the `Tabs` orientation.
   * @default false
   */
  indicatorInset: import_prop_types105.default.bool,
  /**
   * The indicator's position when the Tab is selected.
   * @default row ? 'bottom' : 'right'
   */
  indicatorPlacement: import_prop_types105.default.oneOf(["bottom", "left", "right", "top"]),
  /**
   * Callback invoked when new value is being set.
   */
  onChange: import_prop_types105.default.func,
  /**
   * @ignore
   */
  onClick: import_prop_types105.default.func,
  /**
   * @ignore
   */
  onFocus: import_prop_types105.default.func,
  /**
   * The content direction flow.
   * @default 'horizontal'
   */
  orientation: import_prop_types105.default.oneOf(["horizontal", "vertical"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types105.default.shape({
    root: import_prop_types105.default.oneOfType([import_prop_types105.default.func, import_prop_types105.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types105.default.shape({
    root: import_prop_types105.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types105.default.oneOfType([import_prop_types105.default.arrayOf(import_prop_types105.default.oneOfType([import_prop_types105.default.func, import_prop_types105.default.object, import_prop_types105.default.bool])), import_prop_types105.default.func, import_prop_types105.default.object]),
  /**
   * You can provide your own value. Otherwise, it falls back to the child position index.
   */
  value: import_prop_types105.default.oneOfType([import_prop_types105.default.number, import_prop_types105.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types105.default.oneOfType([import_prop_types105.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types105.default.string])
} : void 0;
var Tab_default = Tab3;

// node_modules/@mui/joy/Table/Table.js
var React188 = __toESM(require_react());
var import_prop_types106 = __toESM(require_prop_types());

// node_modules/@mui/joy/Table/tableClasses.js
function getTableUtilityClass(slot) {
  return generateUtilityClass2("MuiTable", slot);
}
var tableClasses = generateUtilityClasses2("MuiTable", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "stickyHeader", "stickyFooter", "noWrap", "hoverRow", "borderAxisNone", "borderAxisX", "borderAxisXBetween", "borderAxisY", "borderAxisYBetween", "borderAxisBoth", "borderAxisBothBetween"]);
var tableClasses_default = tableClasses;

// node_modules/@mui/joy/Table/Table.js
var import_jsx_runtime155 = __toESM(require_jsx_runtime());
var _excluded101 = ["className", "component", "children", "borderAxis", "hoverRow", "noWrap", "size", "variant", "color", "stripe", "stickyHeader", "stickyFooter", "slots", "slotProps"];
var useUtilityClasses90 = (ownerState) => {
  const {
    size: size3,
    variant,
    color,
    borderAxis,
    stickyHeader,
    stickyFooter,
    noWrap,
    hoverRow
  } = ownerState;
  const slots = {
    root: ["root", stickyHeader && "stickyHeader", stickyFooter && "stickyFooter", noWrap && "noWrap", hoverRow && "hoverRow", borderAxis && `borderAxis${capitalize(borderAxis)}`, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`]
  };
  return composeClasses2(slots, getTableUtilityClass, {});
};
var tableSelector = {
  /**
   * According to https://www.w3.org/TR/2014/REC-html5-20141028/tabular-data.html#the-tr-element,
   * `tr` can only have `td | th` as children, so using :first-of-type is better than :first-child to prevent emotion SSR warning
   */
  getColumnExceptFirst() {
    return "& tr > *:not(:first-of-type), & tr > th + td, & tr > td + th";
  },
  /**
   * Every cell in the table
   */
  getCell() {
    return "& th, & td";
  },
  /**
   * `th` cell of the table (could exist in the body)
   */
  getHeadCell() {
    return "& th";
  },
  /**
   * Only the cell of `thead`
   */
  getHeaderCell() {
    return "& thead th";
  },
  getHeaderCellOfRow(row) {
    return `& thead tr:nth-of-type(${row}) th`;
  },
  getBottomHeaderCell() {
    return "& thead th:not([colspan])";
  },
  getHeaderNestedFirstColumn() {
    return "& thead tr:not(:first-of-type) th:not([colspan]):first-of-type";
  },
  /**
   * The body cell that contains data
   */
  getDataCell() {
    return "& td";
  },
  getDataCellExceptLastRow() {
    return "& tr:not(:last-of-type) > td";
  },
  /**
   * The body cell either `td` or `th`
   */
  getBodyCellExceptLastRow() {
    return `${this.getDataCellExceptLastRow()}, & tr:not(:last-of-type) > th[scope="row"]`;
  },
  getBodyCellOfRow(row) {
    if (typeof row === "number" && row < 0) {
      return `& tbody tr:nth-last-of-type(${Math.abs(row)}) td, & tbody tr:nth-last-of-type(${Math.abs(row)}) th[scope="row"]`;
    }
    return `& tbody tr:nth-of-type(${row}) td, & tbody tr:nth-of-type(${row}) th[scope="row"]`;
  },
  getBodyRow(row) {
    if (row === void 0) {
      return `& tbody tr`;
    }
    return `& tbody tr:nth-of-type(${row})`;
  },
  getFooterCell() {
    return "& tfoot th, & tfoot td";
  },
  getFooterFirstRowCell() {
    return `& tfoot tr:not(:last-of-type) th, & tfoot tr:not(:last-of-type) td`;
  }
};
var TableRoot = styled_default("table", {
  name: "JoyTable",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _variantStyle$borderC, _theme$variants2, _ownerState$borderAxi, _ownerState$borderAxi2, _ownerState$borderAxi3, _ownerState$borderAxi4;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return [_extends({
    "--Table-headerUnderlineThickness": "2px",
    "--TableCell-borderColor": (_variantStyle$borderC = variantStyle == null ? void 0 : variantStyle.borderColor) != null ? _variantStyle$borderC : theme.vars.palette.divider,
    "--TableCell-headBackground": `var(--Sheet-background, ${theme.vars.palette.background.surface})`
  }, ownerState.size === "sm" && {
    "--unstable_TableCell-height": "var(--TableCell-height, 32px)",
    "--TableCell-paddingX": "0.25rem",
    "--TableCell-paddingY": "0.25rem"
  }, ownerState.size === "md" && {
    "--unstable_TableCell-height": "var(--TableCell-height, 40px)",
    "--TableCell-paddingX": "0.5rem",
    "--TableCell-paddingY": "0.375rem"
  }, ownerState.size === "lg" && {
    "--unstable_TableCell-height": "var(--TableCell-height, 48px)",
    "--TableCell-paddingX": "0.75rem",
    "--TableCell-paddingY": "0.5rem"
  }, {
    tableLayout: "fixed",
    width: "100%",
    borderSpacing: "0px",
    borderCollapse: "separate",
    borderRadius: "var(--TableCell-cornerRadius, var(--unstable_actionRadius))"
  }, theme.typography[`body-${{
    sm: "xs",
    md: "sm",
    lg: "md"
  }[ownerState.size]}`], (_theme$variants2 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants2[ownerState.color], {
    "& caption": {
      color: theme.vars.palette.text.tertiary,
      padding: "calc(2 * var(--TableCell-paddingY)) var(--TableCell-paddingX)"
    },
    [tableSelector.getDataCell()]: _extends({
      padding: "var(--TableCell-paddingY) var(--TableCell-paddingX)",
      height: "var(--unstable_TableCell-height)",
      borderColor: "var(--TableCell-borderColor)",
      // must come after border bottom
      backgroundColor: "var(--TableCell-dataBackground)"
    }, ownerState.noWrap && {
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    }),
    [tableSelector.getHeadCell()]: {
      textAlign: "left",
      padding: "var(--TableCell-paddingY) var(--TableCell-paddingX)",
      backgroundColor: "var(--TableCell-headBackground)",
      // use `background-color` in case the Sheet has gradient background
      height: "var(--unstable_TableCell-height)",
      fontWeight: theme.vars.fontWeight.lg,
      borderColor: "var(--TableCell-borderColor)",
      color: theme.vars.palette.text.secondary,
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    },
    [tableSelector.getHeaderCell()]: {
      verticalAlign: "bottom",
      // Automatic radius adjustment with Sheet
      "&:first-of-type": {
        borderTopLeftRadius: "var(--TableCell-cornerRadius, var(--unstable_actionRadius))"
      },
      "&:last-of-type": {
        borderTopRightRadius: "var(--TableCell-cornerRadius, var(--unstable_actionRadius))"
      }
    },
    "& tfoot tr > *": {
      backgroundColor: `var(--TableCell-footBackground, ${theme.vars.palette.background.level1})`,
      // Automatic radius adjustment with Sheet
      "&:first-of-type": {
        borderBottomLeftRadius: "var(--TableCell-cornerRadius, var(--unstable_actionRadius))"
      },
      "&:last-of-type": {
        borderBottomRightRadius: "var(--TableCell-cornerRadius, var(--unstable_actionRadius))"
      }
    }
  }), (((_ownerState$borderAxi = ownerState.borderAxis) == null ? void 0 : _ownerState$borderAxi.startsWith("x")) || ((_ownerState$borderAxi2 = ownerState.borderAxis) == null ? void 0 : _ownerState$borderAxi2.startsWith("both"))) && {
    // insert border between rows
    [tableSelector.getHeaderCell()]: {
      borderBottomWidth: 1,
      borderBottomStyle: "solid"
    },
    [tableSelector.getBottomHeaderCell()]: {
      borderBottomWidth: "var(--Table-headerUnderlineThickness)",
      borderBottomStyle: "solid"
    },
    [tableSelector.getBodyCellExceptLastRow()]: {
      borderBottomWidth: 1,
      borderBottomStyle: "solid"
    },
    [tableSelector.getFooterCell()]: {
      borderTopWidth: 1,
      borderTopStyle: "solid"
    }
  }, (((_ownerState$borderAxi3 = ownerState.borderAxis) == null ? void 0 : _ownerState$borderAxi3.startsWith("y")) || ((_ownerState$borderAxi4 = ownerState.borderAxis) == null ? void 0 : _ownerState$borderAxi4.startsWith("both"))) && {
    // insert border between columns
    [`${tableSelector.getColumnExceptFirst()}, ${tableSelector.getHeaderNestedFirstColumn()}`]: {
      borderLeftWidth: 1,
      borderLeftStyle: "solid"
    }
  }, (ownerState.borderAxis === "x" || ownerState.borderAxis === "both") && {
    // insert border at the top of header and bottom of body
    [tableSelector.getHeaderCellOfRow(1)]: {
      borderTopWidth: 1,
      borderTopStyle: "solid"
    },
    [tableSelector.getBodyCellOfRow(-1)]: {
      borderBottomWidth: 1,
      borderBottomStyle: "solid"
    },
    [tableSelector.getFooterCell()]: {
      borderBottomWidth: 1,
      borderBottomStyle: "solid"
    }
  }, (ownerState.borderAxis === "y" || ownerState.borderAxis === "both") && {
    // insert border on the left of first column and right of the last column
    "& tr > *:first-of-type": {
      borderLeftWidth: 1,
      borderLeftStyle: "solid"
    },
    "& tr > *:last-of-type:not(:first-of-type)": {
      borderRightWidth: 1,
      borderRightStyle: "solid"
    }
  }, ownerState.stripe && {
    [tableSelector.getBodyRow(ownerState.stripe)]: {
      // For customization, a table cell can look for this variable with a fallback value.
      background: `var(--TableRow-stripeBackground, ${theme.vars.palette.background.level2})`,
      color: theme.vars.palette.text.primary
    }
  }, ownerState.hoverRow && {
    [tableSelector.getBodyRow()]: {
      "&:hover": {
        background: `var(--TableRow-hoverBackground, ${theme.vars.palette.background.level3})`
      }
    }
  }, ownerState.stickyHeader && {
    // The column header
    [tableSelector.getHeaderCell()]: {
      position: "sticky",
      top: 0,
      zIndex: theme.vars.zIndex.table
    },
    [tableSelector.getHeaderCellOfRow(2)]: {
      // support upto 2 rows for the sticky header
      top: "var(--unstable_TableCell-height)"
    }
  }, ownerState.stickyFooter && {
    // The column header
    [tableSelector.getFooterCell()]: {
      position: "sticky",
      bottom: 0,
      zIndex: theme.vars.zIndex.table,
      color: theme.vars.palette.text.secondary,
      fontWeight: theme.vars.fontWeight.lg
    },
    [tableSelector.getFooterFirstRowCell()]: {
      // support upto 2 rows for the sticky footer
      bottom: "var(--unstable_TableCell-height)"
    }
  }];
});
var Table = React188.forwardRef(function Table2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyTable"
  });
  const {
    className,
    component,
    children,
    borderAxis = "xBetween",
    hoverRow = false,
    noWrap = false,
    size: size3 = "md",
    variant = "plain",
    color = "neutral",
    stripe,
    stickyHeader = false,
    stickyFooter = false,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded101);
  const ownerState = _extends({}, props, {
    borderAxis,
    hoverRow,
    noWrap,
    component,
    size: size3,
    color,
    variant,
    stripe,
    stickyHeader,
    stickyFooter
  });
  const classes = useUtilityClasses90(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: TableRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime155.jsx)(TypographyInheritContext.Provider, {
    value: true,
    children: (0, import_jsx_runtime155.jsx)(SlotRoot, _extends({}, rootProps, {
      children
    }))
  });
});
true ? Table.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The axis to display a border on the table cell.
   * @default 'xBetween'
   */
  borderAxis: import_prop_types106.default.oneOfType([import_prop_types106.default.oneOf(["both", "bothBetween", "none", "x", "xBetween", "y", "yBetween"]), import_prop_types106.default.string]),
  /**
   * Children of the table
   */
  children: import_prop_types106.default.node,
  /**
   * @ignore
   */
  className: import_prop_types106.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types106.default.oneOfType([import_prop_types106.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types106.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types106.default.elementType,
  /**
   * If `true`, the table row will shade on hover.
   * @default false
   */
  hoverRow: import_prop_types106.default.bool,
  /**
   * If `true`, the body cells will not wrap, but instead will truncate with a text overflow ellipsis.
   *
   * Note: Header cells are always truncated with overflow ellipsis.
   *
   * @default false
   */
  noWrap: import_prop_types106.default.bool,
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types106.default.oneOfType([import_prop_types106.default.oneOf(["sm", "md", "lg"]), import_prop_types106.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types106.default.shape({
    root: import_prop_types106.default.oneOfType([import_prop_types106.default.func, import_prop_types106.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types106.default.shape({
    root: import_prop_types106.default.elementType
  }),
  /**
   * If `true`, the footer always appear at the bottom of the overflow table.
   *
   * ⚠️ It doesn't work with IE11.
   * @default false
   */
  stickyFooter: import_prop_types106.default.bool,
  /**
   * If `true`, the header always appear at the top of the overflow table.
   *
   * ⚠️ It doesn't work with IE11.
   * @default false
   */
  stickyHeader: import_prop_types106.default.bool,
  /**
   * The odd or even row of the table body will have subtle background color.
   */
  stripe: import_prop_types106.default.oneOfType([import_prop_types106.default.oneOf(["odd", "even"]), import_prop_types106.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types106.default.oneOfType([import_prop_types106.default.arrayOf(import_prop_types106.default.oneOfType([import_prop_types106.default.func, import_prop_types106.default.object, import_prop_types106.default.bool])), import_prop_types106.default.func, import_prop_types106.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types106.default.oneOfType([import_prop_types106.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types106.default.string])
} : void 0;
var Table_default = Table;

// node_modules/@mui/joy/TabList/TabList.js
var React190 = __toESM(require_react());
var import_prop_types107 = __toESM(require_prop_types());

// node_modules/@mui/joy/Tabs/SizeTabsContext.js
var React189 = __toESM(require_react());
var SizeTabsContext = React189.createContext("md");
if (true) {
  SizeTabsContext.displayName = "SizeTabsContext";
}
var SizeTabsContext_default = SizeTabsContext;

// node_modules/@mui/joy/TabList/tabListClasses.js
function getTabListUtilityClass(slot) {
  return generateUtilityClass2("MuiTabList", slot);
}
var tabListClasses2 = generateUtilityClasses2("MuiTabList", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var tabListClasses_default = tabListClasses2;

// node_modules/@mui/joy/TabList/TabList.js
var import_jsx_runtime156 = __toESM(require_jsx_runtime());
var _excluded102 = ["component", "children", "variant", "color", "size", "disableUnderline", "underlinePlacement", "tabFlex", "sticky", "slots", "slotProps"];
var useUtilityClasses91 = (ownerState) => {
  const {
    orientation,
    size: size3,
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`]
  };
  return composeClasses2(slots, getTabListUtilityClass, {});
};
var TabListRoot = styled_default(StyledList, {
  name: "JoyTabList",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return _extends({
    "--List-gap": "0px",
    "--ListDivider-gap": "0px",
    "--ListItem-paddingX": "var(--Tabs-spacing)",
    "--ListItem-gap": "0.375rem",
    // the `var(--unknown,)` is a workaround because emotion does not support space toggle.
    "--unstable_TabList-hasUnderline": ownerState.disableUnderline ? "var(--unknown,)" : "initial"
  }, scopedVariables, {
    flexGrow: "initial",
    flexDirection: ownerState.orientation === "vertical" ? "column" : "row",
    borderRadius: `var(--List-radius, 0px)`,
    padding: `var(--List-padding, 0px)`,
    zIndex: 1
  }, ownerState.sticky && {
    // sticky in list item can be found in grouped options
    position: "sticky",
    top: ownerState.sticky === "top" ? "calc(-1 * var(--Tabs-padding, 0px))" : "initial",
    bottom: ownerState.sticky === "bottom" ? "calc(-1 * var(--Tabs-padding, 0px))" : "initial",
    backgroundColor: (variantStyle == null ? void 0 : variantStyle.backgroundColor) || `var(--TabList-stickyBackground, ${theme.vars.palette.background.body})`
  }, !ownerState.disableUnderline && _extends({}, ownerState.underlinePlacement === "bottom" && {
    "--unstable_TabList-underlineBottom": "1px",
    paddingBottom: 1,
    boxShadow: `inset 0 -1px ${theme.vars.palette.divider}`
  }, ownerState.underlinePlacement === "top" && {
    "--unstable_TabList-underlineTop": "1px",
    paddingTop: 1,
    boxShadow: `inset 0 1px ${theme.vars.palette.divider}`
  }, ownerState.underlinePlacement === "right" && {
    "--unstable_TabList-underlineRight": "1px",
    paddingRight: 1,
    boxShadow: `inset -1px 0 ${theme.vars.palette.divider}`
  }, ownerState.underlinePlacement === "left" && {
    "--unstable_TabList-underlineLeft": "1px",
    paddingLeft: 1,
    boxShadow: `inset 1px 0 ${theme.vars.palette.divider}`
  }), ownerState.tabFlex && {
    [`& .${tabClasses_default.root}`]: {
      flex: ownerState.tabFlex
    }
  });
});
var TabList = React190.forwardRef(function TabList2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyTabList"
  });
  const tabsSize = React190.useContext(SizeTabsContext_default);
  const {
    isRtl,
    orientation,
    getRootProps,
    contextValue
  } = useTabsList({
    rootRef: ref
  });
  const {
    component = "div",
    children,
    variant = "plain",
    color = "neutral",
    size: sizeProp,
    disableUnderline = false,
    underlinePlacement = orientation === "horizontal" ? "bottom" : "right",
    tabFlex,
    sticky,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded102);
  const size3 = sizeProp != null ? sizeProp : tabsSize;
  const ownerState = _extends({}, props, {
    isRtl,
    orientation,
    variant,
    color,
    size: size3,
    sticky,
    tabFlex,
    nesting: false,
    disableUnderline,
    underlinePlacement
  });
  const classes = useUtilityClasses91(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: TabListRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    ownerState,
    className: classes.root
  });
  return (
    // @ts-ignore conflicted ref types
    (0, import_jsx_runtime156.jsx)(SlotRoot, _extends({}, rootProps, {
      children: (0, import_jsx_runtime156.jsx)(TabsListProvider, {
        value: contextValue,
        children: (0, import_jsx_runtime156.jsx)(ListProvider_default, {
          row: orientation === "horizontal",
          nested: true,
          children
        })
      })
    }))
  );
});
true ? TabList.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the TabList if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types107.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types107.default.oneOfType([import_prop_types107.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types107.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types107.default.elementType,
  /**
   * If `true`, the TabList's underline will disappear.
   * @default false
   */
  disableUnderline: import_prop_types107.default.bool,
  /**
   * The size of the component.
   */
  size: import_prop_types107.default.oneOfType([import_prop_types107.default.oneOf(["sm", "md", "lg"]), import_prop_types107.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types107.default.shape({
    root: import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types107.default.shape({
    root: import_prop_types107.default.elementType
  }),
  /**
   * If provided, the TabList will have postion `sticky`.
   */
  sticky: import_prop_types107.default.oneOf(["bottom", "top"]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types107.default.oneOfType([import_prop_types107.default.arrayOf(import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object, import_prop_types107.default.bool])), import_prop_types107.default.func, import_prop_types107.default.object]),
  /**
   * The flex value of the Tab.
   * @example tabFlex={1} will set flex: '1 1 auto' on each tab (stretch the tab to equally fill the available space).
   */
  tabFlex: import_prop_types107.default.oneOfType([import_prop_types107.default.number, import_prop_types107.default.string]),
  /**
   * The placement of the TabList's underline.
   * @default orientation === 'horizontal' ? 'bottom' : 'right'
   */
  underlinePlacement: import_prop_types107.default.oneOf(["bottom", "left", "right", "top"]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types107.default.oneOfType([import_prop_types107.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types107.default.string])
} : void 0;
var TabList_default = TabList;

// node_modules/@mui/joy/TabPanel/TabPanel.js
var React191 = __toESM(require_react());
var import_prop_types108 = __toESM(require_prop_types());

// node_modules/@mui/joy/TabPanel/tabPanelClasses.js
function getTabPanelUtilityClass2(slot) {
  return generateUtilityClass2("MuiTabPanel", slot);
}
var tabListClasses3 = generateUtilityClasses2("MuiTabPanel", ["root", "hidden", "sizeSm", "sizeMd", "sizeLg", "horizontal", "vertical", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var tabPanelClasses_default = tabListClasses3;

// node_modules/@mui/joy/TabPanel/TabPanel.js
var import_jsx_runtime157 = __toESM(require_jsx_runtime());
var _excluded103 = ["children", "value", "component", "color", "variant", "size", "slots", "slotProps", "keepMounted"];
var useUtilityClasses92 = (ownerState) => {
  const {
    hidden,
    size: size3,
    variant,
    color,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", hidden && "hidden", size3 && `size${capitalize(size3)}`, orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`]
  };
  return composeClasses2(slots, getTabPanelUtilityClass2, {});
};
var TabPanelRoot = styled_default("div", {
  name: "JoyTabPanel",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return _extends({
    display: ownerState.hidden ? "none" : "block",
    padding: "var(--Tabs-spacing)",
    flexGrow: 1,
    fontFamily: theme.vars.fontFamily.body
  }, theme.typography[`body-${ownerState.size}`], (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
var TabPanel3 = React191.forwardRef(function TabPanel4(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyTabPanel"
  });
  const {
    orientation
  } = useTabsContext() || {
    orientation: "horizontal"
  };
  const tabsSize = React191.useContext(SizeTabsContext_default);
  const {
    children,
    value = 0,
    component,
    color = "neutral",
    variant = "plain",
    size: sizeProp,
    slots = {},
    slotProps = {},
    keepMounted = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded103);
  const {
    hidden,
    getRootProps
  } = useTabPanel(_extends({}, props, {
    value
  }));
  const size3 = sizeProp != null ? sizeProp : tabsSize;
  const ownerState = _extends({}, props, {
    orientation,
    hidden,
    size: size3,
    color,
    variant
  });
  const classes = useUtilityClasses92(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: TabPanelRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    additionalProps: {
      role: "tabpanel",
      ref,
      as: component
    },
    ownerState,
    className: classes.root
  });
  if (keepMounted) {
    return (0, import_jsx_runtime157.jsx)(SlotRoot, _extends({}, rootProps, {
      children
    }));
  }
  return (0, import_jsx_runtime157.jsx)(SlotRoot, _extends({}, rootProps, {
    children: !hidden && children
  }));
});
true ? TabPanel3.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types108.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types108.default.oneOfType([import_prop_types108.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types108.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types108.default.elementType,
  /**
   * Always keep the children in the DOM.
   * @default false
   */
  keepMounted: import_prop_types108.default.bool,
  /**
   * The size of the component.
   */
  size: import_prop_types108.default.oneOfType([import_prop_types108.default.oneOf(["sm", "md", "lg"]), import_prop_types108.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types108.default.shape({
    root: import_prop_types108.default.oneOfType([import_prop_types108.default.func, import_prop_types108.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types108.default.shape({
    root: import_prop_types108.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types108.default.oneOfType([import_prop_types108.default.arrayOf(import_prop_types108.default.oneOfType([import_prop_types108.default.func, import_prop_types108.default.object, import_prop_types108.default.bool])), import_prop_types108.default.func, import_prop_types108.default.object]),
  /**
   * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.
   * @default 0
   */
  value: import_prop_types108.default.oneOfType([import_prop_types108.default.number, import_prop_types108.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types108.default.oneOfType([import_prop_types108.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types108.default.string])
} : void 0;
var TabPanel_default = TabPanel3;

// node_modules/@mui/joy/Tabs/Tabs.js
var React192 = __toESM(require_react());
var import_prop_types109 = __toESM(require_prop_types());

// node_modules/@mui/joy/Tabs/tabsClasses.js
function getTabsUtilityClass2(slot) {
  return generateUtilityClass2("MuiTabs", slot);
}
var tabListClasses4 = generateUtilityClasses2("MuiTabs", ["root", "horizontal", "vertical", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var tabsClasses_default = tabListClasses4;

// node_modules/@mui/joy/Tabs/Tabs.js
var import_jsx_runtime158 = __toESM(require_jsx_runtime());
var _excluded104 = ["children", "value", "defaultValue", "orientation", "direction", "component", "onChange", "selectionFollowsFocus", "variant", "color", "size", "slots", "slotProps"];
var useUtilityClasses93 = (ownerState) => {
  const {
    orientation,
    variant,
    color,
    size: size3
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`]
  };
  return composeClasses2(slots, getTabsUtilityClass2, {});
};
var TabsRoot = styled_default("div", {
  name: "JoyTabs",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants, _theme$variants2;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  const {
    bgcolor,
    backgroundColor,
    background,
    p,
    padding
  } = resolveSxValue({
    theme,
    ownerState
  }, ["bgcolor", "backgroundColor", "background", "p", "padding"]);
  const resolvedBg = getPath(theme, `palette.${bgcolor}`) || bgcolor || getPath(theme, `palette.${backgroundColor}`) || backgroundColor || background || (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.surface;
  return _extends({}, ownerState.size === "sm" && {
    "--Tabs-spacing": "0.75rem"
  }, ownerState.size === "md" && {
    "--Tabs-spacing": "1rem"
  }, ownerState.size === "lg" && {
    "--Tabs-spacing": "1.25rem"
  }, {
    "--Tab-indicatorThickness": "2px",
    "--Icon-color": ownerState.color !== "neutral" || ownerState.variant === "solid" ? "currentColor" : theme.vars.palette.text.icon,
    "--TabList-stickyBackground": resolvedBg === "transparent" ? "initial" : resolvedBg,
    // for sticky TabList
    display: "flex",
    flexDirection: "column"
  }, ownerState.orientation === "vertical" && {
    flexDirection: "row"
  }, {
    backgroundColor: theme.vars.palette.background.surface,
    position: "relative"
  }, theme.typography[`body-${ownerState.size}`], (_theme$variants2 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants2[ownerState.color], p !== void 0 && {
    "--Tabs-padding": p
  }, padding !== void 0 && {
    "--Tabs-padding": padding
  });
});
var Tabs3 = React192.forwardRef(function Tabs4(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyTabs"
  });
  const {
    children,
    value: valueProp,
    defaultValue: defaultValueProp,
    orientation = "horizontal",
    direction = "ltr",
    component,
    variant = "plain",
    color = "neutral",
    size: size3 = "md",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded104);
  const defaultValue = defaultValueProp || (valueProp === void 0 ? 0 : void 0);
  const {
    contextValue
  } = useTabs(_extends({}, props, {
    orientation,
    defaultValue
  }));
  const ownerState = _extends({}, props, {
    orientation,
    direction,
    variant,
    color,
    size: size3
  });
  const classes = useUtilityClasses93(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: TabsRoot,
    externalForwardedProps,
    additionalProps: {
      ref,
      as: component
    },
    ownerState,
    className: classes.root
  });
  return (
    // @ts-ignore `defaultValue` between HTMLDiv and TabsProps is conflicted.
    (0, import_jsx_runtime158.jsx)(SlotRoot, _extends({}, rootProps, {
      children: (0, import_jsx_runtime158.jsx)(TabsProvider, {
        value: contextValue,
        children: (0, import_jsx_runtime158.jsx)(SizeTabsContext_default.Provider, {
          value: size3,
          children
        })
      })
    }))
  );
});
true ? Tabs3.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types109.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types109.default.oneOfType([import_prop_types109.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types109.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types109.default.elementType,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: import_prop_types109.default.oneOfType([import_prop_types109.default.number, import_prop_types109.default.string]),
  /**
   * The direction of the text.
   * @default 'ltr'
   */
  direction: import_prop_types109.default.oneOf(["ltr", "rtl"]),
  /**
   * Callback invoked when new value is being set.
   */
  onChange: import_prop_types109.default.func,
  /**
   * The component orientation (layout flow direction).
   * @default 'horizontal'
   */
  orientation: import_prop_types109.default.oneOf(["horizontal", "vertical"]),
  /**
   * If `true` the selected tab changes on focus. Otherwise it only
   * changes on activation.
   */
  selectionFollowsFocus: import_prop_types109.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types109.default.oneOfType([import_prop_types109.default.oneOf(["sm", "md", "lg"]), import_prop_types109.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types109.default.shape({
    root: import_prop_types109.default.oneOfType([import_prop_types109.default.func, import_prop_types109.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types109.default.shape({
    root: import_prop_types109.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types109.default.oneOfType([import_prop_types109.default.arrayOf(import_prop_types109.default.oneOfType([import_prop_types109.default.func, import_prop_types109.default.object, import_prop_types109.default.bool])), import_prop_types109.default.func, import_prop_types109.default.object]),
  /**
   * The value of the currently selected `Tab`.
   * If you don't want any selected `Tab`, you can set this prop to `null`.
   */
  value: import_prop_types109.default.oneOfType([import_prop_types109.default.number, import_prop_types109.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types109.default.oneOfType([import_prop_types109.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types109.default.string])
} : void 0;
var Tabs_default = Tabs3;

// node_modules/@mui/joy/Textarea/Textarea.js
var React193 = __toESM(require_react());
var import_prop_types110 = __toESM(require_prop_types());

// node_modules/@mui/joy/Textarea/textareaClasses.js
function getTextareaUtilityClass(slot) {
  return generateUtilityClass2("MuiTextarea", slot);
}
var textareaClasses = generateUtilityClasses2("MuiTextarea", ["root", "textarea", "startDecorator", "endDecorator", "formControl", "disabled", "error", "focused", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft"]);
var textareaClasses_default = textareaClasses;

// node_modules/@mui/joy/Textarea/Textarea.js
var import_jsx_runtime159 = __toESM(require_jsx_runtime());
var import_jsx_runtime160 = __toESM(require_jsx_runtime());
var _excluded105 = ["propsToForward", "rootStateClasses", "inputStateClasses", "getRootProps", "getInputProps", "formControl", "focused", "error", "disabled", "size", "color", "variant", "startDecorator", "endDecorator", "minRows", "maxRows", "component", "slots", "slotProps"];
var useUtilityClasses94 = (ownerState) => {
  const {
    disabled,
    variant,
    color,
    size: size3
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`],
    textarea: ["textarea"],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses2(slots, getTextareaUtilityClass, {});
};
var TextareaRoot = styled_default("div", {
  name: "JoyTextarea",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$vars$palette, _theme$vars$palette2, _variantStyle$backgro, _theme$variants2, _theme$variants3;
  const variantStyle = (_theme$variants = theme.variants[`${ownerState.variant}`]) == null ? void 0 : _theme$variants[ownerState.color];
  return [_extends({
    "--Textarea-radius": theme.vars.radius.sm,
    "--Textarea-gap": "0.5rem",
    "--Textarea-placeholderColor": "inherit",
    "--Textarea-placeholderOpacity": 0.64,
    "--Textarea-decoratorColor": theme.vars.palette.text.icon,
    "--Textarea-focused": "0",
    "--Textarea-focusedThickness": theme.vars.focus.thickness,
    "--Textarea-focusedHighlight": (_theme$vars$palette = theme.vars.palette[ownerState.color === "neutral" ? "primary" : ownerState.color]) == null ? void 0 : _theme$vars$palette[500],
    '&:not([data-inverted-colors="false"])': _extends({}, ownerState.instanceColor && {
      "--_Textarea-focusedHighlight": (_theme$vars$palette2 = theme.vars.palette[ownerState.instanceColor === "neutral" ? "primary" : ownerState.instanceColor]) == null ? void 0 : _theme$vars$palette2[500]
    }, {
      "--Textarea-focusedHighlight": `var(--_Textarea-focusedHighlight, ${theme.vars.palette.focusVisible})`
    })
  }, ownerState.size === "sm" && {
    "--Textarea-minHeight": "2rem",
    "--Textarea-paddingBlock": "calc(0.375rem - 0.5px - var(--variant-borderWidth, 0px))",
    // to match Input because <textarea> does not center the text at the middle like <input>
    "--Textarea-paddingInline": "0.5rem",
    "--Textarea-decoratorChildHeight": "min(1.5rem, var(--Textarea-minHeight))",
    "--Icon-fontSize": theme.vars.fontSize.xl
  }, ownerState.size === "md" && {
    "--Textarea-minHeight": "2.25rem",
    "--Textarea-paddingBlock": "calc(0.375rem - var(--variant-borderWidth, 0px))",
    "--Textarea-paddingInline": "0.75rem",
    "--Textarea-decoratorChildHeight": "min(1.75rem, var(--Textarea-minHeight))",
    "--Icon-fontSize": theme.vars.fontSize.xl2
  }, ownerState.size === "lg" && {
    "--Textarea-minHeight": "3rem",
    "--Textarea-paddingBlock": "calc(0.75rem - var(--variant-borderWidth, 0px))",
    "--Textarea-paddingInline": "1rem",
    "--Textarea-gap": "0.75rem",
    "--Textarea-decoratorChildHeight": "min(2.375rem, var(--Textarea-minHeight))",
    "--Icon-fontSize": theme.vars.fontSize.xl2
  }, {
    // variables for controlling child components
    "--_Textarea-paddingBlock": "max((var(--Textarea-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Textarea-decoratorChildHeight)) / 2, 0px)",
    "--Textarea-decoratorChildRadius": "max(var(--Textarea-radius) - var(--variant-borderWidth, 0px) - var(--_Textarea-paddingBlock), min(var(--_Textarea-paddingBlock) + var(--variant-borderWidth, 0px), var(--Textarea-radius) / 2))",
    "--Button-minHeight": "var(--Textarea-decoratorChildHeight)",
    "--Button-paddingBlock": "0px",
    // to ensure that the height of the button is equal to --Button-minHeight
    "--IconButton-size": "var(--Textarea-decoratorChildHeight)",
    "--Button-radius": "var(--Textarea-decoratorChildRadius)",
    "--IconButton-radius": "var(--Textarea-decoratorChildRadius)",
    boxSizing: "border-box"
  }, ownerState.variant !== "plain" && {
    boxShadow: theme.shadow.xs
  }, {
    minWidth: 0,
    minHeight: "var(--Textarea-minHeight)",
    cursor: "text",
    position: "relative",
    display: "flex",
    flexDirection: "column",
    paddingInlineStart: `var(--Textarea-paddingInline)`,
    // the paddingInlineEnd is added to the textarea. It looks better when the scrollbar appears.
    paddingBlock: "var(--Textarea-paddingBlock)",
    borderRadius: "var(--Textarea-radius)"
  }, theme.typography[`body-${ownerState.size}`], variantStyle, {
    backgroundColor: (_variantStyle$backgro = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro : theme.vars.palette.background.surface,
    "&::before": {
      boxSizing: "border-box",
      content: '""',
      display: "block",
      position: "absolute",
      pointerEvents: "none",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      zIndex: 1,
      borderRadius: "inherit",
      margin: "calc(var(--variant-borderWidth, 0px) * -1)",
      // for outlined variant
      boxShadow: `var(--Textarea-focusedInset, inset) 0 0 0 calc(var(--Textarea-focused) * var(--Textarea-focusedThickness)) var(--Textarea-focusedHighlight)`
    }
  }), {
    "&:hover": _extends({}, (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants2[ownerState.color], {
      backgroundColor: null,
      // it is not common to change background on hover for Textarea
      cursor: "text"
    }),
    [`&.${textareaClasses_default.disabled}`]: (_theme$variants3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants3[ownerState.color],
    "&:focus-within::before": {
      "--Textarea-focused": "1"
    }
  }];
});
var TextareaInput = styled_default(TextareaAutosize, {
  name: "JoyTextarea",
  slot: "Textarea",
  overridesResolver: (props, styles2) => styles2.textarea
})({
  resize: "none",
  border: "none",
  // remove the native textarea width
  minWidth: 0,
  // remove the native textarea width
  outline: 0,
  // remove the native textarea outline
  padding: 0,
  // remove the native textarea padding
  paddingInlineEnd: `var(--Textarea-paddingInline)`,
  flex: "auto",
  alignSelf: "stretch",
  color: "inherit",
  backgroundColor: "transparent",
  fontFamily: "inherit",
  fontSize: "inherit",
  fontStyle: "inherit",
  fontWeight: "inherit",
  lineHeight: "inherit",
  "&::-webkit-input-placeholder": {
    color: "var(--Textarea-placeholderColor)",
    opacity: "var(--Textarea-placeholderOpacity)"
  },
  "&::-moz-placeholder": {
    // Firefox 19+
    color: "var(--Textarea-placeholderColor)",
    opacity: "var(--Textarea-placeholderOpacity)"
  },
  "&:-ms-input-placeholder": {
    // IE11
    color: "var(--Textarea-placeholderColor)",
    opacity: "var(--Textarea-placeholderOpacity)"
  },
  "&::-ms-input-placeholder": {
    // Edge
    color: "var(--Textarea-placeholderColor)",
    opacity: "var(--Textarea-placeholderOpacity)"
  }
});
var TextareaStartDecorator = styled_default("div", {
  name: "JoyTextarea",
  slot: "StartDecorator",
  overridesResolver: (props, styles2) => styles2.startDecorator
})({
  display: "flex",
  marginInlineStart: "calc(var(--Textarea-paddingBlock) - var(--Textarea-paddingInline))",
  marginInlineEnd: "var(--Textarea-paddingBlock)",
  marginBlockEnd: "var(--Textarea-gap)",
  color: "var(--Textarea-decoratorColor)",
  cursor: "initial"
});
var TextareaEndDecorator = styled_default("div", {
  name: "JoyTextarea",
  slot: "EndDecorator",
  overridesResolver: (props, styles2) => styles2.endDecorator
})({
  display: "flex",
  marginInlineStart: "calc(var(--Textarea-paddingBlock) - var(--Textarea-paddingInline))",
  marginInlineEnd: "var(--Textarea-paddingBlock)",
  marginBlockStart: "var(--Textarea-gap)",
  color: "var(--Textarea-decoratorColor)",
  cursor: "initial"
});
var Textarea = React193.forwardRef(function Textarea2(inProps, ref) {
  var _ref, _inProps$disabled, _ref2, _inProps$error, _ref3, _inProps$size, _inProps$color, _formControl$color;
  const props = useThemeProps2({
    props: inProps,
    name: "JoyTextarea"
  });
  const _useForwardedInput = useForwardedInput(props, textareaClasses_default), {
    propsToForward,
    rootStateClasses,
    inputStateClasses,
    getRootProps,
    getInputProps,
    formControl,
    focused,
    error: errorProp = false,
    disabled: disabledProp = false,
    size: sizeProp = "md",
    color: colorProp = "neutral",
    variant = "outlined",
    startDecorator,
    endDecorator,
    minRows,
    maxRows,
    component,
    slots = {},
    slotProps = {}
  } = _useForwardedInput, other = _objectWithoutPropertiesLoose(_useForwardedInput, _excluded105);
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React193.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const disabled = (_ref = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : formControl == null ? void 0 : formControl.disabled) != null ? _ref : disabledProp;
  const error = (_ref2 = (_inProps$error = inProps.error) != null ? _inProps$error : formControl == null ? void 0 : formControl.error) != null ? _ref2 : errorProp;
  const size3 = (_ref3 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref3 : sizeProp;
  const color = (_inProps$color = inProps.color) != null ? _inProps$color : error ? "danger" : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp;
  const ownerState = _extends({
    instanceColor: error ? "danger" : inProps.color
  }, props, {
    color,
    disabled,
    error,
    focused,
    size: size3,
    variant
  });
  const classes = useUtilityClasses94(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: [classes.root, rootStateClasses],
    elementType: TextareaRoot,
    externalForwardedProps,
    getSlotProps: getRootProps,
    ownerState
  });
  const [SlotTextarea, textareaProps] = useSlot("textarea", {
    additionalProps: {
      id: formControl == null ? void 0 : formControl.htmlFor,
      "aria-describedby": formControl == null ? void 0 : formControl["aria-describedby"]
    },
    className: [classes.textarea, inputStateClasses],
    elementType: TextareaInput,
    internalForwardedProps: _extends({}, propsToForward, {
      minRows,
      maxRows
    }),
    externalForwardedProps,
    getSlotProps: getInputProps,
    ownerState
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: TextareaStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: TextareaEndDecorator,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime160.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [startDecorator && (0, import_jsx_runtime159.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
      children: startDecorator
    })), (0, import_jsx_runtime159.jsx)(SlotTextarea, _extends({}, textareaProps)), endDecorator && (0, import_jsx_runtime159.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
      children: endDecorator
    }))]
  }));
});
true ? Textarea.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types110.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types110.default.oneOfType([import_prop_types110.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types110.default.string]),
  /**
   * @ignore
   */
  disabled: import_prop_types110.default.bool,
  /**
   * Trailing adornment for this input.
   */
  endDecorator: import_prop_types110.default.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   * @default false
   */
  error: import_prop_types110.default.bool,
  /**
   * Maximum number of rows to display.
   */
  maxRows: import_prop_types110.default.oneOfType([import_prop_types110.default.number, import_prop_types110.default.string]),
  /**
   * Minimum number of rows to display.
   * @default 1
   */
  minRows: import_prop_types110.default.oneOfType([import_prop_types110.default.number, import_prop_types110.default.string]),
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types110.default.oneOfType([import_prop_types110.default.oneOf(["sm", "md", "lg"]), import_prop_types110.default.string]),
  /**
   * Leading adornment for this input.
   */
  startDecorator: import_prop_types110.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types110.default.oneOfType([import_prop_types110.default.arrayOf(import_prop_types110.default.oneOfType([import_prop_types110.default.func, import_prop_types110.default.object, import_prop_types110.default.bool])), import_prop_types110.default.func, import_prop_types110.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types110.default.oneOfType([import_prop_types110.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types110.default.string])
} : void 0;
var Textarea_default = Textarea;

// node_modules/@mui/joy/TextField/TextField.js
var TextField_default = function DeletedTextField() {
  throw new Error(["MUI: `TextField` component has been removed in favor of Input composition.", "", "To migrate, run `npx @mui/codemod@latest v5.0.0/joy-text-field-to-input <path>`.", "For the codemod detail, visit https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#joy-text-field-to-input\n\nTo learn more why it has been removed, visit the RFC https://github.com/mui/material-ui/issues/34176"].join("\n"));
};

// node_modules/@mui/joy/ToggleButtonGroup/ToggleButtonGroup.js
var React194 = __toESM(require_react());
var import_prop_types111 = __toESM(require_prop_types());

// node_modules/@mui/joy/ToggleButtonGroup/toggleButtonGroupClasses.js
function getToggleButtonGroupUtilityClass(slot) {
  return generateUtilityClass2("MuiToggleButtonGroup", slot);
}
var toggleButtonGroupClasses = generateUtilityClasses2("MuiToggleButtonGroup", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "horizontal", "vertical"]);
var toggleButtonGroupClasses_default = toggleButtonGroupClasses;

// node_modules/@mui/joy/ToggleButtonGroup/ToggleButtonGroup.js
var import_jsx_runtime161 = __toESM(require_jsx_runtime());
var _excluded106 = ["buttonFlex", "className", "component", "disabled", "size", "color", "variant", "children", "onChange", "orientation", "slots", "slotProps", "spacing", "value"];
var useUtilityClasses95 = (ownerState) => {
  const {
    size: size3,
    variant,
    color,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size3 && `size${capitalize(size3)}`]
  };
  return composeClasses2(slots, getToggleButtonGroupUtilityClass, {});
};
var ToggleButtonGroupRoot = styled_default(StyledButtonGroup, {
  name: "JoyToggleButtonGroup",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({});
var ToggleButtonGroup = React194.forwardRef(function ToggleButtonGroup2(inProps, ref) {
  const props = useThemeProps2({
    props: inProps,
    name: "JoyToggleButtonGroup"
  });
  const {
    buttonFlex,
    className,
    component = "div",
    disabled = false,
    size: size3 = "md",
    color = "neutral",
    variant = "outlined",
    children,
    onChange,
    orientation = "horizontal",
    slots = {},
    slotProps = {},
    spacing = 0,
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded106);
  const ownerState = _extends({}, props, {
    buttonFlex,
    color,
    component,
    orientation,
    spacing,
    size: size3,
    variant
  });
  const classes = useUtilityClasses95(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: ToggleButtonGroupRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      role: "group"
    }
  });
  const buttonGroupContext = React194.useMemo(() => ({
    variant,
    color,
    size: size3,
    disabled
  }), [variant, color, size3, disabled]);
  const handleChange = React194.useCallback((event, buttonValue) => {
    if (!onChange || buttonValue === void 0) {
      return;
    }
    if (Array.isArray(value)) {
      const set = new Set(value);
      if (set.has(buttonValue)) {
        set.delete(buttonValue);
      } else {
        set.add(buttonValue);
      }
      onChange(event, Array.from(set));
    } else {
      onChange(event, value === buttonValue ? null : buttonValue);
    }
  }, [value, onChange]);
  const toggleButtonGroupContext = React194.useMemo(() => ({
    onClick: (event, childValue) => {
      if (!event.defaultPrevented) {
        handleChange(event, childValue);
      }
    },
    value
  }), [handleChange, value]);
  return (0, import_jsx_runtime161.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime161.jsx)(ToggleButtonGroupContext_default.Provider, {
      value: toggleButtonGroupContext,
      children: (0, import_jsx_runtime161.jsx)(ButtonGroupContext_default.Provider, {
        value: buttonGroupContext,
        children: React194.Children.map(children, (child, index2) => {
          if (!React194.isValidElement(child)) {
            return child;
          }
          const extraProps = {};
          if (isMuiElement(child, ["Divider"])) {
            var _childProps$inset, _childProps$orientati;
            const childProps = child.props;
            extraProps.inset = (_childProps$inset = childProps == null ? void 0 : childProps.inset) != null ? _childProps$inset : "context";
            const dividerOrientation = orientation === "vertical" ? "horizontal" : "vertical";
            extraProps.orientation = (_childProps$orientati = childProps == null ? void 0 : childProps.orientation) != null ? _childProps$orientati : dividerOrientation;
            extraProps.role = "presentation";
            extraProps.component = "span";
          }
          if (index2 === 0) {
            extraProps["data-first-child"] = "";
          }
          if (index2 === React194.Children.count(children) - 1) {
            extraProps["data-last-child"] = "";
          }
          return React194.cloneElement(child, extraProps);
        })
      })
    })
  }));
});
true ? ToggleButtonGroup.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The flex value of the button.
   * @example buttonFlex={1} will set flex: '1 1 auto' on each button (stretch the button to equally fill the available space).
   */
  buttonFlex: import_prop_types111.default.oneOfType([import_prop_types111.default.number, import_prop_types111.default.string]),
  /**
   * Used to render icon or text elements inside the ButtonGroup if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types111.default.node,
  /**
   * @ignore
   */
  className: import_prop_types111.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types111.default.oneOfType([import_prop_types111.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types111.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types111.default.elementType,
  /**
   * If `true`, all the buttons will be disabled.
   * @default false
   */
  disabled: import_prop_types111.default.bool,
  /**
   * Callback fired when the value changes.
   *
   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
   * @param {any} value of the selected buttons. When `exclusive` is true
   * this is a single value; when false an array of selected values. If no value
   * is selected and `exclusive` is true the value is null; when false an empty array.
   */
  onChange: import_prop_types111.default.func,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types111.default.oneOf(["horizontal", "vertical"]),
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types111.default.oneOf(["sm", "md", "lg"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types111.default.shape({
    root: import_prop_types111.default.oneOfType([import_prop_types111.default.func, import_prop_types111.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types111.default.shape({
    root: import_prop_types111.default.elementType
  }),
  /**
   * Defines the space between the type `item` components.
   * It can only be used on a type `container` component.
   * @default 0
   */
  spacing: import_prop_types111.default.oneOfType([import_prop_types111.default.arrayOf(import_prop_types111.default.oneOfType([import_prop_types111.default.number, import_prop_types111.default.string])), import_prop_types111.default.number, import_prop_types111.default.shape({
    lg: import_prop_types111.default.oneOfType([import_prop_types111.default.number, import_prop_types111.default.string]),
    md: import_prop_types111.default.oneOfType([import_prop_types111.default.number, import_prop_types111.default.string]),
    sm: import_prop_types111.default.oneOfType([import_prop_types111.default.number, import_prop_types111.default.string]),
    xl: import_prop_types111.default.oneOfType([import_prop_types111.default.number, import_prop_types111.default.string]),
    xs: import_prop_types111.default.oneOfType([import_prop_types111.default.number, import_prop_types111.default.string])
  }), import_prop_types111.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types111.default.oneOfType([import_prop_types111.default.arrayOf(import_prop_types111.default.oneOfType([import_prop_types111.default.func, import_prop_types111.default.object, import_prop_types111.default.bool])), import_prop_types111.default.func, import_prop_types111.default.object]),
  /**
   * The currently selected value within the group or an array of selected values.
   *
   * The value must have reference equality with the option in order to be selected.
   */
  value: import_prop_types111.default.oneOfType([import_prop_types111.default.arrayOf(import_prop_types111.default.string), import_prop_types111.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types111.default.oneOfType([import_prop_types111.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types111.default.string])
} : void 0;
var ToggleButtonGroup_default = ToggleButtonGroup;

// node_modules/@mui/joy/Tooltip/Tooltip.js
var React195 = __toESM(require_react());
var import_prop_types112 = __toESM(require_prop_types());

// node_modules/@mui/joy/Tooltip/tooltipClasses.js
function getTooltipUtilityClass(slot) {
  return generateUtilityClass2("MuiTooltip", slot);
}
var tooltipClasses = generateUtilityClasses2("MuiTooltip", ["root", "tooltipArrow", "arrow", "touch", "placementLeft", "placementRight", "placementTop", "placementBottom", "colorPrimary", "colorDanger", "colorNeutral", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var tooltipClasses_default = tooltipClasses;

// node_modules/@mui/joy/Tooltip/Tooltip.js
var import_jsx_runtime162 = __toESM(require_jsx_runtime());
var import_jsx_runtime163 = __toESM(require_jsx_runtime());
var _excluded107 = ["children", "className", "component", "arrow", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "disablePortal", "direction", "keepMounted", "modifiers", "placement", "title", "color", "variant", "size", "slots", "slotProps"];
var useUtilityClasses96 = (ownerState) => {
  const {
    arrow: arrow3,
    variant,
    color,
    size: size3,
    placement,
    touch
  } = ownerState;
  const slots = {
    root: ["root", arrow3 && "tooltipArrow", touch && "touch", size3 && `size${capitalize(size3)}`, color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`, `tooltipPlacement${capitalize(placement.split("-")[0])}`],
    arrow: ["arrow"]
  };
  return composeClasses2(slots, getTooltipUtilityClass, {});
};
var TooltipRoot = styled_default("div", {
  name: "JoyTooltip",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants, _ownerState$placement, _ownerState$placement2;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return _extends({}, ownerState.size === "sm" && {
    "--Icon-fontSize": theme.vars.fontSize.md,
    "--Tooltip-arrowSize": "8px",
    padding: theme.spacing(0.25, 0.625)
  }, ownerState.size === "md" && {
    "--Icon-fontSize": theme.vars.fontSize.lg,
    "--Tooltip-arrowSize": "10px",
    padding: theme.spacing(0.5, 0.75)
  }, ownerState.size === "lg" && {
    "--Icon-fontSize": theme.vars.fontSize.xl,
    "--Tooltip-arrowSize": "12px",
    padding: theme.spacing(0.75, 1)
  }, {
    zIndex: theme.vars.zIndex.tooltip,
    borderRadius: theme.vars.radius.sm,
    boxShadow: theme.shadow.sm,
    wordWrap: "break-word",
    position: "relative"
  }, ownerState.disableInteractive && {
    pointerEvents: "none"
  }, theme.typography[`body-${{
    sm: "xs",
    md: "sm",
    lg: "md"
  }[ownerState.size]}`], variantStyle, !variantStyle.backgroundColor && {
    backgroundColor: theme.vars.palette.background.surface
  }, {
    "&::before": {
      // acts as a invisible connector between the element and the tooltip
      // so that the cursor can move to the tooltip without losing focus.
      content: '""',
      display: "block",
      position: "absolute",
      width: (_ownerState$placement = ownerState.placement) != null && _ownerState$placement.match(/(top|bottom)/) ? "100%" : (
        // 10px equals the default offset popper config
        "calc(10px + var(--variant-borderWidth, 0px))"
      ),
      height: (_ownerState$placement2 = ownerState.placement) != null && _ownerState$placement2.match(/(top|bottom)/) ? "calc(10px + var(--variant-borderWidth, 0px))" : "100%"
    },
    '&[data-popper-placement*="bottom"]::before': {
      top: 0,
      left: 0,
      transform: "translateY(-100%)"
    },
    '&[data-popper-placement*="left"]::before': {
      top: 0,
      right: 0,
      transform: "translateX(100%)"
    },
    '&[data-popper-placement*="right"]::before': {
      top: 0,
      left: 0,
      transform: "translateX(-100%)"
    },
    '&[data-popper-placement*="top"]::before': {
      bottom: 0,
      left: 0,
      transform: "translateY(100%)"
    }
  });
});
var TooltipArrow = styled_default("span", {
  name: "JoyTooltip",
  slot: "Arrow",
  overridesResolver: (props, styles2) => styles2.arrow
})(({
  theme,
  ownerState
}) => {
  var _theme$variants2, _variantStyle$backgro, _variantStyle$backgro2;
  const variantStyle = (_theme$variants2 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants2[ownerState.color];
  return {
    "--unstable_Tooltip-arrowRotation": 0,
    width: "var(--Tooltip-arrowSize)",
    height: "var(--Tooltip-arrowSize)",
    boxSizing: "border-box",
    // use pseudo element because Popper controls the `transform` property of the arrow.
    "&::before": {
      content: '""',
      display: "block",
      position: "absolute",
      width: 0,
      height: 0,
      border: "calc(var(--Tooltip-arrowSize) / 2) solid",
      borderLeftColor: "transparent",
      borderBottomColor: "transparent",
      borderTopColor: (_variantStyle$backgro = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro : theme.vars.palette.background.surface,
      borderRightColor: (_variantStyle$backgro2 = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro2 : theme.vars.palette.background.surface,
      borderRadius: `0px 2px 0px 0px`,
      boxShadow: `var(--variant-borderWidth, 0px) calc(-1 * var(--variant-borderWidth, 0px)) 0px 0px ${variantStyle.borderColor}`,
      transformOrigin: "center center",
      transform: "rotate(calc(-45deg + 90deg * var(--unstable_Tooltip-arrowRotation)))"
    },
    '[data-popper-placement*="bottom"] &': {
      top: "calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)"
      // 0.5px is for perfect overlap with the Tooltip
    },
    '[data-popper-placement*="top"] &': {
      "--unstable_Tooltip-arrowRotation": 2,
      bottom: "calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)"
    },
    '[data-popper-placement*="left"] &': {
      "--unstable_Tooltip-arrowRotation": 1,
      right: "calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)"
    },
    '[data-popper-placement*="right"] &': {
      "--unstable_Tooltip-arrowRotation": 3,
      left: "calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)"
    }
  };
});
var hystersisOpen = false;
var hystersisTimer = new Timeout();
var cursorPosition = {
  x: 0,
  y: 0
};
function composeMouseEventHandler(handler, eventHandler) {
  return (event) => {
    if (eventHandler) {
      eventHandler(event);
    }
    handler(event);
  };
}
function composeFocusEventHandler(handler, eventHandler) {
  return (event, ...params) => {
    if (eventHandler) {
      eventHandler(event, ...params);
    }
    handler(event, ...params);
  };
}
var Tooltip = React195.forwardRef(function Tooltip2(inProps, ref) {
  var _props$slots;
  const props = useThemeProps2({
    props: inProps,
    name: "JoyTooltip"
  });
  const {
    children,
    className,
    component,
    arrow: arrow3 = false,
    describeChild = false,
    disableFocusListener = false,
    disableHoverListener = false,
    disableInteractive: disableInteractiveProp = false,
    disableTouchListener = false,
    enterDelay = 100,
    enterNextDelay = 0,
    enterTouchDelay = 700,
    followCursor = false,
    id: idProp,
    leaveDelay = 0,
    leaveTouchDelay = 1500,
    onClose,
    onOpen,
    open: openProp,
    disablePortal,
    direction,
    keepMounted,
    modifiers: modifiersProp,
    placement = "bottom",
    title,
    color = "neutral",
    variant = "solid",
    size: size3 = "md",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded107);
  const [childNode, setChildNode] = React195.useState();
  const [arrowRef, setArrowRef] = React195.useState(null);
  const ignoreNonTouchEvents = React195.useRef(false);
  const disableInteractive = disableInteractiveProp || followCursor;
  const closeTimer = useTimeout();
  const enterTimer = useTimeout();
  const leaveTimer = useTimeout();
  const touchTimer = useTimeout();
  const [openState, setOpenState] = useControlled({
    controlled: openProp,
    default: false,
    name: "Tooltip",
    state: "open"
  });
  let open = openState;
  const id = useId(idProp);
  const prevUserSelect = React195.useRef(void 0);
  const stopTouchInteraction = useEventCallback_default(() => {
    if (prevUserSelect.current !== void 0) {
      document.body.style.WebkitUserSelect = prevUserSelect.current;
      prevUserSelect.current = void 0;
    }
    touchTimer.clear();
  });
  React195.useEffect(() => stopTouchInteraction, [stopTouchInteraction]);
  const handleOpen = (event) => {
    hystersisTimer.clear();
    hystersisOpen = true;
    setOpenState(true);
    if (onOpen && !open) {
      onOpen(event);
    }
  };
  const handleClose = useEventCallback_default((event) => {
    hystersisTimer.start(800 + leaveDelay, () => {
      hystersisOpen = false;
    });
    setOpenState(false);
    if (onClose && open) {
      onClose(event);
    }
    closeTimer.start(150, () => {
      ignoreNonTouchEvents.current = false;
    });
  });
  const handleMouseOver = (event) => {
    if (ignoreNonTouchEvents.current && event.type !== "touchstart") {
      return;
    }
    if (childNode) {
      childNode.removeAttribute("title");
    }
    enterTimer.clear();
    leaveTimer.clear();
    if (enterDelay || hystersisOpen && enterNextDelay) {
      enterTimer.start(hystersisOpen ? enterNextDelay : enterDelay, () => {
        handleOpen(event);
      });
    } else {
      handleOpen(event);
    }
  };
  const handleMouseLeave = (event) => {
    enterTimer.clear();
    leaveTimer.start(leaveDelay, () => {
      handleClose(event);
    });
  };
  const {
    isFocusVisibleRef,
    onBlur: handleBlurVisible,
    onFocus: handleFocusVisible,
    ref: focusVisibleRef
  } = useIsFocusVisible();
  const [, setChildIsFocusVisible] = React195.useState(false);
  const handleBlur2 = (event) => {
    handleBlurVisible(event);
    if (isFocusVisibleRef.current === false) {
      setChildIsFocusVisible(false);
      handleMouseLeave(event);
    }
  };
  const handleFocus = (event) => {
    if (!childNode) {
      setChildNode(event.currentTarget);
    }
    handleFocusVisible(event);
    if (isFocusVisibleRef.current === true) {
      setChildIsFocusVisible(true);
      handleMouseOver(event);
    }
  };
  const detectTouchStart = (event) => {
    ignoreNonTouchEvents.current = true;
    const childrenProps2 = children.props;
    if (childrenProps2.onTouchStart) {
      childrenProps2.onTouchStart(event);
    }
  };
  const handleTouchStart = (event) => {
    detectTouchStart(event);
    leaveTimer.clear();
    closeTimer.clear();
    stopTouchInteraction();
    prevUserSelect.current = document.body.style.WebkitUserSelect;
    document.body.style.WebkitUserSelect = "none";
    touchTimer.start(enterTouchDelay, () => {
      document.body.style.WebkitUserSelect = prevUserSelect.current;
      handleMouseOver(event);
    });
  };
  const handleTouchEnd = (event) => {
    if (children.props.onTouchEnd) {
      children.props.onTouchEnd(event);
    }
    stopTouchInteraction();
    leaveTimer.start(leaveTouchDelay, () => {
      handleClose(event);
    });
  };
  React195.useEffect(() => {
    if (!open) {
      return void 0;
    }
    function handleKeyDown3(nativeEvent) {
      if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
        handleClose(nativeEvent);
      }
    }
    document.addEventListener("keydown", handleKeyDown3);
    return () => {
      document.removeEventListener("keydown", handleKeyDown3);
    };
  }, [handleClose, open]);
  const handleUseRef = useForkRef(setChildNode, ref);
  const handleFocusRef = useForkRef(focusVisibleRef, handleUseRef);
  const handleRef = useForkRef(getReactElementRef(children), handleFocusRef);
  if (typeof title !== "number" && !title) {
    open = false;
  }
  const popperRef = React195.useRef(null);
  const handleMouseMove = (event) => {
    const childrenProps2 = children.props;
    if (childrenProps2.onMouseMove) {
      childrenProps2.onMouseMove(event);
    }
    cursorPosition = {
      x: event.clientX,
      y: event.clientY
    };
    if (popperRef.current) {
      popperRef.current.update();
    }
  };
  const nameOrDescProps = {};
  const titleIsString = typeof title === "string";
  if (describeChild) {
    nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
    nameOrDescProps["aria-describedby"] = open ? id : null;
  } else {
    nameOrDescProps["aria-label"] = titleIsString ? title : null;
    nameOrDescProps["aria-labelledby"] = open && !titleIsString ? id : null;
  }
  const childrenProps = _extends({}, nameOrDescProps, other, {
    component
  }, children.props, {
    className: clsx_default(className, children.props.className),
    onTouchStart: detectTouchStart,
    ref: handleRef
  }, followCursor ? {
    onMouseMove: handleMouseMove
  } : {});
  const interactiveWrapperListeners = {};
  if (!disableTouchListener) {
    childrenProps.onTouchStart = handleTouchStart;
    childrenProps.onTouchEnd = handleTouchEnd;
  }
  if (!disableHoverListener) {
    childrenProps.onMouseOver = composeMouseEventHandler(handleMouseOver, childrenProps.onMouseOver);
    childrenProps.onMouseLeave = composeMouseEventHandler(handleMouseLeave, childrenProps.onMouseLeave);
    if (!disableInteractive) {
      interactiveWrapperListeners.onMouseOver = handleMouseOver;
      interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
    }
  }
  if (!disableFocusListener) {
    childrenProps.onFocus = composeFocusEventHandler(handleFocus, childrenProps.onFocus);
    childrenProps.onBlur = composeFocusEventHandler(handleBlur2, childrenProps.onBlur);
    if (!disableInteractive) {
      interactiveWrapperListeners.onFocus = handleFocus;
      interactiveWrapperListeners.onBlur = handleBlur2;
    }
  }
  const ownerState = _extends({}, props, {
    arrow: arrow3,
    disableInteractive,
    placement,
    touch: ignoreNonTouchEvents.current,
    color,
    variant,
    size: size3
  });
  const classes = useUtilityClasses96(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const modifiers = React195.useMemo(() => [{
    name: "arrow",
    enabled: Boolean(arrowRef),
    options: {
      element: arrowRef,
      // https://popper.js.org/docs/v2/modifiers/arrow/#padding
      // make the arrow looks nice with the Tooltip's border radius
      padding: 6
    }
  }, {
    name: "offset",
    options: {
      offset: [0, 10]
    }
  }, ...modifiersProp || []], [arrowRef, modifiersProp]);
  const [SlotRoot, rootProps] = useSlot("root", {
    additionalProps: _extends({
      id,
      popperRef,
      placement,
      anchorEl: followCursor ? {
        getBoundingClientRect: () => ({
          top: cursorPosition.y,
          left: cursorPosition.x,
          right: cursorPosition.x,
          bottom: cursorPosition.y,
          width: 0,
          height: 0
        })
      } : childNode,
      open: childNode ? open : false,
      disablePortal,
      keepMounted,
      direction,
      modifiers
    }, interactiveWrapperListeners),
    ref: null,
    className: classes.root,
    elementType: TooltipRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotArrow, arrowProps] = useSlot("arrow", {
    ref: setArrowRef,
    className: classes.arrow,
    elementType: TooltipArrow,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime163.jsxs)(React195.Fragment, {
    children: [React195.isValidElement(children) && React195.cloneElement(children, childrenProps), (0, import_jsx_runtime163.jsxs)(SlotRoot, _extends({}, rootProps, !((_props$slots = props.slots) != null && _props$slots.root) && {
      as: Popper,
      slots: {
        root: component || "div"
      }
    }, {
      children: [title, arrow3 ? (0, import_jsx_runtime162.jsx)(SlotArrow, _extends({}, arrowProps)) : null]
    }))]
  });
});
true ? Tooltip.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, adds an arrow to the tooltip.
   * @default false
   */
  arrow: import_prop_types112.default.bool,
  /**
   * Tooltip reference element.
   */
  children: import_prop_types112.default.element.isRequired,
  /**
   * @ignore
   */
  className: import_prop_types112.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types112.default.oneOf(["danger", "neutral", "primary", "success", "warning"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types112.default.elementType,
  /**
   * Set to `true` if the `title` acts as an accessible description.
   * By default the `title` acts as an accessible label for the child.
   * @default false
   */
  describeChild: import_prop_types112.default.bool,
  /**
   * Direction of the text.
   * @default 'ltr'
   */
  direction: import_prop_types112.default.oneOf(["ltr", "rtl"]),
  /**
   * Do not respond to focus-visible events.
   * @default false
   */
  disableFocusListener: import_prop_types112.default.bool,
  /**
   * Do not respond to hover events.
   * @default false
   */
  disableHoverListener: import_prop_types112.default.bool,
  /**
   * Makes a tooltip not interactive, i.e. it will close when the user
   * hovers over the tooltip before the `leaveDelay` is expired.
   * @default false
   */
  disableInteractive: import_prop_types112.default.bool,
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: import_prop_types112.default.bool,
  /**
   * Do not respond to long press touch events.
   * @default false
   */
  disableTouchListener: import_prop_types112.default.bool,
  /**
   * The number of milliseconds to wait before showing the tooltip.
   * This prop won't impact the enter touch delay (`enterTouchDelay`).
   * @default 100
   */
  enterDelay: import_prop_types112.default.number,
  /**
   * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
   * @default 0
   */
  enterNextDelay: import_prop_types112.default.number,
  /**
   * The number of milliseconds a user must touch the element before showing the tooltip.
   * @default 700
   */
  enterTouchDelay: import_prop_types112.default.number,
  /**
   * If `true`, the tooltip follow the cursor over the wrapped element.
   * @default false
   */
  followCursor: import_prop_types112.default.bool,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types112.default.string,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: import_prop_types112.default.bool,
  /**
   * The number of milliseconds to wait before hiding the tooltip.
   * This prop won't impact the leave touch delay (`leaveTouchDelay`).
   * @default 0
   */
  leaveDelay: import_prop_types112.default.number,
  /**
   * The number of milliseconds after the user stops touching an element before hiding the tooltip.
   * @default 1500
   */
  leaveTouchDelay: import_prop_types112.default.number,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: import_prop_types112.default.arrayOf(import_prop_types112.default.shape({
    data: import_prop_types112.default.object,
    effect: import_prop_types112.default.func,
    enabled: import_prop_types112.default.bool,
    fn: import_prop_types112.default.func,
    name: import_prop_types112.default.any,
    options: import_prop_types112.default.object,
    phase: import_prop_types112.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: import_prop_types112.default.arrayOf(import_prop_types112.default.string),
    requiresIfExists: import_prop_types112.default.arrayOf(import_prop_types112.default.string)
  })),
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onClose: import_prop_types112.default.func,
  /**
   * Callback fired when the component requests to be open.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onOpen: import_prop_types112.default.func,
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types112.default.bool,
  /**
   * Tooltip placement.
   * @default 'bottom'
   */
  placement: import_prop_types112.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types112.default.oneOf(["sm", "md", "lg"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types112.default.shape({
    arrow: import_prop_types112.default.oneOfType([import_prop_types112.default.func, import_prop_types112.default.object]),
    root: import_prop_types112.default.oneOfType([import_prop_types112.default.func, import_prop_types112.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types112.default.shape({
    arrow: import_prop_types112.default.elementType,
    root: import_prop_types112.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types112.default.oneOfType([import_prop_types112.default.arrayOf(import_prop_types112.default.oneOfType([import_prop_types112.default.func, import_prop_types112.default.object, import_prop_types112.default.bool])), import_prop_types112.default.func, import_prop_types112.default.object]),
  /**
   * Tooltip title. Zero-length titles string, undefined, null and false are never displayed.
   */
  title: import_prop_types112.default.node,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'solid'
   */
  variant: import_prop_types112.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var Tooltip_default = Tooltip;
export {
  Accordion_default as Accordion,
  AccordionDetails_default as AccordionDetails,
  AccordionGroup_default as AccordionGroup,
  AccordionSummary_default as AccordionSummary,
  Alert_default as Alert,
  AspectRatio_default as AspectRatio,
  Autocomplete_default as Autocomplete,
  AutocompleteListbox_default as AutocompleteListbox,
  AutocompleteOption_default as AutocompleteOption,
  Avatar_default as Avatar,
  AvatarGroup_default as AvatarGroup,
  Badge_default as Badge,
  Box_default as Box,
  Breadcrumbs_default as Breadcrumbs,
  Button_default as Button,
  ButtonGroup_default as ButtonGroup,
  Card_default as Card,
  CardActions_default as CardActions,
  CardContent_default as CardContent,
  CardCover_default as CardCover,
  CardOverflow_default as CardOverflow,
  Checkbox_default as Checkbox,
  Chip_default as Chip,
  ChipDelete_default as ChipDelete,
  CircularProgress_default as CircularProgress,
  Container_default as Container,
  CssBaseline_default as CssBaseline,
  CssVarsProvider,
  DialogActions_default as DialogActions,
  DialogContent_default as DialogContent,
  DialogTitle_default as DialogTitle,
  Divider_default as Divider,
  Drawer_default as Drawer,
  Dropdown,
  FormControl_default as FormControl,
  FormHelperText_default as FormHelperText,
  FormLabel_default as FormLabel,
  GlobalStyles_default2 as GlobalStyles,
  Grid_default as Grid,
  IconButton_default as IconButton,
  Input_default as Input,
  LinearProgress_default as LinearProgress,
  Link_default as Link,
  List_default as List,
  ListDivider_default as ListDivider,
  ListItem_default as ListItem,
  ListItemButton_default as ListItemButton,
  ListItemContent_default as ListItemContent,
  ListItemDecorator_default as ListItemDecorator,
  ListSubheader_default as ListSubheader,
  Menu_default as Menu,
  MenuButton_default as MenuButton,
  MenuItem_default as MenuItem,
  MenuList_default as MenuList,
  Modal_default as Modal,
  ModalClose_default as ModalClose,
  ModalDialog_default as ModalDialog,
  ModalOverflow_default as ModalOverflow,
  Option_default as Option,
  Radio_default as Radio,
  RadioGroup_default as RadioGroup,
  ScopedCssBaseline_default as ScopedCssBaseline,
  Select_default as Select,
  Sheet_default as Sheet,
  Skeleton_default as Skeleton,
  Slider_default as Slider,
  Snackbar_default as Snackbar,
  Stack_default as Stack,
  Step_default as Step,
  StepButton_default as StepButton,
  StepIndicator_default as StepIndicator,
  Stepper_default as Stepper,
  StyledEngineProvider,
  SvgIcon_default as SvgIcon,
  Switch_default as Switch,
  identifier_default as THEME_ID,
  Tab_default as Tab,
  TabList_default as TabList,
  TabPanel_default as TabPanel,
  Table_default as Table,
  Tabs_default as Tabs,
  TextField_default as TextField,
  Textarea_default as Textarea,
  ThemeProvider,
  ToggleButtonGroup_default as ToggleButtonGroup,
  Tooltip_default as Tooltip,
  Typography_default as Typography,
  accordionClasses_default as accordionClasses,
  accordionDetailsClasses_default as accordionDetailsClasses,
  accordionGroupClasses_default as accordionGroupClasses,
  accordionSummaryClasses_default as accordionSummaryClasses,
  alertClasses_default as alertClasses,
  aspectRatioClasses_default as aspectRatioClasses,
  autocompleteClasses_default as autocompleteClasses,
  autocompleteListboxClasses_default as autocompleteListboxClasses,
  autocompleteOptionClasses_default as autocompleteOptionClasses,
  avatarClasses_default as avatarClasses,
  avatarGroupClasses_default as avatarGroupClasses,
  badgeClasses_default as badgeClasses,
  boxClasses_default as boxClasses,
  breadcrumbsClasses_default as breadcrumbsClasses,
  buttonClasses_default as buttonClasses,
  buttonGroupClasses_default as buttonGroupClasses,
  cardActionsClasses_default as cardActionsClasses,
  cardClasses_default as cardClasses,
  cardContentClasses_default as cardContentClasses,
  cardCoverClasses_default as cardCoverClasses,
  cardOverflowClasses_default as cardOverflowClasses,
  checkboxClasses_default as checkboxClasses,
  chipClasses_default as chipClasses,
  chipDeleteClasses_default as chipDeleteClasses,
  circularProgressClasses_default as circularProgressClasses,
  colors_default as colors,
  containerClasses_default as containerClasses,
  createFilterOptions,
  createGetCssVar2 as createGetCssVar,
  dialogActionsClasses_default as dialogActionsClasses,
  dialogContentClasses_default as dialogContentClasses,
  dialogTitleClasses_default as dialogTitleClasses,
  dividerClasses_default as dividerClasses,
  drawerClasses_default as drawerClasses,
  extendTheme,
  formControlClasses_default as formControlClasses,
  formHelperTextClasses_default as formHelperTextClasses,
  formLabelClasses_default as formLabelClasses,
  getAccordionDetailsUtilityClass,
  getAccordionGroupUtilityClass,
  getAccordionSummaryUtilityClass,
  getAccordionUtilityClass,
  getAlertUtilityClass,
  getAspectRatioUtilityClass,
  getAutocompleteListboxUtilityClass,
  getAutocompleteOptionUtilityClass,
  getAutocompleteUtilityClass,
  getAvatarGroupUtilityClass,
  getAvatarUtilityClass,
  getBadgeUtilityClass2 as getBadgeUtilityClass,
  getBreadcrumbsUtilityClass,
  getButtonGroupUtilityClass,
  getButtonUtilityClass2 as getButtonUtilityClass,
  getCardActionsUtilityClass,
  getCardContentUtilityClass,
  getCardCoverUtilityClass,
  getCardOverflowUtilityClass,
  getCardUtilityClass,
  getCheckboxUtilityClass,
  getChipDeleteUtilityClass,
  getChipUtilityClass,
  getCircularProgressUtilityClass,
  getContainerUtilityClass,
  getDialogActionsUtilityClass,
  getDialogContentUtilityClass,
  getDialogTitleUtilityClass,
  getDividerUtilityClass,
  getDrawerUtilityClass,
  getFormControlUtilityClass2 as getFormControlUtilityClass,
  getFormHelperTextUtilityClass,
  getFormLabelUtilityClass,
  getGridUtilityClass,
  getIconButtonUtilityClass,
  getInitColorSchemeScript,
  getInputUtilityClass2 as getInputUtilityClass,
  getLinearProgressUtilityClass,
  getLinkUtilityClass,
  getListDividerUtilityClass,
  getListItemButtonUtilityClass,
  getListItemContentUtilityClass,
  getListItemDecoratorUtilityClass,
  getListItemUtilityClass,
  getListSubheaderUtilityClass,
  getListUtilityClass,
  getMenuButtonUtilityClass2 as getMenuButtonUtilityClass,
  getMenuItemUtilityClass2 as getMenuItemUtilityClass,
  getMenuListUtilityClass,
  getMenuUtilityClass2 as getMenuUtilityClass,
  getModalCloseUtilityClass,
  getModalDialogUtilityClass,
  getModalOverflowUtilityClass,
  getModalUtilityClass2 as getModalUtilityClass,
  getOptionUtilityClass2 as getOptionUtilityClass,
  getRadioGroupUtilityClass,
  getRadioUtilityClass,
  getScopedCssBaselineUtilityClass,
  getSelectUtilityClass2 as getSelectUtilityClass,
  getSheetUtilityClass,
  getSkeletonUtilityClass,
  getSliderUtilityClass2 as getSliderUtilityClass,
  getSnackbarUtilityClass2 as getSnackbarUtilityClass,
  getStackUtilityClass,
  getStepButtonUtilityClass,
  getStepIndicatorUtilityClass,
  getStepUtilityClass,
  getStepperUtilityClass,
  getSvgIconUtilityClass,
  getSwitchUtilityClass2 as getSwitchUtilityClass,
  getTabListUtilityClass,
  getTabPanelUtilityClass2 as getTabPanelUtilityClass,
  getTabUtilityClass2 as getTabUtilityClass,
  getTableUtilityClass,
  getTabsUtilityClass2 as getTabsUtilityClass,
  getTextareaUtilityClass,
  getToggleButtonGroupUtilityClass,
  getTooltipUtilityClass,
  getTypographyUtilityClass,
  gridClasses_default as gridClasses,
  iconButtonClasses_default as iconButtonClasses,
  inputClasses_default as inputClasses,
  linearProgressClasses_default as linearProgressClasses,
  linkClasses_default as linkClasses,
  listClasses_default as listClasses,
  listDividerClasses_default as listDividerClasses,
  listItemButtonClasses_default as listItemButtonClasses,
  listItemClasses_default as listItemClasses,
  listItemContentClasses_default as listItemContentClasses,
  listItemDecoratorClasses_default as listItemDecoratorClasses,
  listSubheaderClasses_default as listSubheaderClasses,
  menuButtonClasses_default as menuButtonClasses,
  menuClasses_default as menuClasses,
  menuItemClasses_default as menuItemClasses,
  menuListClasses_default as menuListClasses,
  modalClasses_default as modalClasses,
  modalCloseClasses_default as modalCloseClasses,
  modalDialogClasses_default as modalDialogClasses,
  modalOverflowClasses_default as modalOverflowClasses,
  optionClasses_default as optionClasses,
  radioClasses_default as radioClasses,
  radioGroupClasses_default as radioGroupClasses,
  scopedCssBaselineClasses_default as scopedCssBaselineClasses,
  selectClasses_default as selectClasses,
  sheetClasses_default as sheetClasses,
  shouldSkipGeneratingVar,
  skeletonClasses_default as skeletonClasses,
  sliderClasses_default as sliderClasses,
  snackbarClasses_default as snackbarClasses,
  stackClasses_default as stackClasses,
  stepButtonClasses_default as stepButtonClasses,
  stepClasses_default as stepClasses,
  stepIndicatorClasses_default as stepIndicatorClasses,
  stepperClasses_default as stepperClasses,
  styled_default as styled,
  svgIconClasses_default as svgIconClasses,
  switchClasses_default as switchClasses,
  tabClasses_default as tabClasses,
  tabListClasses_default as tabListClasses,
  tabPanelClasses_default as tabPanelClasses,
  tableClasses_default as tableClasses,
  tabsClasses_default as tabsClasses,
  textareaClasses_default as textareaClasses,
  toggleButtonGroupClasses_default as toggleButtonGroupClasses,
  tooltipClasses_default as tooltipClasses,
  typographyClasses_default as typographyClasses,
  useColorScheme,
  useTheme,
  useThemeProps2 as useThemeProps
};
/*! Bundled license information:

@mui/base/index.js:
  (**
   * @mui/base v5.0.0-beta.40-1
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/joy/index.js:
  (**
   * @mui/joy v5.0.0-beta.52
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=@mui_joy.js.map
